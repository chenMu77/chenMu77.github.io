<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>hexo-blog3</title>
      <link href="/2022/03/01/hexo-blog3/"/>
      <url>/2022/03/01/hexo-blog3/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>JS_数据类型进阶</title>
      <link href="/2021/01/08/hexo-bolg8/"/>
      <url>/2021/01/08/hexo-bolg8/</url>
      
        <content type="html"><![CDATA[<h4 id="1-JS数据类型"><a href="#1-JS数据类型" class="headerlink" title="1.JS数据类型"></a>1.JS数据类型</h4><p>1）数据类型一共可分为8种：String、Number、Boolean、Null、undefined、Object、Symbol、BigInt</p><p>2）在ES5的时候，基本数据类型是6种，分别是：String、Number、Boolean、Null、undefined、Object</p><table><thead><tr><th align="center">类型</th><th align="center">值</th><th align="center">备注</th></tr></thead><tbody><tr><td align="center">String</td><td align="center">“abcd”</td><td align="center">任意字符串</td></tr><tr><td align="center">Number</td><td align="center">12.3</td><td align="center">任意的数字</td></tr><tr><td align="center">Boolean</td><td align="center">true、false</td><td align="center">布尔型</td></tr><tr><td align="center">undefined</td><td align="center">undefined</td><td align="center">未定义（没有初始化）</td></tr><tr><td align="center">Null</td><td align="center">Null</td><td align="center">不存在的对象</td></tr><tr><td align="center">Object</td><td align="center">Object</td><td align="center">任意对象</td></tr><tr><td align="center"></td><td align="center"></td><td align="center"></td></tr></tbody></table><p>3）基本（值）类型:String、Number、Boolean、Null、undefined</p><p>4）对象（引用）类型：Object，其中还包含了Date、function、Array（常见）</p><table><thead><tr><th align="center">类型</th><th align="center">被包含</th><th align="center">备注</th><th>输出</th></tr></thead><tbody><tr><td align="center">Object</td><td align="center"></td><td align="center"></td><td>Object</td></tr><tr><td align="center"></td><td align="center">function</td><td align="center">一种特别的对象（可执行）</td><td>Object</td></tr><tr><td align="center"></td><td align="center">Array</td><td align="center">一种特别的对象（数值下标，内部数据是有序的）</td><td>Object</td></tr><tr><td align="center"></td><td align="center"></td><td align="center"></td><td></td></tr></tbody></table><p>5）ES6引入了一种新的原始数据类型Symbol，表示独一无二的值。它是JavaScript语言的第七种数据类型，是一种类似字符串的数据类型 。</p><p>Symbol特点：</p><ol><li>Symbol的值是唯一的，用来解决命名冲突的问题</li><li>Symbol值不能与其他数据进行运算</li><li>Symbol定义的的对象属性不能使用for…in循环遍历，但是可以使用Reflect.ownKeys来获取对象的所有建名</li></ol><p>6）BigInt 是一种特殊的数字类型，它支持任意长度的整数</p><h4 id="2-数据类型判断"><a href="#2-数据类型判断" class="headerlink" title="2.数据类型判断"></a>2.数据类型判断</h4><p>typeof：</p><p>​        返回数据类型的字符串表达式</p><p>​        可以判断：undefined、数值、字符串、布尔值</p><p>​        不可以判断：null、object</p><p>instanceof：</p><p>​        可以判断对象的具体类型</p><p>===：</p><p>​        可以判断：undefined，unll</p><h4 id="3-相关问题"><a href="#3-相关问题" class="headerlink" title="3.相关问题"></a>3.相关问题</h4><p>1）undefined与null的区别</p><p>​        undefined代表未定义未赋值</p><p>​        null定义并赋值了，只是值为null</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span> <span class="token comment">//初始赋值为null，表明将要赋值为对象，否则无意义</span><span class="token comment">//确定对象就赋值</span>a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'确定的对象是一个数组'</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>2）什么时候给变量赋值为null</p><p>​        初始值，表明将要赋值为对象</p><p>​        结束前，让对象成为垃圾对象（被垃圾回收器回收）</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span> <span class="token comment">//初始赋值为null，表明将要赋值为对象，否则无意义</span><span class="token comment">//确定对象就赋值</span>a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'确定的对象是一个数组'</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">]</span><span class="token punctuation">;</span>a <span class="token operator">=</span> <span class="token keyword">null</span> <span class="token comment">//让a指向的对象成为垃圾对象(被垃圾回收器回收)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>3）严格区分变量类型与数据类型？</p><p>​    数据的类型、基本类型、对象类型</p><p>​    变量的类型（变量内存值的类型）</p><p>​    基本类型：保存就是基本类型的数据</p><p>​    引用类型：保存的是地址值</p><h4 id="4-JS数据-变量-内存"><a href="#4-JS数据-变量-内存" class="headerlink" title="4.JS数据-变量-内存"></a>4.JS数据-变量-内存</h4><p>1）什么是数据？</p><p>存储在内存中代表特定信息的 ‘东西’，本质上是0101…</p><p>数据的特点：可运算，可传递</p><p>一切皆数据</p><p>内存中所有操作的目标：数据</p><p>算数运算、逻辑运算、赋值、运行函数</p><p>2）什么是内存？</p><p>内存产生通电后产生可储存数据的空间（临时的）</p><p>内存产生和死亡：内存条==&gt;通电==&gt;产生内存空间==&gt;存储数据==&gt;处理数据==&gt;断电==&gt;内存空间和数据都消失</p><p>内存分类：</p><p>栈：全局变量、局部变量</p><p>堆：对象</p><p>3）什么是变量</p><p>可变化的量，由变量名和变量值组成</p><p>每个变量都对应的一块小内存，变量名用来查找对应的内存，变量值就是内存中保存的数据</p><p>4）内存，数据，变量三者之间的关系</p><p>内存用来存储数据的空间</p><p>变量是内存的标识</p><h4 id="5-相关问题二"><a href="#5-相关问题二" class="headerlink" title="5.相关问题二"></a>5.相关问题二</h4><p>1）关于赋值和内存的问题</p><p>问题1：var a = xxx; a内存中到底保存的是什么？</p><p>a）xxx是基本数据，保存的就是这个数据</p><p>b）xxx是对象，保存的就是对象的地址值</p><p>c）xxx是一个变量，保存的xxx的内存内容（可能是基本数据，也可能是地址值）</p><p>2）关于引用变量赋值问题</p><p>a）n个引用变量指向同一个对象，通过一个变量修改对象内部数据，其他所有变量看到的是修改之后的数据</p><p>b）2个引用变量指向同一个对象，让其中一个引用变量指向另一个对象，另一引用变量依然指向前一个对象</p><pre class="line-numbers language-JavaScript" data-language="JavaScript"><code class="language-JavaScript">var a&#x3D;&#123;name:&#39;tom&#39;&#125;;            var b&#x3D;a;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><img src="/2021/01/08/hexo-bolg8/js_01.png" class=""><p>问题2：在js调用函数时传递变量参数时，是值传递还是引用传递</p><p>理解1：都是值（基本/地址值）传递</p><p>理解2：可能是值传递，也可能是引用传递（地址值）</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span> <span class="token comment">//值传递</span>         <span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token parameter">a</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">//引用传递</span>             a<span class="token operator">=</span>a<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>             console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">&#125;</span>         <span class="token function">fn</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>         console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3）js引擎如何管理内存？</p><p>a）内存生命周期</p><p>分配小内存空间，得到它的使用权</p><p>存储数据，可以反复进行操作</p><p>是否内存空间</p><p>b）释放内存</p><p>局部变量：函数执行完自动释放</p><p>对象：称为垃圾对象==&gt;垃圾回收器回收</p><pre class="line-numbers language-JavaScript" data-language="JavaScript"><code class="language-JavaScript">var a &#x3D; 3;         var obj &#x3D;&#123;&#125;         obj &#x3D; undefined;         function fn() &#123;              var b &#x3D;&#123;&#125;         &#125;         fn();&#x2F;&#x2F;b是自动释放，b所指向的对象是在后面的某个时刻由垃圾回收器回收<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>绘制三角形</title>
      <link href="/2020/06/11/hexo-blog2/"/>
      <url>/2020/06/11/hexo-blog2/</url>
      
        <content type="html"><![CDATA[<h4 id="绘制三角形练习"><a href="#绘制三角形练习" class="headerlink" title="绘制三角形练习"></a>绘制三角形练习</h4><p>1.) 使用CSS中的盒模型（border）绘制三角形，实现效果：</p><img src="/2020/06/11/hexo-blog2/css_01.png" class=""><p>2.) 知识误区，（border）元素是由三角形组成，而并非矩形，为证明，将我们平时所使用的语法列出，在学习（border）时，通常为设置1px，且颜色单一，很难从视觉效果上了解（border）的形成方式，从而产生了误解。因此将（border）设置为30px，效果图为：box2。</p><img src="/2020/06/11/hexo-blog2/css_02.png" class=""><p>3.) 进一步实现三角形绘制，需要知道box是块元素，其默认宽度是100%，所以将把box的宽高强制为0，效果图为box2。</p><img src="/2020/06/11/hexo-blog2/css_03.png" class=""><p>4.) 据效果图box2所示：（border）是由top，right，bottom，left，4个三角形组成，当我们对其另外3个三角形进行隐藏时，最终保留下来的就是所需要的三角形。</p><img src="/2020/06/11/hexo-blog2/css_04.png" class="">]]></content>
      
      
      
        <tags>
            
            <tag> HTML </tag>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS基础篇</title>
      <link href="/2020/05/09/hexo-bolg1/"/>
      <url>/2020/05/09/hexo-bolg1/</url>
      
        <content type="html"><![CDATA[<h3 id="P-1-JS的三个输出"><a href="#P-1-JS的三个输出" class="headerlink" title="P-1.JS的三个输出"></a>P-1.JS的三个输出</h3><p>​    1.弹窗显示：alert（）；飒飒</p><p>​    2.在页面中显示：document.write（）；</p><p>​    3.在控制台显示：console.log</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"这是我的第一行JS代码，弹出警告框"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"向body里面写内容，在页面中显示"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"123456789，在控制台显示"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="P-2-JS编写位置"><a href="#P-2-JS编写位置" class="headerlink" title="P-2.JS编写位置"></a>P-2.JS编写位置</h4><p>内部编写script代码：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span><span class="token operator">></span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"内部JS代码"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>外部编写script代码：通过script标签引入</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span> src<span class="token operator">=</span><span class="token string">"js/P2.script.js"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​    script标签一旦用于引入外部文件了，就不能在编写代码了，即使编写了浏览器也会忽略如果需要则可以在创建一个新的script标签用于编写内部代码   </p><h4 id="P-3-JS基本语法"><a href="#P-3-JS基本语法" class="headerlink" title="P-3.JS基本语法"></a>P-3.JS基本语法</h4><p>​    1）JS严格区分大小写</p><p>​    2）JS中每一条语句以分号（;）结尾</p><p>​    3）JS中会忽略多个空格和换行，所以我们可以利用空格和换行对代码进行格式化</p><p>​    4）单行注释：//</p><p>​    5）多行注释：/* */</p><h4 id="P-4-JS字面量和变量"><a href="#P-4-JS字面量和变量" class="headerlink" title="P-4.JS字面量和变量"></a>P-4.JS字面量和变量</h4><p>​    1）字面量（常量）：都是一些不可改变的值，字面量我们可以直接使用，但是我们一般不会直接使用字面量</p><p>​    2）变量：变量可以用来保存字面量，而且变量的值是可以任意改变的，变量更加方便我们使用，所以在开发过程中一般会使用变量去保存一个字面量，而很少使用字面量</p><p>​    3）变量声明：在JS中使用var关键字来声明一个变量，如：  var a ;</p><p>​    4）var只在声明变量时写</p><h4 id="P-5-JS标识符"><a href="#P-5-JS标识符" class="headerlink" title="P-5.JS标识符"></a>P-5.JS标识符</h4><p>1）标识符：在JS中所有可以由我们自主命名的都可以称为标识符，例如：变量名、函数名、属性名、都属于标识符。</p><p>2）标识符命名时都需要遵守如下的规则：</p><p>​        1.标识符中可以含有字母、数字 、_ 、$</p><p>​        2.标识符不能以数字开头</p><p>​        3.标识符不能是ES中的关键字或保留字</p><p>​        4.标识符一般都采用驼峰命名法：首字母小写，每个单词的开头字母大写，其余字母小写，如：helloWorld</p><p>​        5.JS底层保存标识符时实际上是采用的Unicode编码，所以理论上讲，所有的utf-8中含有的内容都可以作为标识符</p><h4 id="P-6-JS数据类型"><a href="#P-6-JS数据类型" class="headerlink" title="P-6.JS数据类型"></a>P-6.JS数据类型</h4><p>​    1）数据类型指的就是字面量的类型，在JS中一共有六种数据类型：</p><table><thead><tr><th>数据类型</th><th>说明</th></tr></thead><tbody><tr><td>String</td><td>字符串</td></tr><tr><td>Number</td><td>数值</td></tr><tr><td>Boolean</td><td>布尔值</td></tr><tr><td>Null</td><td>空值</td></tr><tr><td>Undefibed</td><td>未定义</td></tr><tr><td>Object</td><td>对象</td></tr></tbody></table><p>String、Number、Boolean、Null、Undefibed属于基本数据类型，Object属于引用数据类型</p><p>1.String字符串：在JS中字符串需要用引号引起来，使用双引号或单引号都可以，但是不要混着用，引号不能嵌套，双引号里面不能放双引号，单引号里面不能放单引号</p><p>2.在字符串中我们可以使用\作为转义字符，当表示一些特殊符号时可以使用\进行转义</p><h4 id="P-7-JS-Number"><a href="#P-7-JS-Number" class="headerlink" title="P-7.JS_Number"></a>P-7.JS_Number</h4><p>1）在JS中所有的数值都是Number类型，包括整数和浮点数（小数）</p><p>2）可以使用一个运算符typeof来检测一个变量的类型，语法：typeof变量名，检查数值时会返回一个Number，检测字符串时会返回String</p><p>3)在JS中可以表示的数字的最大值Number.MAX_VALUE：1.7976931348623157e+308，如果使用Number表示的数字超过了最大值，则会返回一个Infinity，Infinity表示正无穷，-Infinity表示负无穷；</p><p>最小值：Number.MIN_VALUE：5e-324大于0的最小值（最小的正数）</p><p>4）NaN 是一个特殊的数字，表示Not A Number，使用typeof检查一个NaN也会返回number</p><p>5）如果采用JS进行浮点数运算，可能得到一个不精确的结果，所以千万不要使用JS进行精确度比较高的运算</p><h4 id="P-8-JS-Boolean"><a href="#P-8-JS-Boolean" class="headerlink" title="P-8.JS_Boolean"></a>P-8.JS_Boolean</h4><p>​    1）Boolean 布尔值，主要用来逻辑判断的</p><p>​            true：表示真</p><p>​            false：表示假</p><p>​        使用typeof检查时，会返回boolean</p><h4 id="P-9-JS-Null和Undefibed"><a href="#P-9-JS-Null和Undefibed" class="headerlink" title="P-9.JS_Null和Undefibed"></a>P-9.JS_Null和Undefibed</h4><p>1）Null（空值）的值只有一个，就是null</p><p>​        null这个值专门用来表示一个为空的对象</p><p>使用typeof检查时，会返回object</p><p>2）Undefibed（未定义）类型的值只有一个，就是undefibed</p><p>​        当声明一个变量，但是并不给赋值时，它的值就是undefibed</p><p>使用typeof检查时，会返回undefibed</p><h4 id="P-10-JS-强制类型转换-String"><a href="#P-10-JS-强制类型转换-String" class="headerlink" title="P-10.JS_强制类型转换-String"></a>P-10.JS_强制类型转换-String</h4><p>1）将其他的数据类型转换为String</p><p>​        方式一：调用被转换数据类型toString（）方法，</p><p>​                        该方法不会影响原变量，它会将结果返回。</p><p>​                        但是注意：null和undefibed这两个值没有toString（）方法，如果调用他们的方法会报错。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span><span class="token operator">></span><span class="token keyword">var</span> a<span class="token punctuation">;</span>a<span class="token operator">=</span><span class="token number">123</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>a<span class="token operator">=</span>a<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​    方式二：调用String（）函数，并将被转换的数据作参数传递给函数</p><p>​                使用String（）函数做强制类型转换时，</p><p>​                对于Number和Boolean实际上就是调用的toString（）方法</p><p>​                但是对于null和nudefined，就不会调用toString（）方法</p><p>​                他会将null直接转换为“null”，他会将nudefined直接转换为“nudefined”</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span><span class="token operator">></span><span class="token keyword">var</span> a<span class="token punctuation">;</span>a<span class="token operator">=</span><span class="token number">123</span><span class="token punctuation">;</span>a <span class="token operator">=</span> <span class="token function">String</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="P-11-JS-强制类型转换-Number"><a href="#P-11-JS-强制类型转换-Number" class="headerlink" title="P-11.JS_强制类型转换-Number"></a>P-11.JS_强制类型转换-Number</h3><p>1）将其他的数据类型转换为Number</p><p>​    方式一：调用Number（）函数</p><p>​                字符串 - -&gt;数字</p><p>​                            1.如果是纯数字的字符串，则直接将其转换为数字</p><p>​                            2.如果字符串中有非数字的内容，则转换为NaN</p><p>​                            3.如果字符串是一个空串或者是一个全是空格的字符串，则转换为0</p><p>​                布尔 - -&gt;数字</p><p>​                            true 转成 1</p><p>​                            false转成 0</p><p>​                            Null - -&gt;数字     0</p><p>​                            nudefined - -&gt;数字     NaN</p><p>​    方式二：这种方式专门用来对付字符串</p><p>​            parseInt（）函数：可以将一个字符串中的有效的整数内容取出来</p><p>​            parseFloat（）函数：作用和parseInt类似，不同的是它可以获得有效小数</p><p>​            如果对非String使用parseInt（）或parseFloat（），他会先将其转换为String类型，然后在操作</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span><span class="token operator">></span><span class="token comment">//定义一个变量</span><span class="token keyword">var</span> a<span class="token punctuation">;</span><span class="token comment">//初始化为String类型</span>a<span class="token operator">=</span><span class="token string">"123b456"</span><span class="token comment">//强制类型转换为Number类型，读取有效的整数内容</span>a<span class="token operator">=</span><span class="token function">parseInt</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="P-12-JS-其他进制的数字"><a href="#P-12-JS-其他进制的数字" class="headerlink" title="P-12.JS_其他进制的数字"></a>P-12.JS_其他进制的数字</h4><p>1）在JS中，如果需要表示16进制的数字，则需要以0x开头</p><p>​                    如果需要表示8进制的数字，则需要以0开头</p><p>​                    如果需要表示2进制的数字，则需要以0b开头，但不是所有的浏览器都支持</p><p>​    像“070”这种 字符串，有些浏览器会当成8进制解析，有些会当成10进制解析，可以在parseInt（）中传递，第二个参数，来指定数字的进制</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span><span class="token operator">></span><span class="token comment">//定义一个变量</span><span class="token keyword">var</span> a<span class="token punctuation">;</span><span class="token comment">//初始化为8进制数字</span>a<span class="token operator">=</span><span class="token string">"070"</span><span class="token comment">//强制类型转换为Number类型，读取有效的整数内容</span>a<span class="token operator">=</span><span class="token function">parseInt</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//以8进制解析</span>a<span class="token operator">=</span><span class="token function">parseInt</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//以10进制解析</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="P-13-JS-转换为Boolean"><a href="#P-13-JS-转换为Boolean" class="headerlink" title="P-13.JS_转换为Boolean"></a>P-13.JS_转换为Boolean</h4><p>1）调用Boolean（）函数来将a转换为布尔值</p><p>​            使用Boolean（）函数</p><p>​            数字 - - -&gt;布尔</p><p>​            除了0和null，其他的都是true</p><p>​            字符串 - - -&gt;布尔</p><p>​            除了空字符串，其他的都是true</p><p>​            Null和Undefibed都会转换为false</p><p>​            对象也会转换为true</p><h4 id="P-14-JS-算数运算符"><a href="#P-14-JS-算数运算符" class="headerlink" title="P-14.JS_算数运算符"></a>P-14.JS_算数运算符</h4><p>​        1）运算符也叫操作符，通过运算符可以对一个或多个值进行运算，并获取运算结果，比如：typeof就是运算符，可以来获取一个值的类型，他会将该值的类型以字符串的形式返回</p><p>​        2）算数运算符：+、-、*、/（除法运算）、%（取余数）</p><p>​        当对非Number类型的值进行运算时，会将这些值先转换成Number类型，然后在进行运算</p><p>​        任何值和NaN做运算都得NaN</p><p>​        如果对两个字符串进行加法运算，则会做拼串操作，会将两个字符串拼接成一个字符串并返回</p><p>​        任何值和字符串相加都会转换为字符串，并做拼串操作，+“ ”；即可将其转换为String类型（隐式类型转换）</p><p>​        任何值做 -  、* 、/运算时都会自动转换为Number   ，可以通过为一个值-0 *1 /1来将其转换为Number类型，原理和Number（)函数一样，使用起来更加简单</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span><span class="token operator">></span><span class="token comment">//定义一个变量</span><span class="token keyword">var</span> a<span class="token punctuation">,</span>num<span class="token punctuation">;</span>a<span class="token operator">=</span><span class="token number">2</span><span class="token operator">+</span><span class="token string">"2"</span><span class="token punctuation">;</span><span class="token comment">//拼接</span>num<span class="token operator">=</span><span class="token string">"123"</span><span class="token operator">-</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//隐式转换为Number类型</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="P-15-JS-一元运算符"><a href="#P-15-JS-一元运算符" class="headerlink" title="P-15.JS_一元运算符"></a>P-15.JS_一元运算符</h4><p>1）一元运算符，只需要一个操作数</p><p>​        正号：不会对数字产生任何影响</p><p>​        负号：负号可对数字进行负号取反</p><p>2）对于非Number类型的值，它会将值先转换为Number，然后在运算，可以对一个其他的数据类型使用+，来将其转换为number他的原理和Number（）函数一样</p><h4 id="P-16-JS-自增和自减"><a href="#P-16-JS-自增和自减" class="headerlink" title="P-16.JS_自增和自减"></a>P-16.JS_自增和自减</h4><p>1）自增：通过自增可以使变量在自身的基础上增加1</p><p>​        对于一个变量自增以后,（原变量）的值会立即自增1</p><p>​        自增分成两种：后++（a++）和前++（++a）</p><p>​        无论是a++ 还是++a，都会立即使原变量的值自增1</p><p>​        ++在前先++在赋值，++在后先赋值在++；</p><p>a++的值等于原变量的值（自增前的值）</p><p>++a的值等于新值（自增后的值）</p><p>2）自减：通过自减可以使变量在自身的基础上减1</p><p>​        对于一个变量自减以后,（原变量）的值会立即自减1</p><p>····        自增分成两种：后–（a–）和前–（–a）</p><p>​        无论是a– 还是–a，都会立即使原变量的值自减1</p><p>​        –在前先–在赋值，–在后先赋值在–；</p><p>a–的值等于原变量的值（自减前的值）</p><p>–a的值等于新值（自减后的值）</p><p><strong>练习题</strong>：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span><span class="token operator">></span>    <span class="token keyword">var</span> n1<span class="token operator">=</span><span class="token number">35</span><span class="token punctuation">,</span>n2<span class="token operator">=</span><span class="token number">21</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> n<span class="token operator">=</span>n1<span class="token operator">++</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"n="</span><span class="token operator">+</span>n<span class="token operator">+</span><span class="token string">",n1="</span><span class="token operator">+</span>n1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//35,36</span>    n<span class="token operator">=</span><span class="token operator">++</span>n1<span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"n="</span><span class="token operator">+</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//37</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"n1="</span><span class="token operator">+</span>n1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//37</span>    n<span class="token operator">=</span>n2<span class="token operator">--</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"n="</span><span class="token operator">+</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//21</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"n2="</span><span class="token operator">+</span>n2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//20</span>    n<span class="token operator">=</span><span class="token operator">--</span>n2<span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"n="</span><span class="token operator">+</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//19</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"n2="</span><span class="token operator">+</span>n2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//19</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="P-17-JS-逻辑运算符"><a href="#P-17-JS-逻辑运算符" class="headerlink" title="P-17.JS_逻辑运算符"></a>P-17.JS_逻辑运算符</h4><p>1）JS中为我们提供了三种逻辑运算符：！非、&amp;&amp;与、||或</p><p>(！)所谓非运算就是值对一个布尔值进行取反操作，true变false，false变true</p><p>​     如果对非布尔值进行元素，则会将其转换为布尔值，然后再取反，所以我们可以利用该特点，来将一个其他的数据类型转换为布尔值。可以为一个任意数据类型取两次反，来将其转换为布尔值，原理和Boolean（）函数一样。</p><p>&amp;&amp;：&amp;&amp;可以对符号两侧的值进行与运算并返回结果</p><p>​        运算规则：两个值中只要有一个值为false就会返回false，只有两个值都为true时，才会返回true。JS中的“与”属于短路的与，如果第一个值为false，则不会看第二个值。</p><p>||：||可以对符号两侧的值进行或运算并返回结果</p><p>​        运算规则：两个值中只要有一个true，就会返回true，如果两个值都为false，才会返回false。JS中的“或”属于短路的或，如果第一个值为true，则不会看第二个值。</p><h4 id="P-18-JS-非布尔值的与或运算"><a href="#P-18-JS-非布尔值的与或运算" class="headerlink" title="P-18.JS_非布尔值的与或运算"></a>P-18.JS_非布尔值的与或运算</h4><p>1）&amp;&amp; ||非布尔值的情况</p><p>​    对于非布尔值进行与或运算时，会向将其转换为布尔值，然后再运算，并且返回（原值）。</p><p>&amp;&amp;与运算：如果第一个值为true，则必然返回第二个值，如果第一个值为false，则直接返回第一个值</p><p>||或运算：如果第一个值为true，则直接返回第一个值，如果第一个值为false，则返回第二个值</p><h4 id="P-19-JS-赋值运算符"><a href="#P-19-JS-赋值运算符" class="headerlink" title="P-19.JS_赋值运算符"></a>P-19.JS_赋值运算符</h4><p>1）= 赋值：可以将符号右侧的值赋值给符号左边的变量</p><p>​    赋值运算符有：+=、-=、*=、/=、%=</p><p>例：</p><p>​     +=加赋值：a+=5； 等价与a=a+5；</p><p>​     -=减赋值：a-=5； 等价与a=a-5；</p><h4 id="P-20-JS-关系运算符"><a href="#P-20-JS-关系运算符" class="headerlink" title="P-20.JS_关系运算符"></a>P-20.JS_关系运算符</h4><p>1）通过关系运算符可以比较两个值之间的大小关系，如果关系成立它会返回true，如果关系不成立则会返回false。</p><p>​    大于号 &gt;:判断符号左侧的值是否大于右侧，如果关系成立，返回true，如果关系不成立则返回false</p><p>​    大于等于&gt;=:判断符号左侧的值是否大于等于右侧，如果关系成立，返回true，如果关系不成立则返回false</p><p>​    小于号 &lt;:同理</p><p>​    小于等于号 &lt;=:同理</p><p>2）非数值的情况下：对于非数值进行比较时，会将其转换为数字（Number）然后在比较</p><p>​      任何值和NaN做比较都是false</p><p>3）如果符号两侧的值都是字符串时，不会将其转换为数字，进行比较。而会分别比较字符串中字符的Unicode编码。</p><p>​     比较两个字符串时，比较的是两个字符串的字符编码，比较字符编码时是一位一位进行比较，如果两位一样，则比较下一位，所以借用他来对英文进行排序</p><p>​     如果比较的两个字符串型的数字，可能会得到不可预期的结果，注意：在比较两个字符串型的数字时，必须转型。</p><h3 id="P-21-JS-Unicode编码"><a href="#P-21-JS-Unicode编码" class="headerlink" title="P-21.JS_Unicode编码"></a>P-21.JS_Unicode编码</h3><p>1）在字符串中使用转义字符输入Unicode编码：（\u四位编码）</p><p>2）在网页中使用Unicode编码：（&amp;#四位编码）；这里需要编码的是10进制</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span><span class="token operator">></span>    <span class="token comment">//在控制台使用Unicode编码</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"\u2620"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//在网页中使用Unicode编码</span>    document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"&amp;#2620"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="P-22-JS-相等运算符"><a href="#P-22-JS-相等运算符" class="headerlink" title="P-22.JS_相等运算符"></a>P-22.JS_相等运算符</h4><p>1）==相等运算符：用来比较两个值是否相等 ，如果相等返回true，否则返回false</p><p>​            当使用==来比较两个值时，如果值的类型不同，则会自动进行类型转换，将其转换为相同类型，然后在比较。</p><p>​            nudefined衍生自null，所以这两个值做相等判断时，会返回true</p><p>​            NaN不和任何值相等，包括它本身</p><p>2）判断一个值是否为NaN，可以使用isNaN（）函数，如果改值是NaN则返回true，否则返回false。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span><span class="token operator">></span><span class="token keyword">var</span> b<span class="token operator">=</span><span class="token number">NaN</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">isNaN</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>3）！=不相等运算符：判断两个值    不相等，如果不相等返回true，否则返回false</p><p>​      不相等也会对变量进行自动的类型转换，如果转换后相等它也会返回false</p><p>4）===全等运算符：用来判断两个值是否全等，它和相等类似，不同的是他不会做自动的类型转换，如果两个值类型不同直接返回false。</p><p>5）！==不全等运算符：用来判断两个值是否全等，和不等类似，不同的是不会做自动的类型转换，如果两个值类型不同直接返回true。</p><h4 id="P-23-JS-条件运算符"><a href="#P-23-JS-条件运算符" class="headerlink" title="P-23.JS_条件运算符"></a>P-23.JS_条件运算符</h4><p>1）条件运算符也叫三元运算符</p><p>​      语法：条件表达式？语句1：语句2；</p><p>​    执行流程：</p><p>​     条件运算符执行时，首先对条件表达式进行求值，如果该值为true则执行语句1，并返回结果。如果该值为false则执行语句2，并返回结果。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span><span class="token operator">></span><span class="token keyword">var</span> a<span class="token operator">=</span><span class="token number">20</span><span class="token punctuation">,</span>b<span class="token operator">=</span><span class="token number">30</span><span class="token punctuation">;</span><span class="token comment">//a>b?alert("a大"):alert("b大");</span><span class="token comment">//var max=a&lt;b?alert("a小"):alert("b小");</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="P-24-JS-运算符优先级"><a href="#P-24-JS-运算符优先级" class="headerlink" title="P-24.JS_运算符优先级"></a>P-24.JS_运算符优先级</h4><p>1），逗号运算符：可以分割多个语句，一般可以在声明多个变量时使用</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//可以声明多个变量并赋值</span><span class="token keyword">var</span> a<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">,</span>b<span class="token operator">=</span><span class="token number">20</span><span class="token punctuation">,</span>c<span class="token operator">=</span><span class="token number">30</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>2）和数学一样，在JS中运算符也有优先级</p><p>​        例：先乘除后加减</p><p>在JS中有一个运算符优先级表，在表中越靠上优先级越高，优先级越高越优先计算。如果优先级一样，则从左往右 计算，但是这个表我们并不需要记忆，如果遇到优先级不清楚，可以使用（）来改变优先级</p><h4 id="P-25-JS-代码块"><a href="#P-25-JS-代码块" class="headerlink" title="P-25.JS_代码块"></a>P-25.JS_代码块</h4><p>1）我们的程序是由一条语句构成的，语句是按照自上向下的顺序一条一条执行的。</p><p>​      在JS中可以使用{ }来为语句进行分组，同一个{ } 中的语句称为一组语句，他们要么都执行，要么都不执行，一个{ }中的语句我们也称为叫一个代码块。在代码块的后面就不用在写(分号;)了。</p><p>​        JS中的代码块，只具有分组的作用，没有其他用途，代码块的内容，在外部是完全可见的。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span><span class="token operator">></span><span class="token punctuation">&#123;</span><span class="token keyword">var</span> a<span class="token operator">=</span><span class="token number">120</span><span class="token punctuation">,</span>b<span class="token operator">=</span><span class="token number">80</span><span class="token punctuation">,</span>c<span class="token operator">=</span><span class="token number">50</span><span class="token punctuation">;</span>a<span class="token operator">+=</span>b<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="P-26-JS-if语句"><a href="#P-26-JS-if语句" class="headerlink" title="P-26.JS_if语句"></a>P-26.JS_if语句</h4><p>1）流程控制语句</p><p>​    在JS中的程序是从上到下一行一行执行的，通过流程控制语句可以控制程序执行流程，使程序可以根据一定的条件来选择执行</p><p>语句的分类：</p><p>​        1.条件控制语句：使用条件判断语句可以执行某个语句之前进行判断，如果条件成立才会执行语句，如果条件不成立则不执行。</p><p>​        语法一：</p><p>if（条件表达式）{</p><p>​                        语句….；</p><p>}</p><p>​        if语句在执行时，会先对条件表达式进行求值判断，如果条件表达式的值为true，则执行if后的语句，<br>如果条件表达式的值为false，则不会执行if后的语句。</p><p>​        if语句只能控制紧随其后的那个语句。可以将这些语句统一放到代码块中。</p><p>​        if语句后的代码块不是必须的，但是在开发中尽量写上代码块,即使if后只有一条语句。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span><span class="token operator">></span><span class="token keyword">var</span> a<span class="token operator">=</span><span class="token number">120</span><span class="token punctuation">,</span>b<span class="token operator">=</span><span class="token number">80</span><span class="token punctuation">,</span>c<span class="token operator">=</span><span class="token number">50</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token operator">&lt;</span>b<span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​        语法二：</p><p>if（条件表达式）{</p><p>​        语句….；</p><p>}else{</p><p>​        语句….；</p><p>}</p><p>​        if…else…语句：当语句执行时，会对if后的条件表达式进行求值判断，如果该值为true，则执行if后的语句，如果该值为false，则执行else后的语句</p><p>​        语法三：</p><p>if（条件表达式）{</p><p>​        语句….；</p><p>}else if（条件表达式）{</p><p>​        语句….；</p><p>}else{</p><p>​        语句….；</p><p>}</p><p>​    if…else if…else语句：当语句执行时，会从上到下依次执行对条件表达式进行求值判断，如果值为true，则当前语句，则执行当前语句。如果值为false，则继续向下执行判断，如果所有条件都不满足，则执行最后一个else后的语句。该语句中，只会有一个代码块被执行，一旦代码块执行了，则直接结束语句。</p><p><strong>练习题：</strong></p><p>​    prompt()可以弹出一个提示框,该提示框中会带有一个文本框，用户可以在文本框中输入一段内容，该函数需要一个字符串作为参数，该字符串将会作为提示框的提示文字</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span><span class="token operator">></span><span class="token comment">/* 请输入一个数: 当成绩100，奖励bmw 当成绩80-90，奖励手机 当成绩60-80，奖励书一本 其他什么都没有 * */</span><span class="token keyword">var</span> a<span class="token operator">=</span><span class="token function">prompt</span><span class="token punctuation">(</span><span class="token string">"请输入一个数："</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token operator">==</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"奖励bmw"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token operator">>=</span><span class="token number">80</span><span class="token operator">&amp;&amp;</span>a<span class="token operator">&lt;=</span><span class="token number">99</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"奖励手机"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token operator">>=</span><span class="token number">60</span><span class="token operator">&amp;&amp;</span>a<span class="token operator">&lt;=</span><span class="token number">80</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"奖励书一本"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"什么奖励都没有"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="P-27-JS-条件分支语句"><a href="#P-27-JS-条件分支语句" class="headerlink" title="P-27.JS_条件分支语句"></a>P-27.JS_条件分支语句</h4><p>1）条件分支语句也叫switcn语句</p><p>​    语法：</p><p>​        switch（条件表达式）{</p><p>​            case 表达式：</p><p>​                语句….</p><p>​                break；</p><p>​        default：</p><p>​                语句…</p><p>​                break；</p><p>}</p><p>执行流程：</p><p>​    switch…case..语句</p><p>​            在执行时会依次将case后的表达式的值和switch后的条件表达式的值进行全等比较</p><p>​            如果比较结果为true，则从当前case处开始执行代码；当前case后的所有代码都会执行。我们可以在case后面跟着一个break关键字，这样可以确保只会执行当前case后的语句，而不会执行其他case。</p><p>​            如果比较结果为false，则继续向下比较</p><p>​            如果所有的比较结果都为false，则只执行default后的语句</p><p>​            switch语句和if语句的功能实际上有重复的，使用switch可以实现if的功能，使用if也可以实现switch的功能，所以我们使用时，可以根据自己的习惯选择</p><h4 id="P-28-JS-while循环"><a href="#P-28-JS-while循环" class="headerlink" title="P-28.JS_while循环"></a>P-28.JS_while循环</h4><p>循环语句：可以反复的执行一段代码多次</p><p>​    while循环：</p><p>​            语法：</p><p>​                while（条件表达式）{</p><p>​                    语句 . . .</p><p>}</p><p>while语句在执行时，</p><p>​            先对条件表达式进行求值判断，如果值为true，则执行循环体，循环体执行完毕以后，继续对表达式进行判断，如true则继续执行循环体，依次类推；如果值为false，则终止循环。</p><p>​            如果表达式的值始终为true，则是死循环，我们可以通过brake来终止循环。</p><p>​    do . . . while循环：</p><p>​            语法：</p><p>​                        do{</p><p>​                                语句 . . .</p><p>​                        }while（条件表达式）</p><p>​    do. . . while语句在执行时，会先执行循环体，循环体执行完毕以后，在对while后的条件进行判断，如果结果为true，则继续执行循环体，执行完毕继续判断，依次类推。如果值为false，则终止循环。</p><p>​    do. . . while语句在执行时，至少会执行一次。</p><h4 id="P-29-JS-for循环"><a href="#P-29-JS-for循环" class="headerlink" title="P-29.JS_for循环"></a>P-29.JS_for循环</h4><p>​    for语句，也是一个循环语句，也称为for循环</p><p>​    在for循环中，为我们提供了专门的位置用来放三个表达式:</p><p>​                1.初始化表达式</p><p>​                2.条件表达式</p><p>​                3.更新表达式</p><p>for循环的语法：</p><p>​        for（初始化表达式；条件表达式；更新表达式）{</p><p>​                    语句. . . </p><p>}</p><p>for循环执行流程：</p><p>​                    1.执行初始化表达式，初始化变量</p><p>​                    2.执行条件表达式，判断是否执行循环，如果为true，则执行循环，</p><p>​                    3.如果为false则终止循环</p><p>​                    4.执行更新表达式，更新表达式执行完毕，继续执行条件表达式。（重复）</p><p><strong>练习题：</strong></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">判断一个数是否为质数<span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span><span class="token operator">></span><span class="token keyword">var</span> sum<span class="token punctuation">,</span>num<span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span>sum<span class="token operator">=</span><span class="token function">prompt</span><span class="token punctuation">(</span><span class="token string">"请输入人一个输入"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>sum<span class="token operator">&lt;</span><span class="token number">1</span><span class="token operator">&amp;&amp;</span>sum<span class="token operator">></span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"输入不合法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>sum<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>sum<span class="token operator">%</span>i<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>num<span class="token operator">=</span><span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>num<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"它是一个质数"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"它不是质数"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">打印九九乘法表<span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span><span class="token operator">></span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span><span class="token number">9</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>i<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token string">"*"</span><span class="token operator">+</span>j<span class="token operator">+</span><span class="token string">"="</span><span class="token operator">+</span>i<span class="token operator">*</span>j<span class="token operator">+</span><span class="token string">"\r\r"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"&lt;br />"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="P-30-JS-对象的简介"><a href="#P-30-JS-对象的简介" class="headerlink" title="P-30.JS_对象的简介"></a>P-30.JS_对象的简介</h4><p>​    JS中的数据类型，String-字符串、Number-数值、Boolean-布尔值、Null-空值、Undefined-未定义；以上五种类型输入基本数据类型，以后我们看到的值只要不是上边的5种，全都是对象。Object-对象，引用数据类型。</p><p>如果使用基本数据类型的数据，我们所创建的变量都是独立，不能成为一个整体。对象属于一种复合的数据类型，在对象中可以保存多个不同数据类型的属性。</p><p>对象的分类：</p><p>1）.内建对象</p><p>​            由ES标准中定义的对象，在任何的ES的实现中都可以使用</p><p>​            比如：Math String Number Boolean Function Object. . . . . .</p><p>2）宿主对象</p><p>​            由JS的运行环境提供的对象，目前来讲主要是指由浏览器的对象</p><p>​            比如BOM  DOM</p><p>3）自定义对象</p><p>​            由开发人员自己创建的对象</p><h3 id="P-31-JS-对象的基本操作"><a href="#P-31-JS-对象的基本操作" class="headerlink" title="P-31.JS_对象的基本操作"></a>P-31.JS_对象的基本操作</h3><p>1）创建对象：使用new关键字调用的函数，是构造函数constructor，构造函数是专门用来创建对象的函数</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> obj<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Object</span>（）；<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>使用typeof检查一个对象时，会返回object</p><p>在对象中保存的值称为属性,向对象添加属性：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//语法:对象.属性名=属性值;</span>obj<span class="token punctuation">.</span>name<span class="token operator">=</span><span class="token string">"张三"</span><span class="token punctuation">;</span>obj<span class="token punctuation">.</span>age <span class="token operator">=</span><span class="token string">"18"</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>2）读取对象中的属性：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//语法：对象.属性名</span>obj<span class="token punctuation">.</span>name<span class="token punctuation">;</span>obj<span class="token punctuation">.</span>age<span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>如果读取对象中没有的属性,不会报错而是会返回undefined</p><p>3）修改对象的属性值</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//语法：对象.属性名=新值</span>obj<span class="token punctuation">.</span>name<span class="token operator">=</span><span class="token string">"李四"</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>4）删除对象的值</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//语法：delete 对象.属性名</span><span class="token keyword">delete</span> obj<span class="token punctuation">.</span>name<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="P-32-JS-属性名和属性值"><a href="#P-32-JS-属性名和属性值" class="headerlink" title="P-32.JS_属性名和属性值"></a>P-32.JS_属性名和属性值</h4><p>1）使用特殊的属性名，不能采用 . 的方式来操作</p><p>​        需要使用另一种方式：</p><p>​                        语法：对象[“属性名”] = 属性值</p><p>读取时也需要采用这种方式</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//语法：对象["属性名"] = 属性值</span><span class="token keyword">var</span> obj<span class="token operator">=</span> <span class="token keyword">new</span>  <span class="token class-name">obj</span><span class="token punctuation">[</span><span class="token string">"123"</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">456</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">[</span><span class="token string">"123"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>使用[ ]这种形式去操作属性，更加的灵活，在[ ]中可以直接传递一个变量，这样变量值是多少就会读取那个属性</p><p>JS对象的属性值，可以是任意的数据类型</p><p>2）in 运算符</p><p>​    通过该运算符可以检查一个对象中是否含有指定的属性，如果由则返回true、没有则返回false</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//语法："属性名" in 对象</span><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>obj<span class="token punctuation">.</span>name<span class="token operator">=</span><span class="token string">"小碗"</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"name"</span> <span class="token keyword">in</span> obj<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="P-33-JS-基本和引用数据类型"><a href="#P-33-JS-基本和引用数据类型" class="headerlink" title="P-33.JS_基本和引用数据类型"></a>P-33.JS_基本和引用数据类型</h4><p>1）基本数据类型：JS中的变量都是保存到栈内存中的，基本数据类型的值直接在栈内存中存储，值与值之间是独立存在，修改一个变量不会影响其他的变量。</p><p>2）引用数据类型：对象是保存在堆内存中的，每创建一个新的对象，就会在堆内存中开辟出一个新的空间，而变量保存的是对象的内存地址（对象的引用），如果两个变量保存的是同一个对象的引用，当同一个变量修改属性时，另一个也会受到影响</p><img src="/2020/05/09/hexo-bolg1/js_26.jpg" class=""><p>​    3）比较两个基本数据类型的值时，就是比较值。而比较两个引用数据类型时，它比较的是对象的内存地址，如果两个对象是一模一样的，但是地址不同，它也会返回false。</p><h4 id="P-34-JS-对象字面量"><a href="#P-34-JS-对象字面量" class="headerlink" title="P-34.JS_对象字面量"></a>P-34.JS_对象字面量</h4><p>1）创建一个对象</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>使用对象字面量来创建对象</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> obj <span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>以上两种本质是一样的。</p><p>2）使用对象字面量，可以在创建对象时，直接指定对象中的属性</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">语法：<span class="token punctuation">&#123;</span>属性名：属性值，属性名：属性值<span class="token operator">...</span><span class="token punctuation">&#125;</span><span class="token keyword">var</span> obj<span class="token operator">=</span> <span class="token punctuation">&#123;</span>name<span class="token operator">:</span><span class="token string">"张三"</span><span class="token punctuation">,</span>age<span class="token operator">:</span><span class="token number">14</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>​    对象字面量的属性名可以加引号也可以不加，建议不加，如果要使用一些特殊的名字，则必须加</p><p>例：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> obj<span class="token operator">=</span><span class="token punctuation">&#123;</span>name：<span class="token string">"张三"</span>，<span class="token string">"$@#$"</span>：<span class="token string">"哈哈"</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>属性名和属性值是一组一组的名值对结构，名和值之间使用：连接；多值对之间使用    <strong>，</strong>（逗号）隔开。</p><p>最后一个值（末尾）无需加（逗号）。</p><h4 id="P-35-JS-函数的简介"><a href="#P-35-JS-函数的简介" class="headerlink" title="P-35.JS_函数的简介"></a>P-35.JS_函数的简介</h4><p>1）函数：也是一个对象，函数中可以封装一些功能（代码），在需要时可以执行这些功能（代码），函数中可以保存一些代码在需要的时候调用。使用typeof检查一个函数对象时，会返回一个function</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//创建一个函数对象</span><span class="token keyword">var</span> fun <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Functin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>fun<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>2）创建一个函数对象，可以将要封装的代码以字符串的形式传递给构造函数，封装到函数中的代码不会立即执行，函数中的代码会在函数调用的时候执行，当调用函数时，函数封装的代码会按照顺序执行</p><p>例：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//一般不会使用</span><span class="token keyword">var</span> fun <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Functin</span><span class="token punctuation">(</span><span class="token string">"console.log('这是我的第一个函数');"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>3）使用函数声明来创建一个函数</p><p>语法：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">函数名</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">[</span>形参<span class="token number">1</span>，形参<span class="token number">2.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>形参<span class="token constant">N</span><span class="token punctuation">]</span></span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    语句<span class="token operator">...</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p> 4）使用表达式来创建一个函数</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> <span class="token function-variable function">函数名</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">[</span>形参<span class="token number">1</span>，形参<span class="token number">2.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>形参<span class="token constant">N</span><span class="token punctuation">]</span></span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>语句<span class="token operator">...</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="P-36-JS-函数的参数"><a href="#P-36-JS-函数的参数" class="headerlink" title="P-36.JS_函数的参数"></a>P-36.JS_函数的参数</h4><p>1）可以在函数中（）中来指定一个或多个形参（形式参数），多个形参之间使用  ,（逗号）隔开，声明形参就相当于在函数内部声明了对应的变量，但是并不赋值</p><p>​    <strong>函数的实参可以是任意的数据类型</strong></p><p>在调用函数时，可以在（）中指定实参（实际参数） </p><p>例：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span>b</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>sum<span class="token operator">=</span>a<span class="token operator">+</span>b<span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>sum<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token function">fun</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​    2）调用函数时不会检查实参的类型，所以要注意，是否有可能会接收到非法的参数，如果有可能则需要对参数进行类型的检查。</p><p>​    3）调用函数时，解析器也不会检查实参的数量，多余实参不会被赋值。如果实参数量少于形参数量，则没有对应实参的形参将是undefined</p><h4 id="P-37-JS-函数的返回值"><a href="#P-37-JS-函数的返回值" class="headerlink" title="P-37.JS_函数的返回值"></a>P-37.JS_函数的返回值</h4><p>1）在JS中可以使用return来设置函数的返回值</p><p>​    语法：</p><p>​            return 值；</p><p>​    return后的值将会作为函数的执行结果返回，可以定义一个变量来接收该结果。</p><p>​    调用函数，函数返回什么 s 的值就是什么。变量 S 的值就是函数的返回结果</p><p>例：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>c</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">var</span> sum<span class="token operator">=</span>a<span class="token operator">+</span>b<span class="token operator">+</span>c<span class="token punctuation">;</span><span class="token keyword">return</span> sum<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">var</span> s <span class="token operator">=</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"s="</span><span class="token operator">+</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意：在return后的语句都不会执行，如果return语句后不跟任何值，就相当于返回一个undefined。如果不写return也会返回一个undefined。</p><pre><code> return后可以跟任意类型的值。</code></pre><h4 id="P-38-JS-实参可以是任何值"><a href="#P-38-JS-实参可以是任何值" class="headerlink" title="P-38.JS_实参可以是任何值"></a>P-38.JS_实参可以是任何值</h4><p>1）定义一个函数，判断一个数字是否是偶数，如果是返回true，否则返回false</p><p>例：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token parameter">num</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> num<span class="token operator">%</span><span class="token number">2</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">var</span> s<span class="token operator">=</span><span class="token function">fun</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2）定义一个函数，可以根据半径算一个圆的面积，并返回计算结果</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token parameter">r</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token number">3.1415</span><span class="token operator">*</span>r<span class="token operator">*</span>r<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">var</span> s<span class="token operator">=</span><span class="token function">fun</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"圆的面积是："</span><span class="token operator">+</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3）创建一个函数，可以在控制台输出一个人的信息</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token parameter">obj</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"我叫："</span><span class="token operator">+</span>obj<span class="token punctuation">.</span>name<span class="token operator">+</span><span class="token string">"，今年："</span><span class="token operator">+</span>obj<span class="token punctuation">.</span>age<span class="token operator">+</span><span class="token string">"岁，我住在："</span><span class="token operator">+</span>obj<span class="token punctuation">.</span>adderss<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>obj<span class="token operator">=</span><span class="token punctuation">&#123;</span> name<span class="token operator">:</span><span class="token string">"张三"</span><span class="token punctuation">,</span> age<span class="token operator">:</span><span class="token number">18</span><span class="token punctuation">,</span> adderss<span class="token operator">:</span><span class="token string">"长沙"</span> <span class="token punctuation">&#125;</span> <span class="token function">fun</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>4）实参可以是一个对象，也可以是一个函数</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token parameter">obj</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"我叫："</span><span class="token operator">+</span>obj<span class="token punctuation">.</span>name<span class="token operator">+</span><span class="token string">"，今年："</span><span class="token operator">+</span>obj<span class="token punctuation">.</span>age<span class="token operator">+</span><span class="token string">"岁，我住在："</span><span class="token operator">+</span>obj<span class="token punctuation">.</span>adderss<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>obj<span class="token operator">=</span><span class="token punctuation">&#123;</span> name<span class="token operator">:</span><span class="token string">"张三"</span><span class="token punctuation">,</span> age<span class="token operator">:</span><span class="token number">18</span><span class="token punctuation">,</span> adderss<span class="token operator">:</span><span class="token string">"长沙"</span> <span class="token punctuation">&#125;</span> <span class="token function">fun</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">function</span> <span class="token function">s</span><span class="token punctuation">(</span><span class="token parameter">a</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> <span class="token function">s</span><span class="token punctuation">(</span>fun<span class="token punctuation">)</span><span class="token punctuation">;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>5）将一个匿名函数做实参传递给函数</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token parameter">a</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">fun</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token string">"hello"</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>6）fun（）与fun的区别：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token parameter">r</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">var</span> sum<span class="token operator">=</span><span class="token number">3.1415</span><span class="token operator">*</span>r<span class="token operator">*</span>r<span class="token punctuation">;</span><span class="token keyword">return</span> sum<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">var</span> s<span class="token operator">=</span><span class="token function">fun</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//函数对象，相当于直接使用函数对象</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">fun</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//调用函数，相对于之间使用函数的返回值</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="P-39-JS-返回值的类型"><a href="#P-39-JS-返回值的类型" class="headerlink" title="P-39.JS_返回值的类型"></a>P-39.JS_返回值的类型</h4><p>1）break：可以退出当前循环</p><p>2）continue：用于跳过当次循环</p><p>3）return：可以结束整个函数</p><p>返回可以是任意的数据类型，“也可以是一个对象，也可以是一个函数”</p><h4 id="P-40-JS-立即执行函数"><a href="#P-40-JS-立即执行函数" class="headerlink" title="P-40.JS_立即执行函数"></a>P-40.JS_立即执行函数</h4><p>1）立即执行函数：函数定义完，立即被调用。</p><p>2）立即执行函数往往只会执行一次。</p><p>例：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"立即执行函数"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span>b</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>sum<span class="token operator">=</span>a<span class="token operator">+</span>b<span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>sum<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="P-41-JS-方法"><a href="#P-41-JS-方法" class="headerlink" title="P-41.JS_方法"></a>P-41.JS_方法</h3><p>1）对象的属性值可以是任意的数据类型，”也可以是函数”</p><p>例：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> obj<span class="token operator">=</span><span class="token function">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>obj<span class="token punctuation">.</span>name<span class="token operator">=</span><span class="token string">"张三"</span><span class="token punctuation">;</span>obj<span class="token punctuation">.</span>age<span class="token operator">=</span><span class="token number">18</span><span class="token punctuation">;</span>obj<span class="token punctuation">.</span><span class="token function-variable function">address</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span>b</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>sum<span class="token operator">=</span>a<span class="token operator">+</span>b<span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>sum<span class="token punctuation">)</span><span class="token punctuation">&#125;</span>obj<span class="token punctuation">.</span><span class="token function">address</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2）函数也可以称为对象的属性，如果一个函数作为一个对象的属性保存，那么我们称这个函数是这个对象的方法，调用函数就说调用对象的方法   （只是名称区别）</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//调函数</span><span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//调方法</span>obj<span class="token punctuation">.</span><span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>3）字面量书写方式</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> obj<span class="token operator">=</span><span class="token punctuation">&#123;</span>name<span class="token operator">:</span><span class="token string">"张三"</span><span class="token punctuation">,</span>age<span class="token operator">:</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token function-variable function">address</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">a</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>obj<span class="token punctuation">.</span><span class="token function">address</span><span class="token punctuation">(</span><span class="token string">"长沙"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>4）枚举对象中的属性</p><p>使用for. . .in语句</p><p>语法：</p><p>for（var 变量 i 对象）{</p><p>}</p><p>for. . .in语句对象中有几个属性，循环体就会执行几次，每次执行时，会将对象中的一个属性的名字赋值给变量</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> obj<span class="token operator">=</span><span class="token punctuation">&#123;</span>name<span class="token operator">:</span><span class="token string">"张三"</span><span class="token punctuation">,</span>age<span class="token operator">:</span><span class="token number">18</span><span class="token punctuation">,</span>address<span class="token operator">:</span><span class="token string">"长沙"</span><span class="token punctuation">&#125;</span><span class="token keyword">for</span><span class="token punctuation">(</span> <span class="token keyword">var</span> a <span class="token keyword">in</span> obj<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//取属性名</span>             console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//取属性值</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="P-42-JS-全局作用域"><a href="#P-42-JS-全局作用域" class="headerlink" title="P-42.JS_全局作用域"></a>P-42.JS_全局作用域</h4><p>1）作用域指一个变量的作用的范围</p><p>​        在JS中一个分为两种作用域：</p><p>​        1.全局作用域：</p><p>​        直接编写在script标签中的JS代码，都在全局作用域，全局作用域在页面中打开时创建，在页面关闭时销毁。在全局作用域中有一个全局对象window，它代表的是一个浏览器的窗口，它由浏览器创建我们可以直接使用。</p><p>​        在全局作用域中：创建的变量都会作为window对象的属性保存</p><p>​        全局作用域中的变量都是全局变量，在页面的任意的部分都可以访问的到</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//效果是一样的</span><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">;</span><span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token string">"hello"</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//用的不多</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​        变量的声明提前：使用var关键字声明的变量，会在所有的代码执行之前被声明（但是不会被赋值），但是如果声明变量时不使用var关键字，则变量不会被声明提前。</p><p>例：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//声明提前，但是没有赋值：</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> x<span class="token operator">=</span><span class="token string">"变量声明提前"</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>​        函数声明提前：使用函数声明形式创建函数function 函数（）{ }，他会在所有代码执行之前就被创建。</p><p>例：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">var</span> a<span class="token operator">=</span><span class="token number">123</span><span class="token punctuation">;</span><span class="token keyword">return</span> a<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​    使用函数表达式创建的函数，不会被声明提前，所以不能在声明前调用。</p><h4 id="P-43-JS-函数作用域"><a href="#P-43-JS-函数作用域" class="headerlink" title="P-43.JS_函数作用域"></a>P-43.JS_函数作用域</h4><p>​    1） 函数作用域：调用函数时创建函数作用域，函数执行函数完毕以后销毁，没调用一次函数，就会创建一个新的函数作用域 ，他们之间是相互独立的</p><p>​    2）在函数作用域中可以访问到全局作用域的变量，在全局作用域中无法访问到函数作用域的变量</p><p>​    3）当在函数作用域操作一个变量时,它会先在自身作用域中寻找，如果有就直接使用，如果没有则向上一级作用域寻找</p><p>​    4）在函数作用域中，也有声明变量提前的特性，使用var关键字声明变量，会在函数中所有的代码执行前被声明</p><p>例：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"a="</span><span class="token operator">+</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> a<span class="token operator">=</span><span class="token string">"123"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​    5）函数声明也会在函数中所有的代码执行之前执行</p><p>​    6）注意:在函数中，不使用var声明的变量都会成为全局变量 ，在局部作用域没找到会向全局作用域里找</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> a<span class="token operator">=</span><span class="token string">"123"</span><span class="token punctuation">;</span>         <span class="token keyword">function</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"a="</span><span class="token operator">+</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//123</span>a<span class="token operator">=</span><span class="token string">"456"</span><span class="token punctuation">;</span><span class="token comment">//a没有使用var关键字，则会设置为全局变量</span><span class="token punctuation">&#125;</span><span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"a="</span><span class="token operator">+</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//456</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>7）定义形参就相当于在函数中声明了变量</p><pre class="line-numbers language-JavaScript" data-language="JavaScript"><code class="language-JavaScript">function fun(a)&#123;console.log(&quot;a&#x3D;&quot;+a);&#125;fun(20);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="P-44-JS-debug"><a href="#P-44-JS-debug" class="headerlink" title="P-44.JS_debug"></a>P-44.JS_debug</h4><p>1）断点调试</p><h4 id="P-45-JS-this"><a href="#P-45-JS-this" class="headerlink" title="P-45.JS_this"></a>P-45.JS_this</h4><p>​    解析器在调用函数每次都会向函数内部传递进一个隐含的参数，这个隐含的参数就是this，this指向的是一个对象，这个对象我们称为函数执行的上下文对象。</p><p>​    根据函数的调用方式的不用，this会指向不同的对象</p><p>​        1.以函数的形式调用时，this永远都是window</p><p>​        2.以方法的形式调用时，this就是调用的那个对象</p><p>例：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">var</span> obj<span class="token operator">=</span><span class="token punctuation">&#123;</span>name<span class="token operator">:</span><span class="token string">"张三"</span><span class="token punctuation">,</span>syaName<span class="token operator">:</span>fun<span class="token punctuation">&#125;</span><span class="token keyword">var</span> obj2<span class="token operator">=</span><span class="token punctuation">&#123;</span>name<span class="token operator">:</span><span class="token string">"李四"</span><span class="token punctuation">,</span>sunName<span class="token operator">:</span>fun<span class="token punctuation">&#125;</span>obj2<span class="token punctuation">.</span><span class="token function">sunName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="P-46-JS-使用工厂方法创建对象"><a href="#P-46-JS-使用工厂方法创建对象" class="headerlink" title="P-46.JS_使用工厂方法创建对象"></a>P-46.JS_使用工厂方法创建对象</h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span>age<span class="token punctuation">,</span>address</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">var</span> obj<span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>obj<span class="token punctuation">.</span>name<span class="token operator">=</span>name<span class="token punctuation">;</span>obj<span class="token punctuation">.</span>age<span class="token operator">=</span>age<span class="token punctuation">;</span>obj<span class="token punctuation">.</span>address<span class="token operator">=</span>address<span class="token punctuation">;</span><span class="token keyword">return</span> obj<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">var</span> obj2<span class="token operator">=</span><span class="token function">fun</span><span class="token punctuation">(</span><span class="token string">"孙悟空"</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">,</span><span class="token string">"长沙"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj2<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="P-47-JS-构造函数"><a href="#P-47-JS-构造函数" class="headerlink" title="P-47.JS_构造函数"></a>P-47.JS_构造函数</h4><p>1）使用工厂方法创建的对象，使用的构造函数都是Object，所以创建的对象都是Object这个类型，就导致我们无法区分多种不同的类型的对象</p><p>2）构造函数和普通函数的区别就是调用方式的不同，普通函数是直接调用，而构造函数需要使用new关键字来调用</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//创建构造函数</span><span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token comment">//实例化</span><span class="token keyword">var</span> per <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3）构造函数的执行流程</p><p>​        1.立刻创建一个新的对象</p><p>​        2.将新建的对象设置为函数中的this</p><p>​        3.逐行执行函数中的代码</p><p>​        4.将新的对象作为返回值返回</p><p>​    使用同一个构造函数创建的对象，我们称为一类对象，也将一个构造函数称为一个类。我们将通过一个构造函数创建的对象,称为是该类的实例</p><p>4）this的情况：</p><p>​    1.当以函数的形式调用时，this是window</p><p>​    2.当以方法的形式调用时，谁调用this就是谁</p><p>​    3.当以构造函数的形式调用时，this就是新创建的那个对象</p><p>5）使用instanceof可以检查一个对象是否是一个类的实例</p><p>语法：</p><p>​            对象 instanceof 构造函数</p><p>如果是，则返回true，否则返回false</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>per <span class="token keyword">instanceof</span> <span class="token class-name">Person</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>​    所有的对象都是Object的后代，所以任何对象和Object做instanceof检查时都会返回true</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>per <span class="token keyword">instanceof</span> <span class="token class-name">Object</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="P-48-JS-原型对象"><a href="#P-48-JS-原型对象" class="headerlink" title="P-48.JS_原型对象"></a>P-48.JS_原型对象</h4><p>1）原型：prototype，我们所创建的每一个函数，解析器都会向函数中添加一个属性”prototype“，这个属性对应着一个对象,这个对象就是我们所谓的原型对象</p><p>​    我们所创建的每一个函数，解析器都会向函数中添加一个属性prototype，这个属性对应着一个对象这个对象就是我们所谓的原型对象，如果函数作为普通函数调用，prototype没有任何作用</p><p>​    当函数以构造函数的形式调用时，它所创建的对象中都会有一个隐含的属性，指向该构造函数的原型对象，我们可以通过 _ _proto __来访问该属性</p><p>​    原型对象就相当于一个公共的区域，所有同一个类的实例都可以访问到这个原型对象</p><p>​    当我们访问对象的一个属性或方法时，它会先在对象自身中寻找，如果有则直接使用，如果没有则会去原型对象中寻找，如果找到则直接使用</p><p>如果没有则取原型的原型中寻找，直到找到Object对象的原型，（Object对象的原型没有原型），如果在Object中依然没有找到，则返回undefined</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//创建一个构造函数</span><span class="token keyword">function</span> <span class="token function">Myclass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token comment">//实例化</span><span class="token keyword">var</span> my <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Myclass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//往Myclass原型对象中添加fun方法</span><span class="token class-name">Myclass</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">fun</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"123"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//通过my对象调用fun方法</span>my<span class="token punctuation">.</span><span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2）使用in检查对象中是否含有某个属性时，如果对象中没有但是原型中有，也会返回true</p><p>​        另外可以使用对象的hasOwnProperty（）来检查对象自身中是否含有该属性，使用该方法只有当对象自身中含有属性时，才会返回true</p><p>例：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token comment">//创建一个名为Myclass的构造函数</span><span class="token keyword">function</span> <span class="token function">Myclass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token comment">//实例化Myclass对象</span><span class="token keyword">var</span> my <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Myclass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>my<span class="token punctuation">.</span>age<span class="token operator">=</span><span class="token number">18</span><span class="token punctuation">;</span><span class="token comment">//往myclass原型对象中添加fun方法</span><span class="token class-name">Myclass</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">fun</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//添加name属性</span> name<span class="token operator">=</span><span class="token string">"张三"</span><span class="token punctuation">;</span> document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>my<span class="token punctuation">.</span><span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//检查函数中是否含有某个属性</span>document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>my<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span><span class="token string">"age"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3）原型对象也是对象，所以它也有原型，当我们使用一个对象的属性或方法时，会先在自身中寻找，自身中如果没有，则直接使用，如果没有则去原型对象中寻找，如果原型对象中有则使用，如果没有则去原型的原型中寻找，直到找到Object对象的原型，Object对象的原型没有原型，如果在Object中依然没有找到，则返回undefined</p><h4 id="P-49-JS-toString"><a href="#P-49-JS-toString" class="headerlink" title="P-49.JS_toString"></a>P-49.JS_toString</h4><p>1)当我们直接在页面中打印一个对象时，实际上输出的对象是toString（）方法的返回值</p><p>如果我们希望在输出对象时不输出[Object Object]，而已为对象添加一个toString（）方法</p><pre class="line-numbers language-JavaScript" data-language="JavaScript"><code class="language-JavaScript">&lt;script&gt;&#x2F;&#x2F;创建一个构造函数function Myclass(name,age,address)&#123;this.name&#x3D;name;this.age&#x3D;age;this.address&#x3D;address;&#125;&#x2F;&#x2F;实例化var my&#x3D;new Myclass(&quot;张三&quot;,18,&quot;长沙&quot;);&#x2F;&#x2F;输出对象的toString（）方法的返回值Myclass.prototype.toString&#x3D;function()&#123;              &#x2F;&#x2F;重写该方法return &quot;Myclass[&quot;+this.name+&quot;,&quot;+this.age+&quot;,&quot;+this.address+&quot;]&quot;;&#125;console.log(my);&lt;&#x2F;script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="P-50-JS-垃圾回收"><a href="#P-50-JS-垃圾回收" class="headerlink" title="P-50.JS_垃圾回收"></a>P-50.JS_垃圾回收</h4><p>1）垃圾回收（GC）程序中含有的一个垃圾回收机制，来处理程序运行过程中产生的垃圾，当一个对象没有任何的变量或属性对它进行引用，此时我们将永远无法操作该对象，此时这种对象就是一个垃圾，这种对象过多会占用大量的内存空间，导致程序运行变慢，所以这种垃圾必须清理。</p><p>​        ”在JS中拥有自动的回收机制，会自动将这些垃圾对象从内存中销毁，我们不需要也不能进行垃圾回收操作“</p><p>我们需要做的事情就是（将不在使用的对象设置为null即可）</p><h3 id="P-51-JS-数组简介"><a href="#P-51-JS-数组简介" class="headerlink" title="P-51.JS_数组简介"></a>P-51.JS_数组简介</h3><p>1）内建对象</p><p>2）宿主对象</p><p>3）自定义对象</p><p>数组（Array）数组也是一个对象，它和我们普通对象功能类似，也是用来存储一些值的，不同的是普通对象是使用字符串作为属性名的，而数组是使用数字来作为索引操作元素</p><p>索引：从0开始的整数就是索引</p><p>数组的存储性能比普通对象要好，在开发中我们经常使用数组来存储一些数据</p><p>​        创建数组</p><p>​                    语法：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> arr<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Array</span>（）；<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>读取数组中的元素</p><p>​        语法：数组[索引]</p><p>如果读取不存在的索引，他不会报错而是返回undefined</p><p>获取数组的长度：可以使用length属性来获取数组的长度（元素的个数）</p><p>​        语法：数组length</p><p>​    对于使用连续的数组，使用length可以获取到数组的长度（元素的个数），对于非连续的数组，使用length会获取到数组的最大索引+1。尽量不要使用创建非连续的数组</p><p>​    修改length，如果修改的length大于元长度，则多出部分会空出来，如果修改的length小于原长度，则多出来的元素会呗删除</p><p>向数组的最后一个位置添加元素</p><p>语法：数组[数组.length] = 值；</p><pre class="line-numbers language-JavaScript" data-language="JavaScript"><code class="language-JavaScript">&lt;script&gt;&#x2F;&#x2F;创建一个数组对象var arr &#x3D; new Array();&#x2F;&#x2F;往arr 数组中添加元素arr[0]&#x3D;123;arr[1]&#x3D;456;arr[2]&#x3D;789;arr[arr.length]&#x3D;&quot;haha&quot;;&#x2F;&#x2F;输出数组长度索引-1的值document.write(arr[arr.length-1]);&lt;&#x2F;script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="P-52-JS-数组字面量"><a href="#P-52-JS-数组字面量" class="headerlink" title="P-52.JS_数组字面量"></a>P-52.JS_数组字面量</h4><p>1）使用字面量来创建数组</p><p>语法：var arr = [ ]；</p><p>使用字面量创建数组时，可以在创建时就指定数组中的元素</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//创建一个数组数组中的元素只有一个元素为10</span><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>使用构造函数创建数组时，也可以同时添加元素，将要添加的元素作为构造函数参数传递，元素之间使用 ，逗号隔开</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//创建一个长度为10的数组 </span><span class="token keyword">var</span> arr2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr2<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="P-53-JS-数组的四个方法"><a href="#P-53-JS-数组的四个方法" class="headerlink" title="P-53.JS_数组的四个方法"></a>P-53.JS_数组的四个方法</h4><p>1）push（）该方法可以向 数组的末尾添加一个或多个元素，并返回数组的新的长度，可以将要添加的元素作为方法的参数传递，这样这些元素将会自动添加到数组的末尾，该方法会将数组新的长度作为返回值返回</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token keyword">var</span> arr<span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>arr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">"3"</span><span class="token punctuation">,</span><span class="token string">"四"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2）pop（）该方法可以删除数组的最后一个元素，并将被删除的元素作为返回值返回</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">arr<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>3）unshift（）该方法向数组开头添加一个或多个元素，并返回新得到数组长度，向前边插入元素以后，其他的元素索引会依此调整</p><pre class="line-numbers language-JavaScript" data-language="JavaScript"><code class="language-JavaScript">arr.unshift（&quot;张三&quot;）;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>4）shift（）该方法可以删除数组的第一个元素，并将被删除的元素作为返回值返回</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">arr<span class="token punctuation">.</span>shift（）<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="P-54-JS-数组的遍历"><a href="#P-54-JS-数组的遍历" class="headerlink" title="P-54.JS_数组的遍历"></a>P-54.JS_数组的遍历</h4><p>1）所谓的遍历，就是将数组中的所有元素都取出来</p><pre class="line-numbers language-JavaScript" data-language="JavaScript"><code class="language-JavaScript">&lt;script&gt;var arr&#x3D; [0,1,2];arr.push(&quot;3&quot;,&quot;四&quot;);for(var i&#x3D;0;i&lt;arr.length;i++)&#123;document.write(arr[i]+&quot;， &quot;);&#125;&lt;&#x2F;script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="P-55-JS-数组的练习"><a href="#P-55-JS-数组的练习" class="headerlink" title="P-55.JS_数组的练习"></a>P-55.JS_数组的练习</h4><pre class="line-numbers language-JavaScript" data-language="JavaScript"><code class="language-JavaScript">&lt;script&gt;&#x2F;&#x2F;创建一个构造函数function Myclass(name,age)&#123;this.name&#x3D;name;this.age&#x3D;age;&#125;&#x2F;&#x2F;输出对象的toString（）方法的返回值Myclass.prototype.toString&#x3D;function()&#123;&#x2F;&#x2F;重写该方法return &quot;Myclass[&quot;+this.name+&quot;,&quot;+this.age+&quot;]&quot;;&#125;&#x2F;&#x2F;创建一个per对象var per&#x3D;new Myclass(&quot;孙悟空&quot;,18);var per2&#x3D;new Myclass(&quot;唐僧&quot;,21);var per3&#x3D;new Myclass(&quot;小白龙&quot;,16);var per4&#x3D;new Myclass(&quot;沙悟净&quot;,19);var array&#x3D;[per,per2,per3,per4];&#x2F;&#x2F;创建一个函数，可以将array中满18岁的Myclas提取出来&#x2F;&#x2F;然后封装到一个新的数组中并返回&#x2F;&#x2F;arr行参，提取数组信息function getAdult()&#123;&#x2F;&#x2F;创建一个新的数组var newArr&#x3D;[];for(var i&#x3D;0;i&lt;array.length;i++)&#123; p&#x3D;array[i];&#x2F;&#x2F;console.log(p);&#x2F;&#x2F;将对象放入到一个新的数组中if(p.age&gt;&#x3D;18)&#123;newArr.push(p); &#125;  &#125;&#x2F;&#x2F;将新的数组返回return newArr;&#125;var result&#x3D;getAdult(Myclass);  console.log(result);&lt;&#x2F;script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="P-56-JS-数组的foEach"><a href="#P-56-JS-数组的foEach" class="headerlink" title="P-56.JS_数组的foEach"></a>P-56.JS_数组的foEach</h4><p>1）一般我们都是使用for循环去遍历数组，JS中还为我们提供了一个方法，用来遍历数组forEach（），这个方法只支持IE8以上版本；IE8及以下版本均不支持该方法，所以需要兼容IE8，则不要使用foEach（）方法，还是使用for循环来遍历</p><p>2）fonEach（）方法需要一个函数作为参数，像这种函数，由我们创建但是不由我们调用的，我们称为回调函数，数组中有几个元素，函数就会执行几次，每次执行时，浏览器会将遍历到的元素以实参的形式进行传递进来，我们定义形参，来读取这些内容，浏览器会在回调函数中传递三个参数</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token comment">//创建一个数组</span><span class="token keyword">var</span> array<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">"孙悟空"</span><span class="token punctuation">,</span><span class="token string">"猪悟能"</span><span class="token punctuation">,</span><span class="token string">"沙悟净"</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//fonEach（）方法需要一个函数作为参数</span><span class="token comment">//像这种函数，由我们创建但是不由我们调用的，我们称为回调函数</span><span class="token comment">//数组中有几个元素，函数就会执行几次，每次执行时</span><span class="token comment">//浏览器会将遍历到的元素以实参的形式进行传递进来</span><span class="token comment">//我们定义形参，来读取这些内容，浏览器会在回调函数中传递三个参数</span><span class="token comment">//第一个参数，就是当前正在遍历的元素</span><span class="token comment">//第二个参数，就是当前正在遍历的元素的索引</span><span class="token comment">//第三个参数，就是正在遍历的数组</span>array<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">value<span class="token punctuation">,</span>index<span class="token punctuation">,</span>obj</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"value="</span><span class="token operator">+</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="P-57-JS-slice和splice"><a href="#P-57-JS-slice和splice" class="headerlink" title="P-57.JS_slice和splice"></a>P-57.JS_slice和splice</h4><p>1）slice（）可以从数组提取指定元素，该方法不会改变元素数组，而是将截取到的元素封装到一个新数组中返回</p><p>​    参数：</p><p>​                第1个参数，截取开始的位置的索引，包含开始索引</p><p>​                第2个参数，截取结束的位置的索引，不包含结束索引</p><p>​                3、第二个参数可以省略不写，此时截取从开始索引往后的所有元素</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//创建一个数组</span><span class="token keyword">var</span> array<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">"悟空"</span><span class="token punctuation">,</span><span class="token string">"悟能"</span><span class="token punctuation">,</span><span class="token string">"悟净"</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//在控制台输出从0索引到，1索引的索引元素</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>array<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//在控制台输出从1索引开始，往后的所有元素</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>array<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​                4、索引可以传递一个负值，如果传递一个负值，则从后往前计算</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//输出倒数第一个元素</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>array<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//输入倒数第一和二个元素</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>array<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>2）splice（）可以用于删除数组中的指定元素，使用splice（）会影响到原数组，会将指定元素从原数组中删除 ，并将删除的元素作为返回值返回</p><p>参数：</p><p>​                第1个参数，表示开始位置的索引</p><p>​                第2个参数，表示删除的数量</p><p>​                第3个及以后。。。可以传递一些新的元素，这些元素将会自动插入到开始位置索引前边 </p><h4 id="P-58-JS-数组去重练习"><a href="#P-58-JS-数组去重练习" class="headerlink" title="P-58.JS_数组去重练习"></a>P-58.JS_数组去重练习</h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token comment">//创建一个数组，删除重复的元素</span><span class="token keyword">var</span> array<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//获取数组中的每一个元素</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>array<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//获取当前元素后的所有元素</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> j<span class="token operator">=</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>array<span class="token punctuation">.</span>length<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//判断两个元素的值是否相等</span><span class="token keyword">if</span><span class="token punctuation">(</span>array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span>array<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//如果相等则证明出现了重复的元素，则删除j对应的元素</span>array<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>j<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//当删除了当前j所在的元素以后，后边的元素会自动部位</span><span class="token comment">//此时将不会在比较这个元素，我需要在比较一次j所在位置的元素</span><span class="token comment">//使j自减</span>j<span class="token operator">--</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="P-59-JS-数组剩余方法"><a href="#P-59-JS-数组剩余方法" class="headerlink" title="P-59.JS_数组剩余方法"></a>P-59.JS_数组剩余方法</h4><p>1)concat（）可以连接两个或多个数组，并将新的数组返回，该方法不会对原数组产生影响</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token keyword">var</span> array<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">var</span> Array2<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">var</span> Array3<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//数组拼接,可以连接两个或以上的数组，并将新的数组返回</span><span class="token keyword">var</span> sum<span class="token operator">=</span>array<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>Array2<span class="token punctuation">,</span>Array3<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>sum<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//该方法不会对原数组产生影响</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2)join( )该方法可以将数组转换为一个字符串，在join()中可以指定一个字符串作为参数，这个字符串将会成为数组中元素的连接符，该方法不会对原数组产生影响，而是将转换后的字符串作为结果返回，如果不指定连接符，则默认使用（,）作为连接符</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token keyword">var</span> array<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//join( )该方法可以将数组转换为一个字符串</span><span class="token keyword">var</span> sum<span class="token operator">=</span> array<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//在join()中可以指定一个字符串作为参数，这个字符串将会成为数组中元素的连接符</span><span class="token comment">//如果不指定连接符，则默认使用(,)作为连接符</span><span class="token keyword">var</span> num<span class="token operator">=</span>array<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">"+"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//该方法不会对原数组产生影响，而是将转换后的字符串作为结果返回</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3revese()可以用来反转数组（前边的元素去后边，后边的元素去前边），该方法会直接修改原素组</p><pre class="line-numbers language-JavaScript" data-language="JavaScript"><code class="language-JavaScript">&lt;script&gt;var array&#x3D;[1,2,3,4,5];&#x2F;&#x2F;该方法可以用来颠倒数组元素的循序console.log(array.reverse()); &lt;&#x2F;script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>4）可以对我们的数组的元素进行排序，也会影响 原数组，默认会按照Unicode编码进行排序，</p><p>​             <strong>所以对数字进行排序时，可能会的到错误的结果</strong></p><p>​                        <strong>我们可以自己来指定排序的规则</strong></p><p>我们可以在sort（）添加一个回调函数，来指定排序规则，回调函数中要定义两个形参，浏览器将分别使用数组中，的元素作为实参去调用回调函数</p><p>使用那个元素调用不确定，但是肯定的是在数组中a一定在b的前边</p><p>浏览器会更具回调函数的函数值来决定元素的顺序</p><p>如果返回一个大于0的值，则元素会交换位置，如果元素小于0，则元素位置不变</p><p>如果返回一个0，则认为两个元素相等，也不交换位置</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token keyword">var</span> array<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">17</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//该方法用来对数组进行排序</span>array<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span>b</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//如果需要升序排列，则返回a-b</span><span class="token comment">//如果需要降序排列，则返回b-a</span><span class="token keyword">return</span> a<span class="token operator">-</span>b<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="P-60-JS-call和apply"><a href="#P-60-JS-call和apply" class="headerlink" title="P-60.JS_call和apply"></a>P-60.JS_call和apply</h4><p>1）call（）和apply（），这两个方法都是函数对象的方法，需要通过函数对象来调用，当函数调用call（）和apply（）都会调用函数执行</p><p>2）在调用call（）和apply（）都会将一个对象指定为第一个参数，此时这个对象将会成为函数执行时的this</p><p>​    call( )方法可以将实参在对象之后依此传递</p><p>​    apply（）方法需要将实参封装到一个数组中统一传递</p><p>3）this的情况：</p><p>​        1.以函数形式调用时，this永远都是window</p><p>​        2.以方法的形式调用时，this是调用方法的对象</p><p>​        3.以构造函数的形式调用时，this是新创建的那个对象</p><p>​        4.使用call和apply调用时，this是指定的那个对象</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token comment">//创建一个函数</span><span class="token keyword">function</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span>b</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"a="</span><span class="token operator">+</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"a="</span><span class="token operator">+</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//使用字面量创建一个对象</span><span class="token keyword">var</span> obj<span class="token operator">=</span><span class="token punctuation">&#123;</span>name<span class="token operator">:</span><span class="token string">"张三"</span><span class="token punctuation">,</span>vayName<span class="token operator">:</span>fun<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">var</span> obj2<span class="token operator">=</span><span class="token punctuation">&#123;</span>name<span class="token operator">:</span><span class="token string">"李四"</span><span class="token punctuation">,</span>vayName<span class="token operator">:</span>fun <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">//修改函数对象，谁调用的this就是谁</span><span class="token function">fun</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>obj2<span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//李四 a=3  b=3</span><span class="token function">fun</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token comment">//张三 a=3  b=3</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="P-61-JS-arguments"><a href="#P-61-JS-arguments" class="headerlink" title="P-61.JS_arguments"></a>P-61.JS_arguments</h3><p>1）在调用函数时，浏览器每次都会<strong>传递</strong>进两个隐含的参数：</p><p>​        1.函数的上下文对象this</p><p>​        2.封装实参的对象rguments</p><p>​                argumnts是一个类数组对象，它也可以通过索引来操作数据，也可以获取长度，在调用函数时，我们所床底的实参都会在arguments中保持，argums.lengtg可以用来获取实参的长度</p><p>​                我们即使不定义形参，也可以通过arguments来使用实参，只不过比较麻烦，它里面有一个属性叫做callee，这个属性对应一个函数对象，就是当前正在指向的函数对象</p><pre class="line-numbers language-JavaScript" data-language="JavaScript"><code class="language-JavaScript">&lt;script&gt;&#x2F;&#x2F;创建一个方法function fun()&#123; &#x2F;&#x2F;argumets是一个类（类似）数组对象&#x2F;&#x2F;在函数调用时，我们所传递的的实参都会在argumets中保持&#x2F;&#x2F;即使不定义形参，也能使用arguments来使用实参，只是比较麻烦console.log(arguments[1]);&#125;fun(&quot;123&quot;,&quot;hello&quot;);&lt;&#x2F;script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="P-62-JS-Dete对象"><a href="#P-62-JS-Dete对象" class="headerlink" title="P-62.JS_Dete对象"></a>P-62.JS_Dete对象</h4><p>1）Deat对象，在JS中使用Date对象来表示一个时间，如果直接使用构造函数创建一个Date对象，则会封装为当前代码的时间</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token keyword">var</span> dat<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>dat<span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>2）创建个指定的时间对象，需要在构造函数中传递一个表示时间的字符串作为参数</p><p>​            日期的格式: <strong>“/月/日/年 时：分：秒”</strong></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script<span class="token operator">></span>          <span class="token comment">//修改指定的时间对象</span><span class="token keyword">var</span> dat<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token string">"12/03/2016 12:30:15"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//12月3日2016年 12时30分15秒</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>dat<span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3）getDete（）获取当前日期是几日</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token comment">//创建时间对象</span><span class="token keyword">var</span> dete <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//获取当前日期对象是几日</span><span class="token keyword">var</span> dete2<span class="token operator">=</span>dete<span class="token punctuation">.</span><span class="token function">getDate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>dete2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>4）getDay（）获取当前日期是周几，会返回一个0到6的值，0表示周日</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token comment">//创建时间对象</span><span class="token keyword">var</span> dete <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//获取当前日期是周几，会返回一个0到6的值，0表示周日</span><span class="token keyword">var</span> day <span class="token operator">=</span>dete<span class="token punctuation">.</span><span class="token function">getDay</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>day<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>5）getMonth()获取当前时间对象的月份，会返回一个0-11的值，0表示1月，1表示2月，11表示12月</p><pre class="line-numbers language-JavaScript" data-language="JavaScript"><code class="language-JavaScript">&lt;script&gt;&#x2F;&#x2F;创建时间对象var dete &#x3D; new Date();&#x2F;&#x2F;获取当前时间对象的月份，会返回一个0-11的值&#x2F;&#x2F;0表示1月，1表示2月，11表示12月var month &#x3D;dete.getMonth();  console.log(month);&lt;&#x2F;script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>6）获取当前时间对象的时间戳，指的是从格林威治标准时间的1970年1月1日，0时0分0秒</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token comment">//创建时间对象</span><span class="token keyword">var</span> dete <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//获取当前时间对象的时间戳</span><span class="token comment">//时间戳，指的是从格林威治标准时间的1970年1月1日，0时0分0秒</span><span class="token comment">//到当前日期所花费的毫秒数（1秒=1000毫秒）</span><span class="token comment">//计算机底层在保存时间使用都是时间戳</span><span class="token keyword">var</span> time <span class="token operator">=</span>dete<span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>time<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>7）利用时间戳来测试代码的执行的性能</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token comment">//利用时间戳来测试代码的执行的性能</span><span class="token comment">//获取当前的时间戳</span><span class="token keyword">var</span> start <span class="token operator">=</span>  Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">100</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">var</span> end <span class="token operator">=</span>  Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"执行了"</span><span class="token operator">+</span><span class="token punctuation">(</span>end<span class="token operator">-</span>start<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"毫秒"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="P-63-JS-Math"><a href="#P-63-JS-Math" class="headerlink" title="P-63.JS_Math"></a>P-63.JS_Math</h4><p>1）Math（）和其他的对象不同，它不是一个构造函数，它属于一个工具类不用创建对象，它里面封装了数学运算相关的属性和方法</p><p>​        比如</p><p>​                Math.PI表示圆周率</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script<span class="token operator">></span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token constant">PI</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>2）Math.abs（）可以用来计算一个数的绝对值</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script<span class="token operator">></span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>3）Math.ceil（）可以对一个小数进行向上取整，小数位只要有值就自动进1</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token comment">//向上取整</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">ceil</span><span class="token punctuation">(</span><span class="token number">1.1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>4）Math.floor（）可以对一个数进行向下取整，小数部分会被舍掉</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token comment">//向下取整</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span><span class="token number">1.9</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>5）Math.round（）可以对一个数进行四舍五入取整</p><pre class="line-numbers language-JavaScript" data-language="JavaScript"><code class="language-JavaScript">&lt;script&gt;&#x2F;&#x2F;四舍五入取整console.log(Math.round(1.9));&lt;&#x2F;script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>6）Math.random（）可以生成一个0-1之间的随机数</p><p>公式：</p><p>​            1.生成一个0-x之间的随机数：Math.round( Math.random()*x)</p><p>​            2.生成一个x-y之间的随机数：Math.round( Math.random()*（y-x）+x)</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token comment">//可以生成一个0-1之间的随机数</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//生成一个0-x之间的随机数，并进行取整</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">round</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">10</span><span class="token punctuation">)</span>）<span class="token punctuation">;</span><span class="token comment">//生成一个x-y之间的随机数，并进行取整  </span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span><span class="token number">50</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">round</span><span class="token punctuation">(</span> Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">9</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>7）Math.max可以获取多个数中的最大值</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token comment">//可以获取多个数中的最大值</span><span class="token keyword">var</span> max<span class="token operator">=</span>Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>max<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>8）Math.min（）可以获取多个数中的最小值</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token comment">//可以获取多个数中的最小值</span><span class="token keyword">var</span> min<span class="token operator">=</span>Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>min<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>9）Math.pow（）返回x的y次幂</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token comment">//返回x的y次幂</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>10）Math.sqrt（）用于对一个数进行开方运算</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token comment">//用于对一个数进行开方运算</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">sqrt</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="P-64-JS-包装类"><a href="#P-64-JS-包装类" class="headerlink" title="P-64.JS_包装类"></a>P-64.JS_包装类</h4><p>1）在JS中为我们提供了三个包装类，通过这三个包装类可以将基本数据类型的数据转换为对象</p><p>​        String（）：可以将基本数据类型字符串转换为String对象</p><p>​        Number（）：可以将基本数据类型字符串转换为Number对象</p><p>​        Boolean（）：可以将基本数据类型字符串转换为Boolean对象</p><p>但是注意:我们在实际应用中不会使用基本数据类型的对象，如果使用基本数据类型的对象，在做一些比较时可能会带来一些不 可预期的结果</p><h4 id="P-65-JS-字符串的方法"><a href="#P-65-JS-字符串的方法" class="headerlink" title="P-65.JS_字符串的方法"></a>P-65.JS_字符串的方法</h4><p>1）字符串，在底层是以字符数组的形式进行保存的</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token comment">//创建一个字符串</span><span class="token keyword">var</span> arr<span class="token operator">=</span><span class="token string">"hello world"</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2）length属性：可以用来获取字符串的长度</p><pre class="line-numbers language-JavaScript" data-language="JavaScript"><code class="language-JavaScript">&lt;script&gt;&#x2F;&#x2F;创建一个字符串var arr&#x3D;&quot;hello world&quot;;console.log(arr[2]); console.log(arr.length);  &lt;&#x2F;script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3）charAt（）可以返回字符串中指定位置的字符，根据索引获取指定的字符</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token comment">//创建一个字符串</span><span class="token keyword">var</span> arr<span class="token operator">=</span><span class="token string">"hello world"</span><span class="token punctuation">;</span><span class="token comment">//返回1索引位置的字符</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>4)charCodeAt() 获取指定位置字符的字符编码（Unicode编码）</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token comment">//创建一个字符串</span><span class="token keyword">var</span> arr<span class="token operator">=</span><span class="token string">"hello world"</span><span class="token punctuation">;</span><span class="token comment">//获取指定位置字符的字符编码（Unicode编码）</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">charCodeAt</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>5）String.fromCharCode（）可以根据字符编码去获取字符</p><pre class="line-numbers language-JavaScript" data-language="JavaScript"><code class="language-JavaScript">&lt;script&gt;&#x2F;&#x2F;根据字符编码去获取字符，需要通过String去调用 var result&#x3D; String.fromCharCode(0X2692);document.write(result);&lt;&#x2F;script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>6）concat（）可以用来连接两个或多个字符串</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token comment">//可以用来连接两个或多个字符串</span><span class="token keyword">var</span> result<span class="token operator">=</span><span class="token string">"hello"</span><span class="token punctuation">;</span><span class="token keyword">var</span> result2<span class="token operator">=</span><span class="token string">"java"</span><span class="token punctuation">;</span>result<span class="token operator">=</span>result<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>result2<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>7）indexOf（）该方法可以检索-个字符串中是否含有指定内容，如果字符串中含有该内容，则会返回其第一次出现的索引，如果没有找到指定的内容，则返回-1</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token comment">//该方法可以检索-个字符串中是否含有指定内容</span><span class="token comment">//如果字符串中含有该内容，则会返回其第一次出现的索引</span><span class="token comment">//如果没有找到指定的内容，则返回-1</span>          <span class="token comment">//可以指定一个第二个参数，指定开始查找的位置</span><span class="token keyword">var</span> result<span class="token operator">=</span><span class="token string">"hello java h"</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">"h"</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>8）lastIndexOf() 该方法和indexOf一样，不同的是lastIndexOf()倒叙查找</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token comment">//该方法和indexOf一样</span><span class="token comment">//不同的是indexOf是从前往后找，而lastIndexOf是从后往前找</span><span class="token comment">//也可以指定开始查找的位置</span><span class="token keyword">var</span> result<span class="token operator">=</span><span class="token string">"hello java h"</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token string">"h"</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>9）slice（）可以从字符串中截取指定的内容，不会影响原字符串，而是将截取到内容返回</p><p>​            参数：第一个，开始位置的索引（包括开始位置），第二个，结束位置的索引（不包括结束位置），如果第二个参数省略不写，则会截取到后边所有的，也可以传递一个负数作为参数，负数的话将会从后边计算</p><pre class="line-numbers language-JavaScript" data-language="JavaScript"><code class="language-JavaScript">&lt;script&gt;&#x2F;&#x2F;可以从字符串中截取指定的内容&#x2F;&#x2F;不会影响原字符串，而是将截取到内容返回&#x2F;&#x2F;参数：&#x2F;&#x2F;第一个，开始位置的索引（包括开始位置）&#x2F;&#x2F;第二个，结束位置的索引（不包括结束位置）          &#x2F;&#x2F;如果第二个参数省略不写，则会截取到后边所有的          &#x2F;&#x2F;也可以传递一个负数作为参数，负数的话将会从后边计算var result&#x3D;&quot;hello java&quot;;var str&#x3D;result.slice(0,5);console.log(str);&lt;&#x2F;script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>10）substring（）可以用来截取一个字符串，与slice( )类似，不同的是这个方法不能接收负值作为参数，如果传递了一个负值，则默认使用0，而且他还自动调整参数的位置，如果第二个参数小于第一个，则自动交换</p><pre class="line-numbers language-JavaScript" data-language="JavaScript"><code class="language-JavaScript">&lt;script&gt;&#x2F;&#x2F;可以从字符串中截取指定的内容&#x2F;&#x2F;不会影响原字符串，而是将截取到内容返回&#x2F;&#x2F;参数：&#x2F;&#x2F;第一个，开始位置的索引（包括开始位置）&#x2F;&#x2F;第二个，结束位置的索引（不包括结束位置）&#x2F;&#x2F;如果传递了一个负值，则默认使用0var result&#x3D;&quot;hello java&quot;;&#x2F;&#x2F;而且他还自动调整参数的位置，如果第二个参数小于第一个，则自动交换var str&#x3D;result.substring(5,0);console.log(str);&lt;&#x2F;script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>11）substr（）用来 截取字符串</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token comment">//可以从字符串中截取指定的内容</span><span class="token comment">//不会影响原字符串，而是将截取到内容返回</span><span class="token comment">//参数：</span><span class="token comment">//第一个，开始位置的索引（包括开始位置）</span><span class="token comment">//第二个，截取的长度</span><span class="token keyword">var</span> result<span class="token operator">=</span><span class="token string">"hello java"</span><span class="token punctuation">;</span><span class="token keyword">var</span> str<span class="token operator">=</span>result<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>12）split（）可以将一个字符串拆分为一个数组</p><p>​            如果传递一个空串作为参数，则会将每个字符都拆分为数组中的一个元素</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token comment">//可以将一个字符串拆分为一个数组</span><span class="token comment">//参数：</span><span class="token comment">//需要一个字符串作为参数，将会根据该字符串去拆分数组</span><span class="token keyword">var</span> result<span class="token operator">=</span><span class="token string">"hello，java，123"</span><span class="token punctuation">;</span><span class="token keyword">var</span> str<span class="token operator">=</span>result<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"，"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>13）toLocaleUpperCase()可以将一个字符串转换为大写并返回</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token comment">//可以将一个字符串转换为大写并返回</span><span class="token keyword">var</span> result<span class="token operator">=</span><span class="token string">"hello，java，123"</span><span class="token punctuation">;</span><span class="token keyword">var</span> str<span class="token operator">=</span>result<span class="token punctuation">.</span><span class="token function">toLocaleUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>14）toLocaleLowerCase()可以将一个字符串转换为小写并返回</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token comment">//可以将一个字符串转换为小写并返回</span><span class="token keyword">var</span> result<span class="token operator">=</span><span class="token string">"HELLO，JAVA，123"</span><span class="token punctuation">;</span><span class="token keyword">var</span> str<span class="token operator">=</span>result<span class="token punctuation">.</span><span class="token function">toLocaleLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="P-66-JS-正则表达式"><a href="#P-66-JS-正则表达式" class="headerlink" title="P-66.JS_正则表达式"></a>P-66.JS_正则表达式</h4><p>1）RegExp()正则表达式用于定义一些字符串的规则，计算机可以根据正则表达式，来检查一个字符串是否符合规则，获取将字符串中符合规则的内容取出来</p><p>​            语法：</p><p>​                    var 变量 = new RegExp（”正则表达式”，”匹配模式”）；</p><p>​            使用typeof检查正则对象，会返回object</p><pre class="line-numbers language-JavaScript" data-language="JavaScript"><code class="language-JavaScript">&lt;script&gt;&#x2F;&#x2F;创建正则表达式的对象var reg &#x3D; new RegExp(&quot;a&quot;);&lt;&#x2F;script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>2）test（）正则表达式的方法：使用这个方法可以来检查一个字符串是否符合正则表达式的规则，如果符合则返回true，否则返回false  严格区分<strong>大小写</strong></p><pre class="line-numbers language-JavaScript" data-language="JavaScript"><code class="language-JavaScript">&lt;script&gt;&#x2F;&#x2F;创建正则表达式的对象var reg &#x3D; new RegExp(&quot;a&quot;);&#x2F;&#x2F;这个正则表达式可以检查一个字符串中是否含有a&#x2F;&#x2F;有则返回true，否则返回false&#x2F;&#x2F;  严格区分大小写  console.log(reg.test(&quot;abcde&quot;));&lt;&#x2F;script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3）在构造函数中可以床底一个匹配模式作为第二个参数，</p><p>​                    可以是：i（忽略大小写），g（全局匹配模式）</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token comment">//创建正则表达式的对象</span><span class="token keyword">var</span> reg <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span><span class="token string">"A"</span><span class="token punctuation">,</span><span class="token string">"i"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//这个正则表达式可以检查一个字符串中是否含有a,使用了匹配模式i，不区分大小写</span><span class="token comment">//有则返回true，否则返回false</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>reg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">"abcde"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="P-67-JS-正则表达式语法"><a href="#P-67-JS-正则表达式语法" class="headerlink" title="P-67.JS_正则表达式语法"></a>P-67.JS_正则表达式语法</h4><p>1）使用字面量来创建正则表达式</p><p>​            语法：var 变量 =/ 正则表达式/匹配模式</p><p>使用字面量的方式创建更加简单，使用构造函数创建更加灵活</p><pre class="line-numbers language-JavaScript" data-language="JavaScript"><code class="language-JavaScript">&lt;script&gt;&#x2F;&#x2F;使用字面量来创建正则表达式var reg &#x3D; &#x2F;a&#x2F;i;console.log(reg.test(&quot;ABCDE&quot;));&lt;&#x2F;script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2）检查一个字符串中是否含有a或b，使用（|）来表示或则的意思，[ ]里面的也是或者的关系</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token comment">//创建一个正则表达式，检查一个字符串中是否含有a或b</span><span class="token keyword">var</span> reg <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">a|b</span><span class="token regex-delimiter">/</span><span class="token regex-flags">i</span></span><span class="token punctuation">;</span><span class="token comment">//[ ]里面的也是或者的关系,/[ab]/==/a|b/</span><span class="token keyword">var</span> reg <span class="token operator">=</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">[abc]</span><span class="token regex-delimiter">/</span><span class="token regex-flags">i</span></span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>reg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">"AsSTBCDE"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3)检查一个字符串中是否含有字母，使用[a-z]，表示任意字母</p><pre class="line-numbers language-JavaScript" data-language="JavaScript"><code class="language-JavaScript">&lt;script&gt;&#x2F;&#x2F;创建一个正则表达式，检查一个字符串中是否含有字母&#x2F;&#x2F;[a-z] 任意字母var reg &#x3D;&#x2F;[a-z]&#x2F;i;&#x2F;&#x2F;任意的小写字母var reg &#x3D;&#x2F;[a-z]&#x2F;;&#x2F;&#x2F;任意的大写字母var reg &#x3D;&#x2F;[A-Z]&#x2F;;console.log(reg.test(&quot;s&quot;));&lt;&#x2F;script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>4）检查一个字符串中是否含有abc或adc或aec  [ ]表示或者的意思</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token comment">//检查一个字符串中是否含有abc或adc或aec</span>          <span class="token comment">//以a开头，[]内表示可以是指定的字母，以c结尾</span> <span class="token keyword">var</span> reg<span class="token operator">=</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">a[bcd]c</span><span class="token regex-delimiter">/</span></span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>reg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">"adc"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>5）检查一个字符串中是否含有，除了a或者b以外的字母，**[^   ab]**除了a或b</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token comment">//检查一个字符串中是否含有除了a或者b以外的字母</span> <span class="token keyword">var</span> reg<span class="token operator">=</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">[^ab]</span><span class="token regex-delimiter">/</span></span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>reg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">"adc"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>6）检查一个字符串中是否含有0-9的数字</p><pre class="line-numbers language-JavaScript" data-language="JavaScript"><code class="language-JavaScript">&lt;script&gt;&#x2F;&#x2F;检查一个字符串中是否含有0-9的数字 var reg&#x3D;&#x2F;[0-9]&#x2F;console.log(reg.test(&quot;123&quot;));&#x2F;&#x2F;检查一个字符串中是否不含有0-9的数字 var reg2&#x3D;&#x2F;[^0-9]&#x2F;           console.log(reg2.test(&quot;123&quot;));&lt;&#x2F;script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="P-68-JS-字符串和正则相关的方法"><a href="#P-68-JS-字符串和正则相关的方法" class="headerlink" title="P-68.JS_字符串和正则相关的方法"></a>P-68.JS_字符串和正则相关的方法</h4><p>1）split()与正则组合使用，按照任意字母进行拆分，（这个方法即使不指定全局匹配,也会全都拆分）</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token comment">//split()与正则组合使用</span><span class="token keyword">var</span> str<span class="token operator">=</span><span class="token string">"1a2b3c4d5e6f7"</span><span class="token punctuation">;</span><span class="token comment">//按照任意字母进行拆分</span><span class="token comment">//这个方法即使不指定全局匹配,也会全都拆分</span><span class="token keyword">var</span> result<span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">[A-z]</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2）search（）可以搜索字符串中是否含有指定内容，如果有可以搜索指定内容，则返回第一次出现的索引，如果没有搜索到返回-1，它可以接收一个正则表达式作为参数，然后会根据正则表达式去检索字符串（serach()只会查找第一个，即使设置全局匹配也没用)</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token comment">//search()与正则组合使用</span><span class="token keyword">var</span> str<span class="token operator">=</span><span class="token string">"hello abc  world aec"</span><span class="token punctuation">;</span><span class="token comment">//检索字符串中是否含有以a开头，中间含有任意字母，以c结尾的内容</span><span class="token comment">//serach()只会查找第一个，即使设置全局匹配也没用</span><span class="token keyword">var</span> result<span class="token operator">=</span>str<span class="token punctuation">.</span><span class="token function">search</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">a[a-z]c</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3）match（）可以根据正则表达式，从一个字符串中将符合条件的内容提取出来，默认情况下我们的match只会找到第一个符合要求的内容，找到以后就停止检索，我们可以设置正则表达式为全局匹配模式，这样就会匹配到所有的内容，可以为一个正则表达式设置多个匹配模式,且顺序无所谓，match()会将匹配到的内容封装到一个数组中返回，即使只查询到一个结果</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token comment">//match（）</span><span class="token keyword">var</span> str<span class="token operator">=</span><span class="token string">"1a2b3A4d5e6f7"</span><span class="token punctuation">;</span><span class="token comment">//根据正则表达式，从一个字符串中将符合条件的内容提取出来</span><span class="token comment">//默认情况下我们的match只会找到第一个符合要求的内容，找到以后就停止检索</span><span class="token comment">//我们可以设置正则表达式为全局匹配模式，这样就会匹配到所有的内容</span><span class="token comment">//可以为一个正则表达式设置多个匹配模式,且顺序无所谓</span><span class="token keyword">var</span> result<span class="token operator">=</span>str<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">[a-z]</span><span class="token regex-delimiter">/</span><span class="token regex-flags">ig</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//match()会将匹配到的内容封装到一个数组中返回，即使只查询到一个结果</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>4）replace（）可以将字符串中指定的内容替换为新的内容</p><p>​    -参数：</p><p>​                1.被替换的内容，可以接收一个正则表达式作为参数</p><p>​                2.新的内容</p><p>​    -默认只会替换第一个</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token comment">//replace（）可以将字符串中的指定内容替换为新的内容</span><span class="token keyword">var</span> str<span class="token operator">=</span><span class="token string">"1a2b3A4d5e6f7"</span><span class="token punctuation">;</span><span class="token comment">//参数：</span><span class="token comment">//1.被替换的内容，可以接收一个正则表达式作为参数，2.新的内容</span><span class="token comment">//默认只会替换第一个，可以使用全局匹配模式，替换所有内容</span><span class="token keyword">var</span> result<span class="token operator">=</span>str<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">[a-z]</span><span class="token regex-delimiter">/</span><span class="token regex-flags">ig</span></span><span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="P-69-JS-正则表达式语法"><a href="#P-69-JS-正则表达式语法" class="headerlink" title="P-69.JS_正则表达式语法"></a>P-69.JS_正则表达式语法</h4><p>1）量词，通过量词可以设置一个内容出现的次数，量词只对它前边的一个内容起作用</p><p>​    -{n}正好出现n次</p><pre class="line-numbers language-JavaScript" data-language="JavaScript"><code class="language-JavaScript">&lt;script&gt;          &#x2F;&#x2F;量词，通过量词可以设置一个内容出现的次数&#x2F;&#x2F;量词只对它前边的一个内容起作用,如果指定多个则用（）括起来&#x2F;&#x2F;&#123;n&#125;正好出现n次var result &#x3D; &#x2F;a&#123;2&#125;&#x2F;;&#x2F;&#x2F;console.log(result.test(&quot;aac&quot;));&lt;&#x2F;script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​    -{m，n}出现m到n次</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token comment">//&#123;m，n&#125;出现m到n次</span><span class="token keyword">var</span> result2<span class="token operator">=</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">a&#123;1,3&#125;</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span><span class="token comment">//console.log(result2.test("aabbbc"));</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​    -{m,}出现m次以上</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token comment">//&#123;m，n&#125;出现m到n次</span><span class="token keyword">var</span> result2<span class="token operator">=</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">a&#123;1,3&#125;</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span><span class="token comment">//console.log(result2.test("aabbbc"));</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p> +至少一个（），相当于{1，}</p><pre class="line-numbers language-JavaScript" data-language="JavaScript"><code class="language-JavaScript">&lt;script&gt;&#x2F;&#x2F; + 至少一个（），相当于&#123;1，&#125;var result3&#x3D;&#x2F;ab+c&#x2F;;console.log(result3.test(&quot;abc&quot;));&lt;&#x2F;script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​    *0个或多个，相当于{0，}</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token comment">// + 至少一个（），相当于&#123;1，&#125;</span><span class="token keyword">var</span> result4<span class="token operator">=</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">ab*c</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result4<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">"abc"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> result <span class="token operator">=</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">ab&#123;0,&#125;c</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">"abc"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>？0个或多个，相当于{0，1}</p><pre class="line-numbers language-JavaScript" data-language="JavaScript"><code class="language-JavaScript">&lt;script&gt;&#x2F;&#x2F; ？0个或一个（），相当于&#123;0，1&#125;var result5&#x3D;&#x2F;ab？c&#x2F;;console.log(result5.test(&quot;abc&quot;));&lt;&#x2F;script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2）/^a/ 检查一个字符串是否以a开头</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token comment">//检查一个字符串是否以a开头</span><span class="token comment">//^a表示开头</span><span class="token keyword">var</span> result<span class="token operator">=</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^a</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">"abc"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3）/a$/检查一个字符串是否以a结尾</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token comment">//检查一个字符串是否以a结尾</span><span class="token comment">//a$表示结尾</span><span class="token keyword">var</span> result<span class="token operator">=</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">a$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">"abca"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>4）/^a|a$/以a开头或以a结尾</p><pre class="line-numbers language-JavaScript" data-language="JavaScript"><code class="language-JavaScript">&lt;script&gt;&#x2F;&#x2F;如果在正则表达式中同时使用^ $则要求字符串必须完全符合正则表达式&#x2F;&#x2F;检查一个字符串是否以a结尾&#x2F;&#x2F;以a开头或以a结尾&#x2F;^a|a$&#x2F;var result&#x3D;&#x2F;^a|a$&#x2F;;&#x2F;&#x2F;console.log(result.test(&quot;abcasx&quot;));&#x2F;&#x2F;必须以a开头以a结尾&#x2F;^a&amp;a$&#x2F;var result2&#x3D;&#x2F;^a&amp;a$&#x2F;;console.log(result2.test(&quot;abcasxa&quot;));&lt;&#x2F;script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>4）/^a&amp;a$/必须以a开头以a结尾</p><pre class="line-numbers language-JavaScript" data-language="JavaScript"><code class="language-JavaScript">&lt;script&gt;&#x2F;&#x2F;如果在正则表达式中同时使用^ $则要求字符串必须完全符合正则表达式&#x2F;&#x2F;检查一个字符串是否（必须）以a开头以a结尾&#x2F;^a&amp;a$&#x2F;var result2&#x3D;&#x2F;^a&amp;a$&#x2F;;console.log(result2.test(&quot;abcasxa&quot;));&lt;&#x2F;script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>5）手机号练习：</p><pre class="line-numbers language-JavaScript" data-language="JavaScript"><code class="language-JavaScript">&lt;script&gt;&#x2F;&#x2F;手机号正确性验证&#x2F;&#x2F;手机号规则：&#x2F;&#x2F;第一位：以数字１开头&#x2F;&#x2F;第二位：３－９任意数字&#x2F;&#x2F;第三位：０－９任意９个数字var result&#x3D;&#x2F;^1[3-9][0-9]&#123;9&#125;&#x2F;;console.log(result.test(&quot;13194019226&quot;));&lt;&#x2F;script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>６）检查一个字符串中是否含有（．），（．）表示任意字符，在正则表达式中使用＼作为转义字符，通过（＼．）来表示（．）</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token comment">//检查 一个字符串中是否含有.</span><span class="token comment">//.表示任意字符，在正则表达式中使用＼作为转义字符</span><span class="token comment">//通过\.来表示.</span><span class="token keyword">var</span> result<span class="token operator">=</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\.</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">"abc123.com"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>７）在正则表达式中与字符串一样，<strong>两个＼代表一个＼</strong></p><pre class="line-numbers language-JavaScript" data-language="JavaScript"><code class="language-JavaScript">&lt;script&gt;&#x2F;&#x2F;检查 一个字符串中是否含有＼&#x2F;&#x2F;在正则表达式中使用＼，需要使用\\来表示＼var result&#x3D;&#x2F;\\&#x2F;;console.log(result.test(&quot;abc123\\&quot;));／／&lt;&#x2F;script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>８）使用构造函数时，由于它的参数是一个字符串，而\是字符串中转义字符,如果要使用\则需要使用\来代替</p><pre class="line-numbers language-JavaScript" data-language="JavaScript"><code class="language-JavaScript">&lt;script&gt;&#x2F;&#x2F;注意:使用构造函数时，由于它的参数是一个字符串，而\是字符串中转义字符,&#x2F;&#x2F;如果要使用\则需要使用\\来代替var result&#x3D;new RegExp(&quot;\\.&quot;);console.log(result.test(&quot;sadasdss\\.&quot;));&lt;&#x2F;script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>９）＼ｗ＼Ｗ＼ｄ＼Ｄ＼ｓ＼Ｓ＼ｂ＼Ｂ的使用</p><pre class="line-numbers language-JavaScript" data-language="JavaScript"><code class="language-JavaScript">&lt;script&gt;&#x2F;*  &#x2F;w表示任意的字母、数字、下划线[A-z  0-9  _] &#x2F;W表示除了字母、数字、下划线[^A-z  0-9  _] &#x2F;d表示任意的数字[0-9] &#x2F;D表示除了数字[^0-9] &#x2F;s表示空格 &#x2F;S表示除了空格 &#x2F;b表示单词边界 &#x2F;B表示除了单词边界*&#x2F;&#x2F;&#x2F;创建一个正则表达式，检查一个字符串中是否含有hello(独立的单词)var result&#x3D;&#x2F;\bhello\b&#x2F;;console.log(result.test(&quot;hellojava&quot;));&#x2F;&#x2F;返回false console.log(result.test(&quot;hello java&quot;));&#x2F;&#x2F;返回true&lt;&#x2F;script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>10）去除字符串开头的空格和结尾的空格</p><pre class="line-numbers language-JavaScript" data-language="JavaScript"><code class="language-JavaScript">&lt;script&gt;&#x2F;&#x2F;去除字符串中得到前后的空格&#x2F;&#x2F;去除空格就是使用&quot;&quot;来替换空格var result&#x3D;&quot;         admin       &quot;;result&#x3D;result.replace(&#x2F;^\s*|\s*$&#x2F;g,&quot;&quot;); console.log(result);&lt;&#x2F;script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="P-70-JS-电子邮件正则"><a href="#P-70-JS-电子邮件正则" class="headerlink" title="P-70.JS_电子邮件正则"></a>P-70.JS_电子邮件正则</h4><p>1）判断一个字符串是否为电子邮件格式</p><pre class="line-numbers language-JavaScript" data-language="JavaScript"><code class="language-JavaScript">&lt;script&gt;　&#x2F;&#x2F;创建一个正则，判断一个字符串是否为电子邮件格式　&#x2F;&#x2F;任意的字母数字下划线 . 任意字母数字下划线 @ 任意字母数字 . 任意字母（2-5位）. 任意字母（2-5位）var result&#x3D;&#x2F;^\w&#123;3,&#125;(\.\w+)*@[A-z0-9]+(\.[A-z]&#123;2,5&#125;)&#123;1,2&#125;$&#x2F;;console.log(result.test(&quot;abc.long@163.com.cn&quot;)); &lt;&#x2F;script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="P-71-JS-DOM简介"><a href="#P-71-JS-DOM简介" class="headerlink" title="P-71.JS_DOM简介"></a>P-71.JS_DOM简介</h3><p>1）什么是DOM：DOM，全称Document Object Model文档对象模型。</p><p>​    JS中通过DOM来对HTML文档进行操作。只要理解了DOM就可以随心所欲的操作WEB页面。</p><p>​    文档：文档表示的就是整个的HTML网页文档</p><p>​    对象：对象表示将网页中的每一个部分都转换为了一个对象。</p><p>​    模型：使用模型来表示对象之间的关系，这样方便我们获取对象。</p><p>​                                                                <strong>DOM树</strong></p><img src="/2020/05/09/hexo-bolg1/js_05.jpg" class=""><p>2）通过这个对象模型，JavaScript 获得创建动态 HTML 的所有力量：</p><ul><li>JavaScript 能改变页面中的所有 HTML 元素</li><li>JavaScript 能改变页面中的所有 HTML 属性</li><li>JavaScript 能改变页面中的所有 CSS 样式</li><li>JavaScript 能删除已有的 HTML 元素和属性</li><li>JavaScript 能添加新的 HTML 元素和属性</li><li>JavaScript 能对页面中所有已有的 HTML 事件作出反应</li><li>JavaScript 能在页面中创建新的 HTML 事件</li></ul><p>3）节点：Node——构成HTML文档最基本的单元。</p><p>常用节点分为4类</p><p>——文档节点：整个HTML文档</p><p>——元素节点：HTML文档中的HTML标签</p><p>——属性节点：元素属性</p><p>——文本节点：HTML标签中的文本内容</p><img src="/2020/05/09/hexo-bolg1/js_06.jpg" class=""><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>body<span class="token operator">></span><span class="token operator">&lt;</span>button id<span class="token operator">=</span><span class="token string">"but"</span><span class="token operator">></span><span class="token constant">I</span>'m btton<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token comment">//当浏览器载入网页Body部分的时候，就执行其中的Javascript语句</span><span class="token comment">//执行之后输出的内容就显示在网页中。</span><span class="token keyword">var</span> but <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"but"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>but<span class="token punctuation">.</span>innerHTML<span class="token operator">=</span><span class="token string">"我是一个按钮"</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">></span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="P-72-JS-javascript写在和里的区别"><a href="#P-72-JS-javascript写在和里的区别" class="headerlink" title="P-72.JS_javascript写在和里的区别"></a>P-72.JS_javascript写在<head>和<body>里的区别</h4><p>Javascript写在哪里？概括起来就是三种形式：</p><p>内部：Html网页的<body></body>中；</p><p>内部：Html网页的<head></head>中；</p><p>外部：外部JS文件里</p><p>１）(1) Javascript写在<body></body>中<br>        当浏览器载入网页Body部分的时候，就执行其中的Javascript语句，执行之后输出的内容就显示在网页中。</p><p>２）Javascript写在<head></head>中<br>        有时候并不需要一载入HTML就运行Javascript，而是用户点击了HTML中的某个对象，触发了一个事件，才需要调用Javascript。这时候，通常将这样的Javascript放在HTML的<head></head>里。</p><p>３） Javascript写在<head></head>中<br>        将Javascript程序放到一个后缀名为.js的文本文件里。<br>在HTML里引用外部文件里的Javascript，应在Head里写一句<script src="文件名"></script>，其中src的值，就是Javascript所在文件的文件路径。</p><h4 id="P-73-JS-事件的简介"><a href="#P-73-JS-事件的简介" class="headerlink" title="P-73.JS_事件的简介"></a>P-73.JS_事件的简介</h4><p>1)事件：就是用户和浏览器之间的交互行为，</p><p>​        比如：点击按钮、鼠标移动、关闭窗口 ……</p><p>2）我们可以在事件的属性中设置一些js代码，这样当事件被触发时，这些代码将会执行，这种写法我们称为结构和行为耦合，不方便维护，不推荐使用</p><p>3）可以为按钮的对应事件绑定处理函数的形式来响应事件，这样当事件被触发时，其对应的函数将会被调用</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>body<span class="token operator">></span><span class="token operator">&lt;</span>button id<span class="token operator">=</span><span class="token string">"but"</span><span class="token operator">></span><span class="token constant">I</span>'m btton<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span>         <span class="token comment">//获取按钮对象</span><span class="token keyword">var</span> btn<span class="token operator">=</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"but"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//绑定一个单击事件</span><span class="token comment">//像这种为单击事件绑定的函数,我们称为单击响应函数</span>btn<span class="token punctuation">.</span><span class="token function-variable function">onclick</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"我是一个按钮"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">></span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="P-74-JS-文档的加载"><a href="#P-74-JS-文档的加载" class="headerlink" title="P-74.JS_文档的加载"></a>P-74.JS_文档的加载</h4><p>1）浏览器在加载一个页面时，是按照自上向下的顺序加载的，读取到一行就运行一行，如果将script标签写到页面的随便，在代码执行时，页面还没加载，页面没有加载DOM对象也没有加载会导致无法获取到DOM对象。将js代码编写到页面的下部就是为了，可以在页面加载完毕以后再执行js代码，</p><p>２）onload事件会在整个页面加载完成之后才触发，为window绑定一个onload事件，该事件对应的响应函数将会在页面加载完成之后执行，这样可以确保我们的代码执行时所有的DOM对象已经加载完毕了，</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script<span class="token operator">></span>            <span class="token comment">//onload事件会在整个页面加载完成之后才触发，为window绑定一个onload事件</span>window<span class="token punctuation">.</span><span class="token function-variable function">onload</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">var</span> btn<span class="token operator">=</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"but"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>btn<span class="token punctuation">.</span><span class="token function-variable function">onclick</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"我是一个按钮"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token operator">&lt;</span>body<span class="token operator">></span><span class="token operator">&lt;</span>button id<span class="token operator">=</span><span class="token string">"but"</span><span class="token operator">></span><span class="token constant">I</span>'m btton<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">></span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="P-75-JS-DOM查询"><a href="#P-75-JS-DOM查询" class="headerlink" title="P-75.JS_DOM查询"></a>P-75.JS_DOM查询</h4><p>1）获取元素节点，通过document对象调用</p><p>​        1.getElementById（）：通过id属性获取一个元素节点对象，innerHTML 通过这个属性可以获取到元素内部的html代码</p><pre class="line-numbers language-JavaScript" data-language="JavaScript"><code class="language-JavaScript">&lt;script&gt; window.onload&#x3D;function()&#123;var li&#x3D;document.getElementById(&quot;beijing&quot;);       &#x2F;&#x2F;innerHTML 通过这个属性可以获取到元素内部的html代码alert(li.innerHTML);&#125;;&lt;&#x2F;script&gt;&lt;body&gt;&lt;ul id&#x3D;&quot;array&quot;&gt;&lt;li id&#x3D;&quot;beijing&quot;&gt;北京&lt;&#x2F;li&gt;&lt;li id&#x3D;&quot;shanghai&quot;&gt;上海&lt;&#x2F;li&gt;&lt;li id&#x3D;&quot;tianjin&quot;&gt;天津&lt;&#x2F;li&gt;&lt;&#x2F;ul&gt;&lt;&#x2F;body&gt; <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​        2.getElementsByTagName（）：通过标签名获取一组元素节点对象</p><pre class="line-numbers language-JavaScript" data-language="JavaScript"><code class="language-JavaScript">&lt;script&gt; window.onload&#x3D;function()&#123;&#x2F;&#x2F;getElementsByTagName()可以根据标签名来获取一组元素节点对象&#x2F;&#x2F;这个方法给我们返回一个类数组对象，所有查询到的元素都会封装到对象中var lis&#x3D;document.getElementsByTagName(&quot;li&quot;);&#x2F;&#x2F;遍历lis，获取多所有的lis对象for(var i&#x3D;0;i&lt;lis.length;i++)&#123;&#x2F;&#x2F;打印lisconsole.log(lis[i].innerHTML); &#125; &#125;;&lt;&#x2F;script&gt;&lt;body&gt;&lt;ul id&#x3D;&quot;array&quot;&gt;&lt;li id&#x3D;&quot;beijing&quot;&gt;北京&lt;&#x2F;li&gt;&lt;li id&#x3D;&quot;shanghai&quot;&gt;上海&lt;&#x2F;li&gt;&lt;li id&#x3D;&quot;tianjin&quot;&gt;天津&lt;&#x2F;li&gt;&lt;&#x2F;ul&gt;&lt;&#x2F;body&gt; <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​        3.getElementsByName（）：通过name属性获取一组元素节点对象，innerHTML用于获取元素内部的HTML代码的对于自结束标签,这个属性没有意义</p><pre class="line-numbers language-JavaScript" data-language="JavaScript"><code class="language-JavaScript">&lt;script&gt; window.onload&#x3D;function()&#123;var inputs&#x3D;document.getElementsByName(&quot;id&quot;); for (var i&#x3D;0;i&lt;inputs.length;i++) &#123;&#x2F;&#x2F;如果需要读取元素节点属性，直接使用元素.属性名&#x2F;&#x2F;例子：元素.id  元素.name  元素.velue&#x2F;&#x2F;注意：class属性不能采用这种方式&#x2F;&#x2F;读取class属性时，需要使用  元素.classNameconsole.log(inputs[i].value);&#125;&#125;;&lt;&#x2F;script&gt;&lt;body&gt;&lt;form&gt;&lt;input type&#x3D;&quot;radio&quot; name&#x3D;&quot;id&quot; value&#x3D;&quot;账号：&quot;&#x2F;&gt;&lt;input type&#x3D;&quot;radio&quot; name&#x3D;&quot;id&quot; value&#x3D;&quot;密码：&quot;&#x2F;&gt;&lt;&#x2F;form&gt;&lt;&#x2F;body&gt; <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="P-76-JS-图片切换的练习"><a href="#P-76-JS-图片切换的练习" class="headerlink" title="P-76.JS_图片切换的练习"></a>P-76.JS_图片切换的练习</h4><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css"><span class="token selector">*</span><span class="token punctuation">&#123;</span><span class="token property">padding</span><span class="token punctuation">:</span> 0px<span class="token punctuation">;</span><span class="token property">margin</span><span class="token punctuation">:</span> 0px<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">li,p</span><span class="token punctuation">&#123;</span><span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">#bun</span><span class="token punctuation">&#123;</span><span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"> window<span class="token punctuation">.</span><span class="token function-variable function">onload</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//切换到上一张图片</span><span class="token keyword">var</span> but1<span class="token operator">=</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"but1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> but2<span class="token operator">=</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"but2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//要切换图片就是要修改img标签的src属性</span><span class="token comment">//获取img标签</span><span class="token keyword">var</span> img<span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">"img"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//创建一个数组保存图片路径</span><span class="token keyword">var</span> imgArr<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">"img/R788a87fe63c4fd54c92b1f83cac80ceb.jpg"</span><span class="token punctuation">,</span><span class="token string">"img/女孩喝啤酒 飘窗 城市夜景 雨天 è 好看唯美4k动漫壁纸_彼岸图网.jpg"</span><span class="token punctuation">,</span><span class="token string">"img/斗破苍穹 云韵 萧炎4k高清壁纸_彼岸图网.jpg"</span><span class="token punctuation">,</span><span class="token string">"img/灯笼节 女孩 兽角 二次元动漫4k壁纸_彼岸图网.jpg"</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//创建一个变量，来保存当前正则显示的图片路径</span><span class="token keyword">var</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//显示提示文字</span><span class="token keyword">var</span> info <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"info"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>info<span class="token punctuation">.</span>innerHTML<span class="token operator">=</span><span class="token string">" 一共"</span><span class="token operator">+</span>imgArr<span class="token punctuation">.</span>length<span class="token operator">+</span><span class="token string">"张图片，当前第"</span><span class="token operator">+</span><span class="token punctuation">(</span>index<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"张"</span>but1<span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//切换到上一张，索引自减</span>index<span class="token operator">--</span><span class="token punctuation">;</span><span class="token comment">//判断if是否小于0，就不能在上一张了</span><span class="token keyword">if</span><span class="token punctuation">(</span>index<span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>index<span class="token operator">=</span>imgArr<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>img<span class="token punctuation">.</span>src<span class="token operator">=</span>imgArr<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span>info<span class="token punctuation">.</span>innerHTML<span class="token operator">=</span><span class="token string">" 一共"</span><span class="token operator">+</span>imgArr<span class="token punctuation">.</span>length<span class="token operator">+</span><span class="token string">"张图片，当前第"</span><span class="token operator">+</span><span class="token punctuation">(</span>index<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"张"</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>but2<span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//切换到下一张，索引自增</span>index<span class="token operator">++</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>index<span class="token operator">></span>imgArr<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>index<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>img<span class="token punctuation">.</span>src<span class="token operator">=</span>imgArr<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span>info<span class="token punctuation">.</span>innerHTML<span class="token operator">=</span><span class="token string">" 一共"</span><span class="token operator">+</span>imgArr<span class="token punctuation">.</span>length<span class="token operator">+</span><span class="token string">"张图片，当前第"</span><span class="token operator">+</span><span class="token punctuation">(</span>index<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"张"</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>info<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>img/R788a87fe63c4fd54c92b1f83cac80ceb.jpg<span class="token punctuation">"</span></span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">height</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span><span class="token property">width</span><span class="token punctuation">:</span> 300px<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>bun<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>but1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>上一张<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>but2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>下一张<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="P-77-JS-DOM查询2"><a href="#P-77-JS-DOM查询2" class="headerlink" title="P-77.JS_DOM查询2"></a>P-77.JS_DOM查询2</h4><p>获取元素节点的子节点，通过具体的元素节点调用</p><p>１）getElementsByTagName()，—方法：返回当前系欸但那的指定标签名后代节点</p><pre class="line-numbers language-JavaScript" data-language="JavaScript"><code class="language-JavaScript">&lt;script&gt;&#x2F;&#x2F;在文件加载后，进行加载window.onload&#x3D;function()&#123;&#x2F;&#x2F;通过id属性获取元素对象var city &#x3D; document.getElementById(&quot;cityBut&quot;);&#x2F;&#x2F;创建点击事件city.onclick&#x3D;function()&#123;var city1&#x3D;document.getElementById(&quot;city&quot;);&#x2F;&#x2F;通过标签获取元素对象var sum&#x3D; city1.getElementsByTagName(&quot;li&quot;);&#x2F;&#x2F;for (var i&#x3D;0;i&lt;sum.length;i++) &#123;console.log(sum[i].innerHTML);&#125;&#125;;&#125;;&lt;&#x2F;script&gt; &lt;body&gt;&lt;button id&#x3D;&quot;cityBut&quot;&gt;按钮&lt;&#x2F;button&gt;&lt;ul id&#x3D;&quot;city&quot;&gt;&lt;li id&#x3D;&quot;beijing&quot;&gt;湖南&lt;&#x2F;li&gt;&lt;li id&#x3D;&quot;shanghai&quot;&gt;湖北&lt;&#x2F;li&gt;&lt;li id&#x3D;&quot;tianjin&quot;&gt;四川&lt;&#x2F;li&gt;&lt;&#x2F;ul&gt;&lt;&#x2F;body&gt; <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2）childNodes，—属性：表示当前节点的所有子节点，childNodes属性会获取包括文本节点在内的所有节点，根据DOM标签，标签之间空白也当成文本节点</p><pre class="line-numbers language-JavaScript" data-language="JavaScript"><code class="language-JavaScript">&lt;script&gt;window.onload&#x3D;function()&#123;&#x2F;&#x2F;为id为cityBut的按钮绑定一个单击相应函数var but&#x3D;document.getElementById(&quot;cityBut&quot;); but.onclick&#x3D;function()&#123; &#x2F;&#x2F;获取id为city的节点 var city&#x3D;document.getElementById(&quot;city&quot;); &#x2F;&#x2F;返回#city的所有节点 &#x2F;*  * childNodes属性会获取包括文本节点在呢的所有节点  * 根据DOM标签标签间空白也会当成文本节点  * 注意：在IE8 及以下的浏览器中，不会将空白当成子节点  * 所以该属性在IE8中会返回4个子元素，而其他浏览器是7个  *&#x2F; var citySi&#x3D;city.childNodes; for (var i&#x3D;0;i&lt;citySi.length;i++) &#123; console.log(citySi[i].innerHTML); &#125; &#125;&#125;;&lt;&#x2F;script&gt; &lt;body&gt;&lt;button id&#x3D;&quot;cityBut&quot;&gt;按钮&lt;&#x2F;button&gt;&lt;ul id&#x3D;&quot;city&quot;&gt;&lt;li id&#x3D;&quot;beijing&quot;&gt;湖南&lt;&#x2F;li&gt;&lt;li id&#x3D;&quot;shanghai&quot;&gt;湖北&lt;&#x2F;li&gt;&lt;li id&#x3D;&quot;tianjin&quot;&gt;四川&lt;&#x2F;li&gt;&lt;&#x2F;ul&gt;&lt;&#x2F;body&gt; <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3）children属性可以获取当前元素的所有子元素</p><pre class="line-numbers language-JavaScript" data-language="JavaScript"><code class="language-JavaScript">&lt;script&gt;window.onload&#x3D;function()&#123;&#x2F;&#x2F;为id为cityBut的按钮绑定一个单击相应函数var but&#x3D;document.getElementById(&quot;cityBut&quot;); but.onclick&#x3D;function()&#123; &#x2F;&#x2F;获取id为city的节点 var city&#x3D;document.getElementById(&quot;city&quot;); &#x2F;&#x2F;返回#city的所有节点 &#x2F;*  * children属性可以获取当前元素的所有子元素  *&#x2F; var citySi&#x3D;city.children; for (var i&#x3D;0;i&lt;citySi.length;i++) &#123; console.log(citySi[i].innerHTML); &#125; &#125;&#125;;&lt;&#x2F;script&gt; &lt;body&gt;&lt;button id&#x3D;&quot;cityBut&quot;&gt;按钮&lt;&#x2F;button&gt;&lt;ul id&#x3D;&quot;city&quot;&gt;&lt;li id&#x3D;&quot;beijing&quot;&gt;湖南&lt;&#x2F;li&gt;&lt;li id&#x3D;&quot;shanghai&quot;&gt;湖北&lt;&#x2F;li&gt;&lt;li id&#x3D;&quot;tianjin&quot;&gt;四川&lt;&#x2F;li&gt;&lt;&#x2F;ul&gt;&lt;&#x2F;body&gt; <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3）firstChild，—属性，表示当前节点的第一个子节点</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script<span class="token operator">></span>window<span class="token punctuation">.</span><span class="token function-variable function">onload</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//为id为cityBut的按钮绑定一个单击相应函数</span><span class="token keyword">var</span> but<span class="token operator">=</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"cityBut"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> but<span class="token punctuation">.</span><span class="token function-variable function">onclick</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token comment">//获取id为city的节点</span> <span class="token keyword">var</span> city<span class="token operator">=</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"city"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//返回#city的所有节点</span> <span class="token comment">/*  * firstChild属性可以获取当前元素的第一个子节点（包括空白文本节点）  */</span> <span class="token keyword">var</span> citySi<span class="token operator">=</span>city<span class="token punctuation">.</span>firstChild<span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>citySi<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span> <span class="token operator">&lt;</span>body<span class="token operator">></span><span class="token operator">&lt;</span>button id<span class="token operator">=</span><span class="token string">"cityBut"</span><span class="token operator">></span>按钮<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span><span class="token operator">&lt;</span>ul id<span class="token operator">=</span><span class="token string">"city"</span><span class="token operator">></span><span class="token operator">&lt;</span>li id<span class="token operator">=</span><span class="token string">"beijing"</span><span class="token operator">></span>湖南<span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span><span class="token operator">&lt;</span>li id<span class="token operator">=</span><span class="token string">"shanghai"</span><span class="token operator">></span>湖北<span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span><span class="token operator">&lt;</span>li id<span class="token operator">=</span><span class="token string">"tianjin"</span><span class="token operator">></span>四川<span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>ul<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">></span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>4）lastChild，—属性，表示当前节点的最后一个子节点</p><pre class="line-numbers language-JavaScript" data-language="JavaScript"><code class="language-JavaScript">&lt;script&gt;window.onload&#x3D;function()&#123;&#x2F;&#x2F;为id为cityBut的按钮绑定一个单击相应函数var but&#x3D;document.getElementById(&quot;cityBut&quot;); but.onclick&#x3D;function()&#123; &#x2F;&#x2F;获取id为city的节点 var city&#x3D;document.getElementById(&quot;city&quot;); &#x2F;&#x2F;返回#city的所有节点 &#x2F;*  * lastChild属性可以获取当前元素的最后一个子节点（包括空白文本节点）  *&#x2F; var citySi&#x3D;city.lastChild;  console.log(citySi.innerHTML);  &#125;&#125;;&lt;&#x2F;script&gt;  &lt;body&gt;&lt;button id&#x3D;&quot;cityBut&quot;&gt;按钮&lt;&#x2F;button&gt;&lt;ul id&#x3D;&quot;city&quot;&gt;&lt;li id&#x3D;&quot;beijing&quot;&gt;湖南&lt;&#x2F;li&gt;&lt;li id&#x3D;&quot;shanghai&quot;&gt;湖北&lt;&#x2F;li&gt;&lt;li id&#x3D;&quot;tianjin&quot;&gt;四川&lt;&#x2F;li&gt;&lt;&#x2F;ul&gt;&lt;&#x2F;body&gt; <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="P-78-JS-DOM查询3"><a href="#P-78-JS-DOM查询3" class="headerlink" title="P-78.JS_DOM查询3"></a>P-78.JS_DOM查询3</h4><p>获取父节点和兄弟节点，通过具体的节点调用</p><p>1）parentNode，—属性，表示当前节点的父节点</p><p>​        innerText-该属性可以获取元素内部的文本内容，他和innerHTML类似，不同的是他会自动将html（标签）去除</p><pre class="line-numbers language-JavaScript" data-language="JavaScript"><code class="language-JavaScript">&lt;script&gt;window.onload&#x3D;function()&#123;&#x2F;&#x2F;定义一个函数，专门用来为指定元素绑定单击响应函数&#x2F;&#x2F;参数：btn要绑定单击响应函数的对象的id属性值&#x2F;&#x2F;fun 事件的回调函数，当单击元素时，该函数将会被触发var MyClick&#x3D;function(btn,fun)&#123;&#x2F;&#x2F;为ID为btn的按钮绑定一个单击响应函数var but&#x3D;document.getElementById(btn);but.onclick&#x3D;fun;&#125;MyClick(&quot;cityBut&quot;,function()&#123;var pa &#x3D; document.getElementById(&quot;beijing&quot;);var result&#x3D;pa.parentNode;&#x2F;* * innerText-该属性可以获取元素内部的文本内容 * 他和innerHTML类似，不同的是他会自动将html（标签）去除 *&#x2F;console.log(result.innerText);&#125;);&#125;;&lt;&#x2F;script&gt;  &lt;body&gt;&lt;button id&#x3D;&quot;cityBut&quot;&gt;按钮&lt;&#x2F;button&gt;&lt;ul id&#x3D;&quot;city&quot;&gt;&lt;li id&#x3D;&quot;beijing&quot;&gt;湖南&lt;&#x2F;li&gt;&lt;li id&#x3D;&quot;shanghai&quot;&gt;湖北&lt;&#x2F;li&gt;&lt;li id&#x3D;&quot;tianjin&quot;&gt;四川&lt;&#x2F;li&gt;&lt;&#x2F;ul&gt;&lt;&#x2F;body&gt; <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2）prebiousSibling，—属性，表示当前节点的前一个兄弟节点，（也可能获取到空白文本）　</p><pre class="line-numbers language-JavaScript" data-language="JavaScript"><code class="language-JavaScript">&lt;script&gt;window.onload&#x3D;function()&#123;&#x2F;&#x2F;定义一个函数，专门用来为指定元素绑定单击响应函数&#x2F;&#x2F;参数：btn要绑定单击响应函数的对象的id属性值&#x2F;&#x2F;fun 事件的回调函数，当单击元素时，该函数将会被触发var MyClick&#x3D;function(btn,fun)&#123;&#x2F;&#x2F;为ID为btn的按钮绑定一个单击响应函数var but&#x3D;document.getElementById(btn);but.onclick&#x3D;fun;&#125;MyClick(&quot;cityBut&quot;,function()&#123;var pa &#x3D; document.getElementById(&quot;shanghai&quot;);&#x2F;&#x2F;返回shanghai的前一个兄弟节点，也可能获取到空白文本var result&#x3D; pa.previousSibling;console.log(result.innerHTML);&#125;);&#125;;&lt;&#x2F;script&gt;  &lt;body&gt;&lt;button id&#x3D;&quot;cityBut&quot;&gt;按钮&lt;&#x2F;button&gt;&lt;ul id&#x3D;&quot;city&quot;&gt;&lt;li id&#x3D;&quot;beijing&quot;&gt;湖南&lt;&#x2F;li&gt;&lt;li id&#x3D;&quot;shanghai&quot;&gt;湖北&lt;&#x2F;li&gt;&lt;li id&#x3D;&quot;tianjin&quot;&gt;四川&lt;&#x2F;li&gt;&lt;&#x2F;ul&gt;&lt;&#x2F;body&gt; <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3）nextSibling，—属性表示当前节点的最后一个兄弟节点</p><pre class="line-numbers language-JavaScript" data-language="JavaScript"><code class="language-JavaScript">&lt;script&gt;window.onload&#x3D;function()&#123;&#x2F;&#x2F;定义一个函数，专门用来为指定元素绑定单击响应函数&#x2F;&#x2F;参数：btn要绑定单击响应函数的对象的id属性值&#x2F;&#x2F;fun 事件的回调函数，当单击元素时，该函数将会被触发var MyClick&#x3D;function(btn,fun)&#123;&#x2F;&#x2F;为ID为btn的按钮绑定一个单击响应函数var but&#x3D;document.getElementById(btn);but.onclick&#x3D;fun;&#125;MyClick(&quot;cityBut&quot;,function()&#123;var pa &#x3D; document.getElementById(&quot;shanghai&quot;);&#x2F;&#x2F;返回shanghai的最后一个兄弟节点，也可能获取到空白文本var result&#x3D; pa.nextSibling;console.log(result);&#125;);&#125;;&lt;&#x2F;script&gt;  &lt;body&gt;&lt;button id&#x3D;&quot;cityBut&quot;&gt;按钮&lt;&#x2F;button&gt;&lt;ul id&#x3D;&quot;city&quot;&gt;&lt;li id&#x3D;&quot;beijing&quot;&gt;湖南&lt;&#x2F;li&gt;&lt;li id&#x3D;&quot;shanghai&quot;&gt;湖北&lt;&#x2F;li&gt;&lt;li id&#x3D;&quot;tianjin&quot;&gt;四川&lt;&#x2F;li&gt;&lt;&#x2F;ul&gt;&lt;&#x2F;body&gt; <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>４）获取id为username的value属性值，文本框中的value属性值，就是文本框中输入的内容</p><pre class="line-numbers language-JavaScript" data-language="JavaScript"><code class="language-JavaScript">window.onload&#x3D;function()&#123;&#x2F;&#x2F;定义一个函数，专门用来为指定元素绑定单击响应函数&#x2F;&#x2F;参数：btn要绑定单击响应函数的对象的id属性值&#x2F;&#x2F;fun 事件的回调函数，当单击元素时，该函数将会被触发var MyClick&#x3D;function(btn,fun)&#123;&#x2F;&#x2F;为ID为btn的按钮绑定一个单击响应函数var but&#x3D;document.getElementById(btn);but.onclick&#x3D;fun;&#125;MyClick(&quot;cityBut&quot;,function()&#123;&#x2F;&#x2F;获取id为username的value属性值var pa &#x3D; document.getElementById(&quot;username&quot;);&#x2F;&#x2F;文本框中的value属性值，就是文本框中输入的内容var result&#x3D;pa.value; console.log(result);&#125;);&#125;;&lt;&#x2F;script&gt;  &lt;body&gt;&lt;button id&#x3D;&quot;cityBut&quot;&gt;按钮&lt;&#x2F;button&gt;&lt;input type&#x3D;&quot;text&quot; id&#x3D;&quot;username&quot; value&#x3D;&quot;张三&quot; &#x2F;&gt;&lt;&#x2F;body&gt; <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="P-79-JS-全选练习"><a href="#P-79-JS-全选练习" class="headerlink" title="P-79.JS_全选练习"></a>P-79.JS_全选练习</h4><p>１）获取当前选项卡状态　　<strong>items[i].checked</strong></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token constant">DOCTYPE</span> html<span class="token operator">></span><span class="token operator">&lt;</span>html<span class="token operator">></span><span class="token operator">&lt;</span>head<span class="token operator">></span><span class="token operator">&lt;</span>meta charset<span class="token operator">=</span><span class="token string">"UTF-8"</span><span class="token operator">></span><span class="token operator">&lt;</span>title<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>title<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>head<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span>window<span class="token punctuation">.</span><span class="token function-variable function">onload</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">var</span> <span class="token function-variable function">Myclick</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">btn<span class="token punctuation">,</span>fun</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">var</span> btn<span class="token operator">=</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span>btn<span class="token punctuation">)</span><span class="token punctuation">;</span>btn<span class="token punctuation">.</span>onclick<span class="token operator">=</span>fun<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">Myclick</span><span class="token punctuation">(</span><span class="token string">"quanBuxuan"</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//全选按钮，点击按钮以后，四个多选框都被选中</span><span class="token comment">//获取4个多选框</span><span class="token keyword">var</span> items <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByName</span><span class="token punctuation">(</span><span class="token string">"items"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//遍历items</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>items<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//设置四个多选框变成选中状态 </span>items<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>checked<span class="token operator">=</span><span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">Myclick</span><span class="token punctuation">(</span><span class="token string">"quanBu"</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//全选按钮，点击按钮以后，四个多选框都被选中</span><span class="token comment">//获取4个多选框</span><span class="token keyword">var</span> items <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByName</span><span class="token punctuation">(</span><span class="token string">"items"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//遍历items</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>items<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//设置四个多选框变成选中状态</span>items<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>checked<span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">Myclick</span><span class="token punctuation">(</span><span class="token string">"fXuan"</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//反选，勾选未选中，取消已选中</span><span class="token comment">//获取4个多选框</span><span class="token keyword">var</span> items <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByName</span><span class="token punctuation">(</span><span class="token string">"items"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//遍历items</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>items<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//设置四个多选框变成选中状态</span><span class="token keyword">if</span> <span class="token punctuation">(</span>items<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>checked<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>items<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>checked<span class="token operator">=</span><span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>items<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>checked<span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">Myclick</span><span class="token punctuation">(</span><span class="token string">"tiJiao"</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//提交，打印选中的元素对象</span><span class="token comment">//获取4个多选框</span><span class="token keyword">var</span> items <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByName</span><span class="token punctuation">(</span><span class="token string">"items"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//遍历items</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>items<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//设置四个多选框变成选中状态</span><span class="token keyword">if</span> <span class="token punctuation">(</span>items<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>checked<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">alert</span><span class="token punctuation">(</span>items<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span>  <span class="token operator">&lt;</span>body<span class="token operator">></span><span class="token operator">&lt;</span>p<span class="token operator">></span>你爱好的运动是？<span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span><span class="token operator">&lt;</span>span<span class="token operator">></span><span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"checkbox"</span> name<span class="token operator">=</span><span class="token string">"全部选"</span> value<span class="token operator">=</span><span class="token string">"全部/全不选"</span> <span class="token operator">/</span><span class="token operator">></span>全选<span class="token operator">/</span>全不选<span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>br<span class="token operator">></span><span class="token operator">&lt;</span>span<span class="token operator">></span><span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"checkbox"</span> name<span class="token operator">=</span><span class="token string">"items"</span> value<span class="token operator">=</span><span class="token string">"篮球"</span> <span class="token operator">/</span><span class="token operator">></span>篮球<span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span><span class="token operator">&lt;</span>span<span class="token operator">></span><span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"checkbox"</span> name<span class="token operator">=</span><span class="token string">"items"</span> value<span class="token operator">=</span><span class="token string">"足球"</span> <span class="token operator">/</span><span class="token operator">></span>足球<span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span><span class="token operator">&lt;</span>span<span class="token operator">></span><span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"checkbox"</span> name<span class="token operator">=</span><span class="token string">"items"</span> value<span class="token operator">=</span><span class="token string">"羽毛球"</span> <span class="token operator">/</span><span class="token operator">></span>羽毛球<span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span><span class="token operator">&lt;</span>span<span class="token operator">></span><span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"checkbox"</span> name<span class="token operator">=</span><span class="token string">"items"</span> value<span class="token operator">=</span><span class="token string">"乒乓球"</span> <span class="token operator">/</span><span class="token operator">></span>乒乓球<span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>br<span class="token operator">></span><span class="token operator">&lt;</span>span<span class="token operator">></span><span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"button"</span> id<span class="token operator">=</span><span class="token string">"quanBu"</span> value<span class="token operator">=</span><span class="token string">"全选"</span> <span class="token operator">/</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span><span class="token operator">&lt;</span>span<span class="token operator">></span><span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"button"</span> id<span class="token operator">=</span><span class="token string">"quanBuxuan"</span> value<span class="token operator">=</span><span class="token string">"全不选"</span> <span class="token operator">/</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span><span class="token operator">&lt;</span>span<span class="token operator">></span><span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"button"</span> id<span class="token operator">=</span><span class="token string">"fXuan"</span> value<span class="token operator">=</span><span class="token string">"反选"</span> <span class="token operator">/</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span><span class="token operator">&lt;</span>span<span class="token operator">></span><span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"button"</span> id<span class="token operator">=</span><span class="token string">"tiJiao"</span> value<span class="token operator">=</span><span class="token string">"提交"</span> <span class="token operator">/</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">></span> <span class="token operator">&lt;</span><span class="token operator">/</span>html<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="P-80-JS-DOM查询的剩余方法"><a href="#P-80-JS-DOM查询的剩余方法" class="headerlink" title="P-80.JS_DOM查询的剩余方法"></a>P-80.JS_DOM查询的剩余方法</h4><p>1）根据元素的class属性值来查询一组元素的节点对象，getElementsByClassName()可以根据class属性获取一组元素节点对象，但是该方法不支持IE8以及不支持i8及以下的浏览器</p><p>2）document.querySelector()，需要一个选择器的字符串作为参数，可以根据一个CSS选择器来获取一个元素节点对象，虽然IE8中没有getElementsByClassName()但是可以使用querySelector()代替，该方法总会返回唯一的一个元素，如果满足条件的元素有多个，那么它只会返回第一个</p><p>3）document.querySelectorAll()，该方法和document.querySelector()用法类似，不同的是它会将符合条件的元素封装到一个数组中返回</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>head<span class="token operator">></span><span class="token operator">&lt;</span>meta charset<span class="token operator">=</span><span class="token string">"UTF-8"</span><span class="token operator">></span><span class="token operator">&lt;</span>title<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>title<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span>window<span class="token punctuation">.</span><span class="token function-variable function">onload</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">var</span> div1 <span class="token operator">=</span>document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">".div1 div"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> div2<span class="token operator">=</span>document<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span><span class="token string">".div1"</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>div2<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>head<span class="token operator">></span><span class="token operator">&lt;</span>body<span class="token operator">></span><span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"div1"</span><span class="token operator">></span><span class="token operator">&lt;</span>div<span class="token operator">></span>我是div1的div<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span> <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"div1"</span><span class="token operator">></span><span class="token operator">&lt;</span>div<span class="token operator">></span>我是div1的div<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span> <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span> <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"div1"</span><span class="token operator">></span><span class="token operator">&lt;</span>div<span class="token operator">></span>我是div1的div<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span> <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span> <span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>4）在document中有一个属性body它保存的是dody的引用</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> body <span class="token operator">=</span> document<span class="token punctuation">.</span>body<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>5）document.documentElement保存的是html根标签</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> html<span class="token operator">=</span>document<span class="token punctuation">.</span>documentElement<span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>html<span class="token punctuation">)</span><span class="token punctuation">;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>6）document.all代表页面中所有的元素</p><pre class="line-numbers language-JavaScript" data-language="JavaScript"><code class="language-JavaScript">var all&#x3D;document.all;console.log(all.length); <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="P-81-JS-DOM查询的增删改方法"><a href="#P-81-JS-DOM查询的增删改方法" class="headerlink" title="P-81.JS_DOM查询的增删改方法"></a>P-81.JS_DOM查询的增删改方法</h3><p>１） document.createElement()，可以用于创建一个元素节点对象，他需要一个标签作为参数，将会根据该标签名创建元素节点对象，并将创建好的对象作为返回值返回</p><p>２） document.createTextNode（），可以用来创建一个文本节点对象，需要一个文本内容作为参数，将会根据该内容创建文本节点，并将新的节点返回</p><p>３） appendChild()，向一个父节点中添加一个新的子节点，用法：父节点.appendChild（子节点）</p><p>４）insertBefore（），可以在指定的子节点前插入新的子节点，语法：父节点.insertBefore（新节点，旧节点）</p><p>５）insertBefore（），可以在指定的子节点前插入新的子节点，语法：父节点.insertBefore（新节点，旧节点）</p><p>６）removeChild（），可以删除一个子节点，语法：父节点．removeChild(子节点)，另外：</p><p>可以通过　　子节点．parentNode.removeChild（子节点）；可以不用在获取父节点</p><p>7）使用innerHTML也可以完成DOM的增删改的相关操作，一般我们会两种方式结合使用</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//添加广州节点</span><span class="token function">MyOclik</span><span class="token punctuation">(</span><span class="token string">"zzLi"</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//获取hezi</span><span class="token keyword">var</span> btn<span class="token operator">=</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"hezi"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//创建一个广州button</span><span class="token keyword">var</span> gzBtn<span class="token operator">=</span>document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">"button"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>gzBtn<span class="token punctuation">.</span>innerHTML<span class="token operator">=</span><span class="token string">"广州"</span><span class="token punctuation">;</span>btn<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>gzBtn<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-JavaScript" data-language="JavaScript"><code class="language-JavaScript">&lt;script&gt;window.onload&#x3D;function()&#123;var MyOclik&#x3D;function(but,fun)&#123;var but &#x3D; document.getElementById(but);but.onclick&#x3D;fun;&#125;MyOclik(&quot;gzTj&quot;,function()&#123;&#x2F;* * document.createElement() * 可以用于创建一个元素节点对象 * 他需要一个标签作为参数，将会根据该标签名创建元素节点对象 * 并将创建好的对象作为返回值返回 *&#x2F;var btn &#x3D; document.createElement(&quot;button&quot;);&#x2F;* * document.createTextNode * 可以用来创建一个文本节点对象 * 需要一个文本内容作为参数，将会根据该内容创建文本节点，并将新的节点返回 *&#x2F;var gzText&#x3D;document.createTextNode(&quot;广州&quot;);&#x2F;* * appendChild() * 向一个父节点中添加一个新的子节点 * 用法：父节点.appendChild（子节点）； *&#x2F;btn.appendChild(gzText);var heZi&#x3D;document.getElementById(&quot;hezi&quot;);heZi.appendChild(btn);&#125;);MyOclik(&quot;bjQtj&quot;,function()&#123;&#x2F;&#x2F;创建一个广州buttonvar btn&#x3D;document.createElement(&quot;button&quot;);var gzText&#x3D;document.createTextNode(&quot;广州&quot;);btn.appendChild(gzText);var beij&#x3D;document.getElementById(&quot;beijing&quot;);var hezi&#x3D;document.getElementById(&quot;hezi&quot;);&#x2F;* * insertBefore（） * 可以在指定的子节点前插入新的子节点 * 语法：父节点.insertBefore（新节点，旧节点） *&#x2F;hezi.insertBefore(btn,beij)&#125;);        MyOclik(&quot;gzTbj&quot;,function()&#123;&#x2F;&#x2F;创建一个广州buttonvar btn&#x3D;document.createElement(&quot;button&quot;);var gzText&#x3D;document.createTextNode(&quot;广州&quot;);btn.appendChild(gzText);var beij&#x3D;document.getElementById(&quot;beijing&quot;);var hezi&#x3D;document.getElementById(&quot;hezi&quot;);&#x2F;* * insertBefore（） * 可以在指定的子节点前插入新的子节点 * 语法：父节点.insertBefore（新节点，旧节点） *&#x2F;hezi.replaceChild(btn,beij);&#125;);        &#x2F;&#x2F;删除北京节点MyOclik(&quot;scBj&quot;,function()&#123;&#x2F;&#x2F;获取北京节点var bj&#x3D;document.getElementById(&quot;beijing&quot;);&#x2F;&#x2F;获取hezivar btn&#x3D;document.getElementById(&quot;hezi&quot;);&#x2F;&#x2F;删除子节点btn.removeChild(bj);&#125;);&#125;&lt;&#x2F;script&gt;&lt;&#x2F;head&gt;&lt;body&gt;&lt;div id&#x3D;&quot;hezi&quot;&gt;你喜欢那个城市？&lt;&#x2F;br&gt;&lt;button id&#x3D;&quot;beijing&quot;&gt;北京&lt;&#x2F;button&gt;&lt;button&gt;上海&lt;&#x2F;button&gt;&lt;button&gt;东京&lt;&#x2F;button&gt;&lt;button&gt;首尔&lt;&#x2F;button&gt;&lt;&#x2F;br&gt;&lt;button id&#x3D;&quot;gzTj&quot;&gt;添加广州子节点&lt;&#x2F;button&gt;&lt;button id&#x3D;&quot;bjQtj&quot;&gt;在北京前边添加子节点&lt;&#x2F;button&gt;&lt;&#x2F;div&gt;&lt;&#x2F;body&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="P-82-JS-添加删除记录—删除"><a href="#P-82-JS-添加删除记录—删除" class="headerlink" title="P-82.JS_添加删除记录—删除"></a>P-82.JS_添加删除记录—删除</h4><p>1）this.parentNode.parentNode;获取a标签的父节点的父节点tr</p><p>2）confirm（）用于弹出一个带有确认和取消按钮的提示框，需要一个字符串作为参数，该字符串将会作为提示文字显示出来</p><pre class="line-numbers language-JavaScript" data-language="JavaScript"><code class="language-JavaScript">&lt;script&gt;window.onload&#x3D;function()&#123;var Myoclik&#x3D;function(btn,fun)&#123;var btn&#x3D;document.getElementById(&quot;btn&quot;);btn.onclick&#x3D;fun;&#125;&#x2F;&#x2F;点击超链接以后，删除一个员工信息&#x2F;&#x2F;获取所有超链接var allA&#x3D;document.getElementsByTagName(&quot;a&quot;);&#x2F;&#x2F;为每个超链接都绑定一个单击响应函数for (var i&#x3D;0;i&lt;allA.length;i++) &#123;allA[i].onclick&#x3D;function()&#123;&#x2F;&#x2F;点击超链接以后需要删除超链接所在的那行&#x2F;&#x2F;这里我们点击 那个超连接this就是谁&#x2F;&#x2F;获取a标签的父节点的父节点trvar tr&#x3D;this.parentNode.parentNode;&#x2F;&#x2F;删除之前弹出一个提示框&#x2F;&#x2F;confirm（）用于弹出一个带有确认和取消按钮的提示框&#x2F;&#x2F;需要一个字符串作为参数，该字符串将会作为提示文字显示出来&#x2F;&#x2F;获取需要删除的名字var td1&#x3D;tr.getElementsByTagName(&quot;td&quot;);&#x2F;&#x2F;如果用户点击确认则返回true，如果用户点击取消则返回falsevar conFirm&#x3D;confirm(&quot;确认删除&quot;+td1[0].innerHTML+&quot;吗？&quot;);&#x2F;&#x2F;如果用户点击if(conFirm)&#123;tr.remove(tr);&#125;&#125;&#125;&#125;&lt;&#x2F;script&gt;&lt;&#x2F;head&gt;&lt;body&gt;&lt;table border&#x3D;&quot;1&quot; id&#x3D;&quot;employeeTable&quot;&gt;&lt;tr&gt;&lt;td&gt;name&lt;&#x2F;td&gt;&lt;td&gt;email&lt;&#x2F;td&gt;&lt;td&gt;Salary&lt;&#x2F;td&gt;&lt;td&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;长沙&lt;&#x2F;td&gt;&lt;td&gt;changSha@cs.com&lt;&#x2F;td&gt;&lt;td&gt;3000&lt;&#x2F;td&gt;&lt;td&gt;&lt;a href&#x3D;&quot;#&quot;&gt;delete&lt;&#x2F;a&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;河南&lt;&#x2F;td&gt;&lt;td&gt;tom@tom.com&lt;&#x2F;td&gt;&lt;td&gt;5000&lt;&#x2F;td&gt;&lt;td&gt;&lt;a href&#x3D;&quot;#&quot;&gt;delete&lt;&#x2F;a&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;湖北&lt;&#x2F;td&gt;&lt;td&gt;hubei@huBei.com&lt;&#x2F;td&gt;&lt;td&gt;8000&lt;&#x2F;td&gt;&lt;td&gt;&lt;a href&#x3D;&quot;#&quot;&gt;delete&lt;&#x2F;a&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;table&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="P-83-JS-添加删除记录—添加"><a href="#P-83-JS-添加删除记录—添加" class="headerlink" title="P-83.JS_添加删除记录—添加"></a>P-83.JS_添加删除记录—添加</h4><pre class="line-numbers language-HTML" data-language="HTML"><code class="language-HTML">&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt;&lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;&lt;title&gt;&lt;&#x2F;title&gt;&lt;script&gt;window.onload&#x3D;function()&#123;var delA &#x3D; function() &#123;&#x2F;&#x2F;点击超链接以后需要删除超链接所在的那行&#x2F;&#x2F;这里我们点击 那个超连接this就是谁&#x2F;&#x2F;获取a标签的父节点的父节点trvar tr&#x3D;this.parentNode.parentNode;&#x2F;&#x2F;删除之前弹出一个提示框&#x2F;&#x2F;confirm（）用于弹出一个带有确认和取消按钮的提示框&#x2F;&#x2F;需要一个字符串作为参数，该字符串将会作为提示文字显示出来&#x2F;&#x2F;获取需要删除的名字var td1&#x3D;tr.getElementsByTagName(&quot;td&quot;);&#x2F;&#x2F;如果用户点击确认则返回true，如果用户点击取消则返回falsevar conFirm&#x3D;confirm(&quot;确认删除&quot;+td1[0].innerHTML+&quot;吗？&quot;);&#x2F;&#x2F;如果用户点击if(conFirm)&#123;tr.remove(tr);&#125;&#125;&#x2F;&#x2F;点击超链接以后，删除一个员工信息&#x2F;&#x2F;获取所有超链接var allA&#x3D;document.getElementsByTagName(&quot;a&quot;);&#x2F;&#x2F;为每个超链接都绑定一个单击响应函数for (var i&#x3D;0;i&lt;allA.length;i++) &#123;allA[i].onclick&#x3D;delA;&#125;&#x2F;&#x2F;为提交按钮绑定一个单击响应函数var submitBtn&#x3D;document.getElementById(&quot;submitBtn&quot;);submitBtn.onclick&#x3D;function()&#123;var sbmName&#x3D;document.getElementById(&quot;sbmName&quot;).value;var sbmEmail&#x3D;document.getElementById(&quot;sbmEmail&quot;).value;var sbmSalary&#x3D;document.getElementById(&quot;sbmSalary&quot;).value;&#x2F;&#x2F;需要将我们获取到的信息保存到tr中&#x2F;&#x2F;创建一个trvar tr&#x3D;document.createElement(&quot;tr&quot;);&#x2F;&#x2F;创建4个tdvar nameTd&#x3D;document.createElement(&quot;td&quot;);var emailTd&#x3D;document.createElement(&quot;td&quot;);var salaryTd&#x3D;document.createElement(&quot;td&quot;);var aTd&#x3D;document.createElement(&quot;td&quot;);&#x2F;&#x2F;创建一个a元素var a&#x3D;document.createElement(&quot;a&quot;);&#x2F;&#x2F;创建文本节点var nameText&#x3D;document.createTextNode(sbmName);var emailText&#x3D;document.createTextNode(sbmEmail);var salaryText&#x3D;document.createTextNode(sbmSalary);var dleText&#x3D;document.createTextNode(&quot;delete&quot;); &#x2F;&#x2F;将文本节点添加到td中nameTd.appendChild(nameText);emailTd.appendChild(emailText);salaryTd.appendChild(salaryText)a.href&#x3D;&quot;#&quot;;&#x2F;&#x2F;向a中添加文本a.appendChild(dleText)&#x2F;&#x2F;将a添加到td中aTd.appendChild(a);&#x2F;&#x2F;将td添加到tr中tr.appendChild(nameTd);tr.appendChild(emailTd);tr.appendChild(salaryTd);tr.appendChild(aTd);&#x2F;&#x2F;获取table&#x2F;&#x2F;获取tbodyvar eptable&#x3D;document.getElementById(&quot;employeeTable&quot;);var tbody &#x3D; eptable.getElementsByTagName(&quot;tbody&quot;)[0];tbody.appendChild(tr);&#x2F;&#x2F;为a在绑定一次响应函数a.onclick&#x3D;delA;&#125;&#125;&lt;&#x2F;script&gt;&lt;&#x2F;head&gt;&lt;body&gt;&lt;table border&#x3D;&quot;1&quot; id&#x3D;&quot;employeeTable&quot;&gt;&lt;tr&gt;&lt;td&gt;name&lt;&#x2F;td&gt;&lt;td&gt;email&lt;&#x2F;td&gt;&lt;td&gt;Salary&lt;&#x2F;td&gt;&lt;td&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;长沙&lt;&#x2F;td&gt;&lt;td&gt;changSha@cs.com&lt;&#x2F;td&gt;&lt;td&gt;3000&lt;&#x2F;td&gt;&lt;td&gt;&lt;a href&#x3D;&quot;#&quot;&gt;delete&lt;&#x2F;a&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;河南&lt;&#x2F;td&gt;&lt;td&gt;tom@tom.com&lt;&#x2F;td&gt;&lt;td&gt;5000&lt;&#x2F;td&gt;&lt;td&gt;&lt;a href&#x3D;&quot;#&quot;&gt;delete&lt;&#x2F;a&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;湖北&lt;&#x2F;td&gt;&lt;td&gt;hubei@huBei.com&lt;&#x2F;td&gt;&lt;td&gt;8000&lt;&#x2F;td&gt;&lt;td&gt;&lt;a href&#x3D;&quot;#&quot;&gt;delete&lt;&#x2F;a&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;table&gt;&lt;br &#x2F;&gt;&lt;br &#x2F;&gt;&lt;br &#x2F;&gt;&lt;br &#x2F;&gt;&lt;table border&#x3D;&quot;1&quot;&gt;添加员工&lt;tr&gt;&lt;td&gt;Name:&lt;input id&#x3D;&quot;sbmName&quot; type&#x3D;&quot;text&quot;&#x2F;&gt;&lt;&#x2F;td&gt; &lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;Email:&lt;input id&#x3D;&quot;sbmEmail&quot; type&#x3D;&quot;text&quot;&#x2F;&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;Salary:&lt;input id&#x3D;&quot;sbmSalary&quot;  type&#x3D;&quot;text&quot;&#x2F;&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td style&#x3D;&quot;text-align: center;&quot;&gt;&lt;input id&#x3D;&quot;submitBtn&quot; type&#x3D;&quot;button&quot;value&#x3D;&quot;Submit&quot;&#x2F;&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;table&gt;&lt;&#x2F;body&gt;&lt;&#x2F;html&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>修改版</strong></p><pre class="line-numbers language-HTML" data-language="HTML"><code class="language-HTML">&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt;&lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;&lt;title&gt;&lt;&#x2F;title&gt;&lt;script&gt;window.onload&#x3D;function()&#123;var delA &#x3D; function() &#123;&#x2F;&#x2F;点击超链接以后需要删除超链接所在的那行&#x2F;&#x2F;这里我们点击 那个超连接this就是谁&#x2F;&#x2F;获取a标签的父节点的父节点trvar tr&#x3D;this.parentNode.parentNode;&#x2F;&#x2F;删除之前弹出一个提示框&#x2F;&#x2F;confirm（）用于弹出一个带有确认和取消按钮的提示框&#x2F;&#x2F;需要一个字符串作为参数，该字符串将会作为提示文字显示出来&#x2F;&#x2F;获取需要删除的名字var td1&#x3D;tr.getElementsByTagName(&quot;td&quot;);&#x2F;&#x2F;如果用户点击确认则返回true，如果用户点击取消则返回falsevar conFirm&#x3D;confirm(&quot;确认删除&quot;+td1[0].innerHTML+&quot;吗？&quot;);&#x2F;&#x2F;如果用户点击if(conFirm)&#123;tr.remove(tr);&#125;&#125;&#x2F;&#x2F;点击超链接以后，删除一个员工信息&#x2F;&#x2F;获取所有超链接var allA&#x3D;document.getElementsByTagName(&quot;a&quot;);&#x2F;&#x2F;为每个超链接都绑定一个单击响应函数for (var i&#x3D;0;i&lt;allA.length;i++) &#123;allA[i].onclick&#x3D;delA;&#125;&#x2F;&#x2F;为提交按钮绑定一个单击响应函数var submitBtn&#x3D;document.getElementById(&quot;submitBtn&quot;);submitBtn.onclick&#x3D;function()&#123;var sbmName&#x3D;document.getElementById(&quot;sbmName&quot;).value;var sbmEmail&#x3D;document.getElementById(&quot;sbmEmail&quot;).value;var sbmSalary&#x3D;document.getElementById(&quot;sbmSalary&quot;).value;&#x2F;&#x2F;创建一个trvar tr&#x3D;document.createElement(&quot;tr&quot;);tr.innerHTML&#x3D;&quot;&lt;td&gt;&quot;+sbmName+&quot;&lt;&#x2F;td&gt;&quot;+&quot;&lt;td&gt;&quot;+sbmEmail+&quot;&lt;&#x2F;td&gt;&quot;+&quot;&lt;td&gt;&quot;+sbmSalary+&quot;&lt;&#x2F;td&gt;&quot;+&quot;&lt;td&gt;&lt;a href&#x3D;&#39;#&#39;&gt;delete&lt;&#x2F;a&gt;&lt;&#x2F;td&gt;&quot;; var a &#x3D; tr.getElementsByTagName(&quot;a&quot;)[0];a.onclick&#x3D;delA;&#x2F;&#x2F;获取tablevar eptable&#x3D;document.getElementById(&quot;employeeTable&quot;);                    &#x2F;&#x2F;获取tbodyvar tbody &#x3D; eptable.getElementsByTagName(&quot;tbody&quot;)[0];                    &#x2F;&#x2F;将tr添加到tbodyzhotbody.appendChild(tr);&#x2F;&#x2F;为a在绑定一次响应函数a.onclick&#x3D;delA;&#125;&#125;&lt;&#x2F;script&gt;&lt;&#x2F;head&gt;&lt;body&gt;&lt;table border&#x3D;&quot;1&quot; id&#x3D;&quot;employeeTable&quot;&gt;&lt;tr&gt;&lt;td&gt;name&lt;&#x2F;td&gt;&lt;td&gt;email&lt;&#x2F;td&gt;&lt;td&gt;Salary&lt;&#x2F;td&gt;&lt;td&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;长沙&lt;&#x2F;td&gt;&lt;td&gt;changSha@cs.com&lt;&#x2F;td&gt;&lt;td&gt;3000&lt;&#x2F;td&gt;&lt;td&gt;&lt;a href&#x3D;&quot;#&quot;&gt;delete&lt;&#x2F;a&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;河南&lt;&#x2F;td&gt;&lt;td&gt;tom@tom.com&lt;&#x2F;td&gt;&lt;td&gt;5000&lt;&#x2F;td&gt;&lt;td&gt;&lt;a href&#x3D;&quot;#&quot;&gt;delete&lt;&#x2F;a&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;湖北&lt;&#x2F;td&gt;&lt;td&gt;hubei@huBei.com&lt;&#x2F;td&gt;&lt;td&gt;8000&lt;&#x2F;td&gt;&lt;td&gt;&lt;a href&#x3D;&quot;#&quot;&gt;delete&lt;&#x2F;a&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;table&gt;&lt;br &#x2F;&gt;&lt;br &#x2F;&gt;&lt;br &#x2F;&gt;&lt;br &#x2F;&gt;&lt;table border&#x3D;&quot;1&quot;&gt;添加员工&lt;tr&gt;&lt;td&gt;Name:&lt;input id&#x3D;&quot;sbmName&quot; type&#x3D;&quot;text&quot;&#x2F;&gt;&lt;&#x2F;td&gt; &lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;Email:&lt;input id&#x3D;&quot;sbmEmail&quot; type&#x3D;&quot;text&quot;&#x2F;&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;Salary:&lt;input id&#x3D;&quot;sbmSalary&quot;  type&#x3D;&quot;text&quot;&#x2F;&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td style&#x3D;&quot;text-align: center;&quot;&gt;&lt;input id&#x3D;&quot;submitBtn&quot; type&#x3D;&quot;button&quot;value&#x3D;&quot;Submit&quot;&#x2F;&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;table&gt;&lt;&#x2F;body&gt;&lt;&#x2F;html&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="P-84-JS-操作内联样式"><a href="#P-84-JS-操作内联样式" class="headerlink" title="P-84.JS_操作内联样式"></a>P-84.JS_操作内联样式</h4><p>1）通过JS修改元素样式：</p><p>语法：元素.style.样式=样式值，通过style属性设置和读取的都是内联样式，它<strong>无法读取样式表里面的样式</strong></p><p>2）注意：如果CSS的样式中含有-，这种名称在JS中是不合法的比如backgreound-color，需要将这种样式名修改为驼峰命名法，去掉-，然后将-后的字母大写</p><p>3）我们通过style属性设置的样式都是内联样式，而内联样式有较高的优先级，所以通过JS修改的样式往往会立即显示 </p><p>4）但是如果在样式中写了！important，则此时样式会有最高的优先级，即使通过JS也不能覆盖该样式，此时将会导致JS修改样式失效，所以尽量不要为样式添加!important</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css"><span class="token selector">#rmake</span><span class="token punctuation">&#123;</span><span class="token property">width</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span><span class="token property">height</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span><span class="token property">background-color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">window<span class="token punctuation">.</span><span class="token function-variable function">onload</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//获取rmake</span><span class="token keyword">var</span> remake<span class="token operator">=</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"rmake"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//绑定单击响应函数 </span><span class="token keyword">var</span> bnt1<span class="token operator">=</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"bnt1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>bnt1<span class="token punctuation">.</span><span class="token function-variable function">onclick</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//语法：元素.style.样式=样式值</span>rmake<span class="token punctuation">.</span>style<span class="token punctuation">.</span>width<span class="token operator">=</span><span class="token string">"50px"</span><span class="token punctuation">;</span><span class="token comment">//注意：如果CSS的样式中含有-，</span><span class="token comment">//这种名称在JS中是不合法的比如backgreound-color</span><span class="token comment">//需要将这种样式名修改为驼峰命名法，</span><span class="token comment">//去掉-，然后将-后的字母大写</span>rmake<span class="token punctuation">.</span>style<span class="token punctuation">.</span>backgroundColor<span class="token operator">=</span><span class="token string">"yellow"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>bnt1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>点我一下<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>rmake<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="P-85-JS-获取元素的样式"><a href="#P-85-JS-获取元素的样式" class="headerlink" title="P-85.JS_获取元素的样式"></a>P-85.JS_获取元素的样式</h4><p>1）获取元素的当前显示的样式</p><p>语法：元素.currentStyle.样式名</p><p>它可以用来读取当前元素正在显示的样式，如果当前元素没有设置该样式,则获取它的默认值（只支持IE浏览器，不建议使用）</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//语法：元素.currentStyle.样式名</span><span class="token function">alert</span><span class="token punctuation">(</span>bntStyle<span class="token punctuation">.</span>currentStyle<span class="token punctuation">.</span>width<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>2）getComputedStyle（）这个方法来获取元素当前的样式，这个方法是window的方法，可以直接使用（不支持IE８及以下版本）</p><p>​        该方法需要两个参数</p><p>​                第一个：要获取样式的元素</p><p>​                第二个：可以传递一个伪元素，一般都传null</p><p>​        该方法会返回一个对象，对象中封装了当前元素对应的样式，可以通过对象.样式名来读取样式，如果获取的样式没有设置，则会获取到真实的值，而不是默认值；比如：没有设置width，它不会获取auto，而是一个长度</p><p>​        注意：通过currentStyle和getComputedStyle（）读取到的样式都是只读的，不能修改，如果要修改必须通过style属性</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//该方法需要两个参数,第一个：要获取样式的元素,第二个：可以传递一个伪元素，一般都传null.对象</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token function">getComputedStyle</span><span class="token punctuation">(</span>bntStyle<span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">.</span>backgroundColor<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>3）定义一个函数，用来获取指定元素的当前的样式</p><p>参数：obj       要获取样式的元素</p><p>​            name   要获取的样式名</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css"><span class="token selector">#bntStyle</span><span class="token punctuation">&#123;</span><span class="token property">width</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span><span class="token property">height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span><span class="token property">background-color</span><span class="token punctuation">:</span>yellow <span class="token punctuation">;</span><span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"><span class="token comment">//在html加载前先加载script</span>window<span class="token punctuation">.</span><span class="token function-variable function">onload</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//创建一个getStyle方法</span><span class="token comment">//传递两个参数，需要获取元素和需要获取元素的样式</span><span class="token keyword">var</span> <span class="token function-variable function">getStyle</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">obj<span class="token punctuation">,</span>name</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//判断该浏览器是否含有getComputedStyle方法，加window表示属性，不加表示变量</span><span class="token comment">//变量如果没找到会报错，属性没找到会返回undefined</span><span class="token keyword">if</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span>getComputedStyle<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//正常浏览器的方式，具有getComputedStyle()方法</span><span class="token keyword">return</span> <span class="token function">getComputedStyle</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">[</span>name<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span><span class="token comment">//IE8的方式，没有getComputedStyle()方法</span><span class="token keyword">return</span> obj<span class="token punctuation">.</span>currentStyle<span class="token punctuation">[</span>name<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//获取bnt</span><span class="token keyword">var</span> btn<span class="token operator">=</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"bnt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//获取bntStyle</span><span class="token keyword">var</span> bntStyle<span class="token operator">=</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"bntStyle"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//添加单击响应函数 </span>btn<span class="token punctuation">.</span><span class="token function-variable function">onclick</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">var</span> s<span class="token operator">=</span> <span class="token function">getStyle</span><span class="token punctuation">(</span>bntStyle<span class="token punctuation">,</span><span class="token string">"width"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">alert</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>bnt<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>点击一下<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>bntStyle<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="P-86-JS-其他元素相关属性"><a href="#P-86-JS-其他元素相关属性" class="headerlink" title="P-86.JS_其他元素相关属性"></a>P-86.JS_其他元素相关属性</h4><p>1）clientHeight、clientWidth这两个属性可以获取元素的可见宽度和高度，这些属性都是不带px的，返回都是一个数字，可以直接进行计算，会获取元素的宽度和高度，包括内容区和边距，这些属性都是只读的不能修改。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">btn1<span class="token punctuation">.</span><span class="token function-variable function">onclick</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//获取元素的可见高度</span><span class="token function">alert</span><span class="token punctuation">(</span>btn<span class="token punctuation">.</span>clientHeight<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//获取元素的可见宽度</span><span class="token function">alert</span><span class="token punctuation">(</span>btn<span class="token punctuation">.</span>clientWidth<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2）offsetHeight、offsetWidth可以获取元素整个的宽度和高度，包括内容区、内边距、和边框</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">btn1<span class="token punctuation">.</span><span class="token function-variable function">onclick</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//返回元素的可见高度</span><span class="token function">alert</span><span class="token punctuation">(</span>btn<span class="token punctuation">.</span>offsetHeight<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//返回元素的可见宽度</span><span class="token function">alert</span><span class="token punctuation">(</span>btn<span class="token punctuation">.</span>offsetWidth<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3）offsetParent可以获取当前元素的定位父元素，会获取到离当前元素最近的开启了定位的祖先元素,如果所有的祖先元素都没有开启定位，则会返回body</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">btn1<span class="token punctuation">.</span><span class="token function-variable function">onclick</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//可以用来获取当前元素的定位父元素</span><span class="token function">alert</span><span class="token punctuation">(</span>btn<span class="token punctuation">.</span>offsetParent<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"div2"</span> style<span class="token operator">=</span><span class="token string">"position: relative;"</span><span class="token operator">></span><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"btnStyle"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>4）offsetLeft、当前元素相对定位父元素的水平偏移量，offsetTop、当前元素相对定位父元素的垂直偏移量</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">#div2<span class="token punctuation">&#123;</span>padding<span class="token operator">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>btn1<span class="token punctuation">.</span><span class="token function-variable function">onclick</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//当前元素相对定位父元素的水平偏移量</span><span class="token function">alert</span><span class="token punctuation">(</span>btn<span class="token punctuation">.</span>offsetLeft<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"div2"</span> style<span class="token operator">=</span><span class="token string">"position: relative;"</span><span class="token operator">></span><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"btnStyle"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>5)scrollHeight、获取元素整个滚动区域的高度，scrollWidth、获取元素整个滚动区域的宽度</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">btn<span class="token operator">=</span>document<span class="token punctuation">.</span><span class="token function-variable function">onclick</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//获取元素整个滚动区域的高度</span><span class="token comment">//alert(box4.scrollHeight);</span><span class="token comment">//获取元素整个滚动区域的宽度</span><span class="token function">alert</span><span class="token punctuation">(</span>box4<span class="token punctuation">.</span>scrollWidth<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>6)scrollLeft、获取水平滚动条滚动的距离，scrollTop、获取垂直滚动条滚动的距离</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">btn<span class="token operator">=</span>document<span class="token punctuation">.</span><span class="token function-variable function">onclick</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">var</span> sum <span class="token operator">=</span>box4<span class="token punctuation">.</span>clientHeight<span class="token punctuation">;</span><span class="token keyword">var</span> nam<span class="token operator">=</span>box4<span class="token punctuation">.</span>scrollHeight<span class="token operator">-</span>box4<span class="token punctuation">.</span>scrollTop<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//当sum==nam，满足条件 说明垂直滚动条到底部了</span><span class="token keyword">var</span> um <span class="token operator">=</span> box4<span class="token punctuation">.</span>clientWidth<span class="token punctuation">;</span><span class="token keyword">var</span> nm <span class="token operator">=</span> box4<span class="token punctuation">.</span>scrollWidth <span class="token operator">-</span>box4<span class="token punctuation">.</span>scrollLeft<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//当um==am，满足条件 说明水平滚动条到底部了</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>7）滚动条（注册协议练习）</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token comment">//在加载html前，先加载JavaScript</span>window<span class="token punctuation">.</span><span class="token function-variable function">onload</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//获取inof</span><span class="token keyword">var</span> inof <span class="token operator">=</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"inof"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//获取input标签</span><span class="token keyword">var</span> inpt <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">"input"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//为inof添加滚轮事件</span>inof<span class="token punctuation">.</span><span class="token function-variable function">onscroll</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//当垂直滚动条滚动大于1800时，执行以下操作</span><span class="token keyword">if</span> <span class="token punctuation">(</span>inof<span class="token punctuation">.</span>scrollTop<span class="token operator">></span><span class="token number">1800</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//disabled属性可以设置一个元素是否禁用</span><span class="token comment">//如果设置为true则元素禁用，如果为false则元素可用</span>inpt<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>disabled<span class="token operator">=</span><span class="token boolean">false</span><span class="token punctuation">;</span>inpt<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>disabled<span class="token operator">=</span><span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="P-87-JS-事件对象"><a href="#P-87-JS-事件对象" class="headerlink" title="P-87.JS_事件对象"></a>P-87.JS_事件对象</h4><p>1）onmousemove、事件对象：当事件的响应函数被触发时，浏览器每次都会将一个事件对象作为实参传递进响应函数，在事件对象这种封装了当前事件相关的一切信息，比如：鼠标的坐标 键盘那个键被按下，鼠标滚轮滚动的方向</p><p>2）clientX、获取鼠标指针的水平坐标，clientY获取鼠标指针的垂直坐标</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token comment">//在加载thtml前先加载script</span>window<span class="token punctuation">.</span><span class="token function-variable function">onload</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//当鼠标在max中移动时，在mix中显示鼠标的坐标</span><span class="token keyword">var</span> max <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"max"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> mix <span class="token operator">=</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"mix"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/*onmousemove该事件将会在鼠标在元素中移动时被触发事件对象：当事件的响应函数被触发时，浏览器每次都会将一个事件对象作为实参传递进响应函数，在事件对象这种封装了当前事件相关的一切信息，比如：鼠标的坐标 键盘那个键被按下，鼠标滚轮滚动的方向....*/</span>max<span class="token punctuation">.</span><span class="token function-variable function">onmousemove</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">/*解决事件兼容性问题在ie8中，响应函数被触发时，浏览器不会被传递事件对象，在ie8及以下的浏览器中，是事件对象作为window对象的属性保存的*/</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>event<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>event<span class="token operator">=</span>window<span class="token punctuation">.</span>event<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//可以写成“event=event||window.event;”</span><span class="token comment">//clientX获取鼠标指针的水平坐标</span><span class="token keyword">var</span> x<span class="token operator">=</span> event<span class="token punctuation">.</span>clientX<span class="token punctuation">;</span><span class="token comment">//clientY获取鼠标指针的垂直坐标</span><span class="token keyword">var</span> y<span class="token operator">=</span>event<span class="token punctuation">.</span>clientY<span class="token punctuation">;</span> mix<span class="token punctuation">.</span>innerHTML<span class="token operator">=</span><span class="token string">"x="</span><span class="token operator">+</span>x<span class="token operator">+</span><span class="token string">",y="</span><span class="token operator">+</span>y<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="P-88-JS-div跟随鼠标移动练习"><a href="#P-88-JS-div跟随鼠标移动练习" class="headerlink" title="P-88.JS_div跟随鼠标移动练习"></a>P-88.JS_div跟随鼠标移动练习</h4><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css"><span class="token selector">#rad</span><span class="token punctuation">&#123;</span><span class="token property">width</span><span class="token punctuation">:</span> 150px<span class="token punctuation">;</span><span class="token property">height</span><span class="token punctuation">:</span> 150px<span class="token punctuation">;</span><span class="token property">background-color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span><span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">window<span class="token punctuation">.</span><span class="token function-variable function">onload</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">var</span> rad<span class="token operator">=</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"rad"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//添加鼠标移动事件</span>document<span class="token operator">=</span><span class="token function-variable function">onmousemove</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//获取鼠标的坐标</span><span class="token comment">//解决兼容性问题</span>event <span class="token operator">=</span> event<span class="token operator">||</span>window<span class="token punctuation">.</span>event<span class="token punctuation">;</span><span class="token keyword">var</span> left<span class="token operator">=</span> event<span class="token punctuation">.</span>clientX<span class="token punctuation">;</span><span class="token keyword">var</span> top<span class="token operator">=</span> event<span class="token punctuation">.</span>clientY<span class="token punctuation">;</span><span class="token comment">//设置div的偏移量</span>rad<span class="token punctuation">.</span>style<span class="token punctuation">.</span>left<span class="token operator">=</span>left<span class="token operator">+</span><span class="token string">"px"</span><span class="token punctuation">;</span>rad<span class="token punctuation">.</span>style<span class="token punctuation">.</span>top<span class="token operator">=</span>top<span class="token operator">+</span><span class="token string">"px"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>rad<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="P-89-JS-事件的冒泡"><a href="#P-89-JS-事件的冒泡" class="headerlink" title="P-89.JS_事件的冒泡"></a>P-89.JS_事件的冒泡</h4><p>1）cancelBubble、冒泡，设置或返回事件是否应该向上层级进行传播。可以将事件对象的cancelBubble设置为true，即可取消冒泡，“注意：必须为同一事件，才可冒泡”</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css"><span class="token selector">#box1</span><span class="token punctuation">&#123;</span><span class="token property">width</span><span class="token punctuation">:</span> 150px<span class="token punctuation">;</span><span class="token property">height</span><span class="token punctuation">:</span> 150px<span class="token punctuation">;</span><span class="token property">background-color</span><span class="token punctuation">:</span> #7FFFD4<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">#s1</span><span class="token punctuation">&#123;</span><span class="token property">width</span><span class="token punctuation">:</span> 30px<span class="token punctuation">;</span><span class="token property">height</span><span class="token punctuation">:</span>30px<span class="token punctuation">;</span><span class="token property">background-color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"><span class="token comment">//在加载HTML前先加载script</span>window<span class="token punctuation">.</span><span class="token function-variable function">onload</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//获取box1</span><span class="token keyword">var</span> box1<span class="token operator">=</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"box1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//获取s1</span><span class="token keyword">var</span> s1<span class="token operator">=</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"s1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//为s1添加点击事件</span>s1<span class="token punctuation">.</span><span class="token function-variable function">onclick</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>event<span class="token operator">=</span>event<span class="token operator">||</span>window<span class="token punctuation">.</span>event<span class="token punctuation">;</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"我是s1的单击响应函数"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//取消冒泡</span><span class="token comment">//可以将事件对象的cancelBubble设置为true，即可取消冒泡</span>event<span class="token punctuation">.</span>cancelBubble<span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">//为box1添加点击事件</span>box1<span class="token punctuation">.</span><span class="token function-variable function">onclick</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"我是div的单击响应函数"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>box1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>div区域<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>s1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>span区域<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="P-90-JS-事件的委派"><a href="#P-90-JS-事件的委派" class="headerlink" title="P-90.JS_事件的委派"></a>P-90.JS_事件的委派</h4><p>1）我们希望，只绑定一次事件，即可应用到多个的元素上，即使元素是后添加的<br>    事件的委派：<strong>指将事件统一绑定给元素的共同的祖先元素</strong>，这样当后代元素上的事件触发时，会一直冒泡到祖先元素，事件委派是利用了冒泡，通过委派可以减少事件绑定的次数，提高程序的性能。</p><p>2）target、表示的触发事件对象 ；返回触发事件的元素。（点击谁返回的就是谁）</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">window<span class="token punctuation">.</span><span class="token function-variable function">onload</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//点击按钮后添加一个超链接</span><span class="token keyword">var</span> btn1<span class="token operator">=</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"btn1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>btn1<span class="token punctuation">.</span><span class="token function-variable function">onclick</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">var</span> li<span class="token operator">=</span>document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">"li"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> li<span class="token punctuation">.</span>innerHTML<span class="token operator">=</span><span class="token string">"&lt;a href='javascript:;' class='link'>我是新添加的超链接&lt;/a>"</span><span class="token punctuation">;</span>u1<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>li<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">//为每一个超链接都绑定一个单击响应函数</span><span class="token comment">//获取所以的a</span><span class="token keyword">var</span> a<span class="token operator">=</span>document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//我们希望，只绑定一次事件，即可应用到多个的元素上，即使元素是后添加的</span><span class="token comment">/*事件的委派：指将事件统一绑定给元素的共同的祖先元素，这样当后代元素上的事件触发时，会一直冒泡到祖先元素，事件委派是利用了冒泡，通过委派可以减少事件绑定的次数，提高程序的性能*/</span><span class="token keyword">var</span> u1<span class="token operator">=</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"u1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//为ul绑定一个单击响应函数</span>u1<span class="token punctuation">.</span><span class="token function-variable function">onclick</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>event<span class="token operator">=</span>event<span class="token operator">||</span>window<span class="token punctuation">.</span>event<span class="token punctuation">;</span><span class="token comment">/*target-event中的target表示的触发事件对象 */</span><span class="token comment">//如果触发事件的对象是我们期望的元素，则执行否则不执行</span><span class="token keyword">if</span> <span class="token punctuation">(</span>event<span class="token punctuation">.</span>target<span class="token punctuation">.</span>className<span class="token operator">==</span><span class="token string">"link"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"我是ul的单击响应函数"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>btn1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>添加<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>u1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>javascript:;<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>link<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>超链接1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>javascript:;<span class="token punctuation">"</span></span>  <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>link<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>超链接2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>javascript:;<span class="token punctuation">"</span></span>  <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>link<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>超链接3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>javascript:;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>超链接4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="P-91-JS-拖拽"><a href="#P-91-JS-拖拽" class="headerlink" title="P-91.JS_拖拽"></a>P-91.JS_拖拽</h3><p>1）onmousedown、当鼠标按下触发事件</p><p>2）onmousemove、当鼠标移动时触发事件</p><p>3）onmouseup、当鼠标松开时触发事件</p><p>注意：当鼠标按下触发事件，松开时onmousedown，onmouseup该方法无存在的意义，应该取消掉。</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css"><span class="token selector">#box1</span><span class="token punctuation">&#123;</span><span class="token property">width</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span><span class="token property">height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span><span class="token property">background-color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span><span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">#box2</span><span class="token punctuation">&#123;</span><span class="token property">width</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span><span class="token property">height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span><span class="token property">background-color</span><span class="token punctuation">:</span> yellow<span class="token punctuation">;</span><span class="token property">top</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span><span class="token property">left</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span><span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">window<span class="token punctuation">.</span><span class="token function-variable function">onload</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//获取box1</span><span class="token keyword">var</span> box1<span class="token operator">=</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"box1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//为鼠标添加点击事件</span><span class="token comment">//当鼠标在被拖拽元素上按下时，开始拖拽onmousedown</span>box1<span class="token punctuation">.</span><span class="token function-variable function">onmousedown</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//当鼠标移动时被拖拽元素跟随鼠标移动 onmousemove</span><span class="token comment">//为document绑定一个onmousemove事件</span>document<span class="token punctuation">.</span><span class="token function-variable function">onmousemove</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>event <span class="token operator">=</span>event<span class="token operator">||</span>window<span class="token punctuation">.</span>event<span class="token punctuation">;</span><span class="token keyword">var</span> left<span class="token operator">=</span>event<span class="token punctuation">.</span>clientX<span class="token punctuation">;</span><span class="token keyword">var</span> top<span class="token operator">=</span>event<span class="token punctuation">.</span>clientY<span class="token punctuation">;</span>box1<span class="token punctuation">.</span>style<span class="token punctuation">.</span>left<span class="token operator">=</span>left<span class="token operator">+</span><span class="token string">"px"</span><span class="token punctuation">;</span>box1<span class="token punctuation">.</span>style<span class="token punctuation">.</span>top<span class="token operator">=</span>top<span class="token operator">+</span><span class="token string">"px"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">//为document绑定一个鼠标松开事件</span>document<span class="token punctuation">.</span><span class="token function-variable function">onmouseup</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//当鼠标松开时，被拖拽元素固定在当前位置 onmouseup</span><span class="token comment">//取消document的onmousemove事件</span>document<span class="token punctuation">.</span>onmousemove<span class="token operator">=</span><span class="token keyword">null</span><span class="token punctuation">;</span>document<span class="token punctuation">.</span>onmouseup<span class="token operator">=</span><span class="token keyword">null</span><span class="token punctuation">;</span><span class="token comment">//注意，onmousemove、onmouseup在鼠标按下才有效</span><span class="token comment">//当鼠标松开都没有存在的意义，应该取消掉</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>box1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>box2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="P-92-JS-拖拽（鼠标位置处理）"><a href="#P-92-JS-拖拽（鼠标位置处理）" class="headerlink" title="P-92.JS_拖拽（鼠标位置处理）"></a>P-92.JS_拖拽（鼠标位置处理）</h4><p>1）求出鼠标当前位置偏移量，div的偏移量 鼠标.clentX-元素.offsetLeft，div的偏移量 鼠标.clentY-元素.offsetTop </p><pre class="line-numbers language-HTML" data-language="HTML"><code class="language-HTML">&lt;html&gt;&lt;head&gt;&lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;&lt;title&gt;&lt;&#x2F;title&gt;&lt;style&gt;#box1&#123;width: 100px;height: 100px;background-color: red;position: absolute;&#125;#box2&#123;width: 100px;height: 100px;background-color: yellow;top: 200px;left: 200px;position: absolute;&#125;&lt;&#x2F;style&gt;&lt;script&gt;window.onload&#x3D;function()&#123;&#x2F;&#x2F;获取box1var box1&#x3D;document.getElementById(&quot;box1&quot;);&#x2F;&#x2F;为鼠标添加点击事件&#x2F;&#x2F;当鼠标在被拖拽元素上按下时，开始拖拽onmousedownbox1.onmousedown&#x3D;function(event)&#123;event&#x3D;event||window.event;&#x2F;&#x2F;div的偏移量 鼠标.clentX-元素.offsetLeft&#x2F;&#x2F;div的偏移量 鼠标.clentY-元素.offsetTop var ol&#x3D; event.clientX-box1.offsetLeft;var ot&#x3D;event.clientY-box1.offsetTop;&#x2F;&#x2F;当鼠标移动时被拖拽元素跟随鼠标移动 onmousemove&#x2F;&#x2F;为document绑定一个onmousemove事件document.onmousemove&#x3D;function(event)&#123;event &#x3D;event||window.event;var left&#x3D;event.clientX-ol;var top&#x3D;event.clientY-ot;box1.style.left&#x3D;left+&quot;px&quot;;box1.style.top&#x3D;top+&quot;px&quot;;&#125;;&#x2F;&#x2F;为document绑定一个鼠标松开事件document.onmouseup&#x3D;function()&#123;&#x2F;&#x2F;当鼠标松开时，被拖拽元素固定在当前位置 onmouseup&#x2F;&#x2F;取消document的onmousemove事件document.onmousemove&#x3D;null;document.onmouseup&#x3D;null;&#x2F;&#x2F;注意，onmousemove、onmouseup在鼠标按下才有效&#x2F;&#x2F;当鼠标松开都没有存在的意义，应该取消掉&#125;&#125;&#125;&lt;&#x2F;script&gt;&lt;&#x2F;head&gt;&lt;body&gt;&lt;div id&#x3D;&quot;box1&quot;&gt;&lt;&#x2F;div&gt;&lt;div id&#x3D;&quot;box2&quot;&gt;&lt;&#x2F;div&gt;&lt;&#x2F;body&gt;&lt;&#x2F;html&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="P-93-JS-滚轮的事件"><a href="#P-93-JS-滚轮的事件" class="headerlink" title="P-93.JS_滚轮的事件"></a>P-93.JS_滚轮的事件</h4><p>1）onwheel、当鼠标滚轮在元素向上或向下滚动时，触发事件。</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css"><span class="token selector">#box1</span><span class="token punctuation">&#123;</span><span class="token property">width</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span><span class="token property">height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span><span class="token property">background-color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">window<span class="token punctuation">.</span><span class="token function-variable function">onload</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//当鼠标滚轮向下滚动时，box1变长，当滚轮向下滚动时，box1变短</span><span class="token comment">//获取box1</span><span class="token keyword">var</span> box1 <span class="token operator">=</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"box1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//为box1绑定一个鼠标滚轮滚动事件</span>box1<span class="token punctuation">.</span><span class="token function-variable function">onwheel</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//向上滚动为负值，向下滚动为正值，且不看大小只看正负</span><span class="token keyword">if</span> <span class="token punctuation">(</span>event<span class="token punctuation">.</span>deltaY<span class="token operator">>=</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>box1<span class="token punctuation">.</span>style<span class="token punctuation">.</span>height<span class="token operator">=</span>box1<span class="token punctuation">.</span>clientHeight<span class="token operator">+</span><span class="token number">10</span><span class="token operator">+</span><span class="token string">"px"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>box1<span class="token punctuation">.</span>clientHeight<span class="token operator">></span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>box1<span class="token punctuation">.</span>style<span class="token punctuation">.</span>height<span class="token operator">=</span>box1<span class="token punctuation">.</span>clientHeight<span class="token operator">-</span><span class="token number">10</span><span class="token operator">+</span><span class="token string">"px"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>box1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="P-94-JS-键盘事件"><a href="#P-94-JS-键盘事件" class="headerlink" title="P-94.JS_键盘事件"></a>P-94.JS_键盘事件</h4><p>1）keypress、 当用户按下键时，触发事件。</p><p>2）keydown、当用户正在按下键时，触发事件。</p><p>3）onkeyup、当用户松开键时，触发事件。</p><p>​    注意：在文本框中输入内容，属于onkeydown的默认行为，如果在onkeydown中取消默认行为，则输入的内容，不会出现在文本框中</p><pre class="line-numbers language-HTML" data-language="HTML"><code class="language-HTML">&lt;html&gt;&lt;head&gt;&lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;&lt;title&gt;&lt;&#x2F;title&gt;&lt;style&gt;#box1&#123;height: 100px;width: 100px;background-color: red;&#125;&lt;&#x2F;style&gt;&lt;script&gt;window.onload&#x3D;function()&#123;&#x2F;&#x2F;当按下键盘某个按键时，box1变成黄色&#x2F;&#x2F;获取box1、iptvar box1&#x3D;document.getElementById(&quot;box1&quot;);var ipt&#x3D;document.getElementById(&quot;ipt&quot;);&#x2F;&#x2F;为box1添加键盘事件&#x2F;&#x2F;对于onkeydown来说，如果一直按着某个按键不松手，则事件会一直触发&#x2F;&#x2F;当onkeydown连续触发时，第一次和第二次之间会间隔稍微长一些，其他会非常快&#x2F;&#x2F;这种设计是为了防止误操作的发生ipt.onkeydown&#x3D;function(event)&#123;event&#x3D;event||window.event;&#x2F;&#x2F;可以通过keyCode来获取按键的Unicode 值&#x2F;&#x2F;通过它可以判断那个按键配按下&#x2F;* 除了keyCode，事件对象中还提供了几个属性 altKey ctrlKey shiftKey -这三个用来判断alt ctrl 和shift是否被按下，如果按下则返回true，否则返回false*&#x2F;if(event.keyCode&#x3D;&#x3D;49&amp;&amp;event.ctrlKey)&#123;alert(&quot;ctrl和1被同时按下&quot;);&#125;&#x2F;&#x2F;使文本框中不能输入数字0-9if(event.keyCode&gt;&#x3D;48&amp;&amp;event.keyCode&lt;&#x3D;57)&#123;&#x2F;&#x2F;在文本框中输入内容，属于onkeydown的默认行为&#x2F;&#x2F;如果在onkeydown中取消默认行为，则输入的内容，不会出现在文本框中return false;&#125;ipt.onkeyup&#x3D;function()&#123;&#125;&#125;&#125;;&lt;&#x2F;script&gt;&lt;&#x2F;head&gt;&lt;body&gt;&lt;div id&#x3D;&quot;box1&quot;&gt;&lt;&#x2F;div&gt;&lt;input id&#x3D;&quot;ipt&quot;  type&#x3D;&quot;text&quot; &#x2F;&gt;&lt;&#x2F;body&gt;&lt;&#x2F;html&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="P-95-JS-键盘移动div"><a href="#P-95-JS-键盘移动div" class="headerlink" title="P-95.JS_键盘移动div"></a>P-95.JS_键盘移动div</h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script<span class="token operator">></span>window<span class="token punctuation">.</span><span class="token function-variable function">onload</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token comment">//获取box1</span><span class="token keyword">var</span> box1<span class="token operator">=</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"box1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//为box1添加键盘按下事件</span> document<span class="token punctuation">.</span><span class="token function-variable function">onkeydown</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token comment">//获取按下按键的“Unicode”值</span><span class="token keyword">switch</span> <span class="token punctuation">(</span>event<span class="token punctuation">.</span>keyCode<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">case</span> <span class="token number">68</span><span class="token operator">:</span><span class="token comment">//修改box1移动的距离</span>box1<span class="token punctuation">.</span>style<span class="token punctuation">.</span>left<span class="token operator">=</span>box1<span class="token punctuation">.</span>offsetLeft<span class="token operator">+</span><span class="token number">10</span><span class="token operator">+</span><span class="token string">"px"</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">case</span> <span class="token number">65</span><span class="token operator">:</span>box1<span class="token punctuation">.</span>style<span class="token punctuation">.</span>left<span class="token operator">=</span>box1<span class="token punctuation">.</span>offsetLeft<span class="token operator">-</span><span class="token number">10</span><span class="token operator">+</span><span class="token string">"px"</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">case</span> <span class="token number">87</span><span class="token operator">:</span>box1<span class="token punctuation">.</span>style<span class="token punctuation">.</span>top<span class="token operator">=</span>box1<span class="token punctuation">.</span>offsetTop<span class="token operator">-</span><span class="token number">10</span><span class="token operator">+</span><span class="token string">"px"</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">case</span> <span class="token number">83</span><span class="token operator">:</span>box1<span class="token punctuation">.</span>style<span class="token punctuation">.</span>top<span class="token operator">=</span>box1<span class="token punctuation">.</span>offsetTop<span class="token operator">+</span><span class="token number">10</span><span class="token operator">+</span><span class="token string">"px"</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">default</span><span class="token operator">:</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="P-96-JS-BOM"><a href="#P-96-JS-BOM" class="headerlink" title="P-96.JS_BOM"></a>P-96.JS_BOM</h4><p>BOM：浏览器对象模型<br>         1）BOM可以使我们通过JS来操作浏览器，在BOM中为我们提供了一组对象，用来完成对浏览器的对象<br>         -BOM对象<br>                 Window、Navigator、Location、History、Screen<br>             ①Window-代表的是整个浏览器的窗口，同时window也是网页中的全局对象<br>             ②Navigator-代表的当前浏览器的信息，通过该对象可以来识别不同的浏览器<br>             ③Location-代表当前浏览器的地址栏信息，通过Location可以获取地址栏信息，或者操作浏览器跳转页面<br>             ④History-代表浏览器历史记录，可以通过对象来操作浏览器的历史记录，由于隐私原因，<br>             该对象不能获取到具体的历史记录，只能操作浏览器向前或向后翻页,且该操作只能在当次访问时有效<br>             ⑤Screen-代表用户的屏幕的信息，通过该对象可以获取到用户的显示器的相关信息</p><p>​         2）这些BOM对象在浏览器中都是作为window对象的属性保存的，可以通过window对象来使用，也可以直接使用</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">alert</span><span class="token punctuation">(</span>navigator<span class="token punctuation">.</span>appName<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">alert</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span>navigator<span class="token punctuation">.</span>appName<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="P-97-JS-History"><a href="#P-97-JS-History" class="headerlink" title="P-97.JS_History"></a>P-97.JS_History</h4><p>1）History、对象可以来操作浏览器进行向前翻页或向后翻页</p><p>2）length属性，可以获取到当前访问的链接数量，只限当次使用</p><p>①back()、加载 history 列表中的前一个 URL（页面）。</p><p>②forward()、加载 history 列表中的下一个 URL（页面）。</p><p>③go（）、可以用来跳转到指定的页面，它需要一个整数作为参数：</p><p>​            1：表示向前跳转一个页面，相当与forward（）</p><p>​            2：表示向前跳转两个页面</p><p>​            -1：表示向后跳转一个页面</p><p>​            -2：表示向后跳转两个页面</p><h4 id="P-98-JS-Location"><a href="#P-98-JS-Location" class="headerlink" title="P-98.JS_Location"></a>P-98.JS_Location</h4><p>1）Location 对象包含有关当前 URL 的信息，Location 对象是 Window 对象的一个部分，可通过 window.location 属性来访问。</p><p>2）如果直接将location属性修改为一个完整的路径，或者相对路径，则我们页面会自动跳转到该路径</p><p>①assign()用来跳转到其他页面，作用和直接修改location一样</p><p>②reload()用来重新加载当前页面，作用和刷新按钮一样，如果在方法中传递一个true，作为参数，则会强制清空缓存刷新页面</p><p>③replace()可以使用一个新的页面替换当前页面，调用完毕也会跳转页面，但是不会生成历史记录，不能使用回退按钮，回退</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script<span class="token operator">></span>window<span class="token punctuation">.</span><span class="token function-variable function">onload</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//获取btn</span><span class="token keyword">var</span> btn <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"btn"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//如果直接大于location，则可以获取到地址栏信息（当前页面的完整路劲）</span><span class="token comment">//alert(location);</span><span class="token comment">//为btn添加点击事件</span>btn<span class="token punctuation">.</span><span class="token function-variable function">onclick</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//如果直接将location属性修改为一个完整的路径，或者相对路径，则</span><span class="token comment">//我们页面会自动跳转到该路径</span><span class="token comment">//window.location="事件冒泡.html";</span><span class="token comment">//assign()用来跳转到其他页面，作用和直接修改location一样</span><span class="token comment">//window.location.assign("https://www.baidu.com/");</span><span class="token comment">//reload()用来重新加载当前页面，作用和刷新按钮一样</span><span class="token comment">//如果在方法中传递一个true，作为参数，则会强制清空缓存刷新页面</span><span class="token comment">//window.location.reload(true);</span><span class="token comment">//replace()可以使用一个新的页面替换当前页面，调用完毕也会跳转页面</span><span class="token comment">//但是不会生成历史记录，不能使用回退按钮，回退</span>window<span class="token punctuation">.</span>location<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">"https://www.baidu.com/"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="P-99-JS-定时器简介"><a href="#P-99-JS-定时器简介" class="headerlink" title="P-99.JS_定时器简介"></a>P-99.JS_定时器简介</h4><p>1）setInterval()、定时调用，可以将一个函数，每隔一段事件执行一次</p><p> 参数：<br>                     1.回调函数，该函数会每隔一短时间被调用一次<br>                     2.每次调用间隔的时间，单位是毫秒</p><p> 返回值：返回一个Number类型的数据，这个数字用来作为定时器的唯一标识</p><p>2）clearInterval()可以用来关闭一个定时器，可以接收任意参数</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script<span class="token operator">></span>window<span class="token punctuation">.</span><span class="token function-variable function">onload</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//获取btn</span><span class="token keyword">var</span> btn<span class="token operator">=</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"btn"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//为btn添加点击事件</span><span class="token keyword">var</span> sum<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>btn<span class="token punctuation">.</span><span class="token function-variable function">onclick</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">/* steinterval():定时调用 可以将一个函数，每隔一段事件执行一次 参数：、 1.回调函数，该函数会每隔一短时间被调用一次 2.每次调用间隔的时间，单位是毫秒  返回值：返回一个Number类型的数据，这个数字用来作为定时器的唯一标识 * */</span><span class="token keyword">var</span> timer<span class="token operator">=</span>window<span class="token punctuation">.</span><span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">alert</span><span class="token punctuation">(</span>sum<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>sum<span class="token operator">==</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//关闭定时器</span><span class="token function">clearInterval</span><span class="token punctuation">(</span>timer<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//clearInterval()可以用来关闭一个定时器</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span> <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="P-100-JS-切换图片练习"><a href="#P-100-JS-切换图片练习" class="headerlink" title="P-100.JS_切换图片练习"></a>P-100.JS_切换图片练习</h4><p>1）为防止开启多个定时器，在开启定时器之前，需要将上一个定时器关闭</p><p>2）clearInterval()、可以接收任意参数，如果参数是一个有效的定时器标识，则停止对应的定时器，如果参数不是一个有效的标识，则什么也不用做</p><pre class="line-numbers language-HTML" data-language="HTML"><code class="language-HTML">&lt;html&gt;&lt;head&gt;&lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;&lt;title&gt;&lt;&#x2F;title&gt;&lt;style&gt;#img&#123;height: 300px;width: 450px;&#125;&lt;&#x2F;style&gt;&lt;script&gt;window.onload&#x3D;function()&#123;&#x2F;&#x2F;创建一个变量，用来储存关闭定时器的参数var str;&#x2F;&#x2F;获取imgvar img&#x3D;document.getElementById(&quot;img&quot;);&#x2F;&#x2F;创建一个数组用来存储图片var Arrimg&#x3D;[&quot;img&#x2F;1.jpg&quot;,&quot;img&#x2F;2.jpg&quot;,&quot;img&#x2F;3.jpg&quot;,&quot;img&#x2F;4.jpg&quot;];&#x2F;&#x2F;创建一个变量，用来保存当前图片的索引var index&#x3D;0;&#x2F;&#x2F;获取btn1var btn1&#x3D;document.getElementById(&quot;btn1&quot;);btn1.onclick&#x3D;function()&#123;&#x2F;&#x2F;在开启定时器之前关闭上一个定时器clearInterval(str);&#x2F;&#x2F;开启一个定时器，用来切换图片 str&#x3D;setInterval(function()&#123;&#x2F;&#x2F;修改img1的是如此属性img.src&#x3D;Arrimg[index];&#x2F;&#x2F;使index自增index++;if (index&#x3D;&#x3D;4) &#123;index&#x3D;0;&#125;&#125;,1000);&#125;;&#x2F;&#x2F;获取btn2var btn2&#x3D;document.getElementById(&quot;btn2&quot;);&#x2F;&#x2F;为btn2创建一个点击事件btn2.onclick&#x3D;function()&#123;clearInterval(str);&#125;&#125;&lt;&#x2F;script&gt;&lt;&#x2F;head&gt;&lt;body&gt;&lt;img id&#x3D;&quot;img&quot; src&#x3D;&quot;img&#x2F;1.jpg&quot;&#x2F;&gt;&lt;br &#x2F;&gt;&lt;button id&#x3D;&quot;btn1&quot; type&#x3D;&quot;button&quot;&gt;开始&lt;&#x2F;button&gt;&lt;button id&#x3D;&quot;btn2&quot; type&#x3D;&quot;button&quot;&gt;关闭&lt;&#x2F;button&gt;&lt;&#x2F;body&gt;&lt;&#x2F;html&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="P-101-JS-修改移动的div练习"><a href="#P-101-JS-修改移动的div练习" class="headerlink" title="P-101.JS_修改移动的div练习"></a>P-101.JS_修改移动的div练习</h3><pre class="line-numbers language-JavaScript" data-language="JavaScript"><code class="language-JavaScript">&lt;script&gt;window.onload&#x3D;function()&#123;&#x2F;&#x2F;获取box1var imet;var box1&#x3D;document.getElementById(&quot;box1&quot;);&#x2F;&#x2F;为document绑定一个键盘事件document.onkeydown&#x3D;function(event)&#123;var dir&#x3D;event.keyCode;document.onkeyup&#x3D;function()&#123;dir&#x3D;0;&#125;&#x2F;&#x2F;在开始前，关闭前一个定时器clearInterval(imet);&#x2F;&#x2F;创建一个方法，控制div移动速度imet&#x3D; setInterval(function()&#123;switch (dir)&#123;&#x2F;&#x2F;向右case 68:box1.style.left&#x3D;box1.offsetLeft+10+&quot;px&quot;;break;case 65:box1.style.left&#x3D;box1.offsetLeft-10+&quot;px&quot;;break;&#x2F;&#x2F;向上case 87:box1.style.top&#x3D;box1.offsetTop-10+&quot;px&quot;;break;case 83:box1.style.top&#x3D;box1.offsetTop+10+&quot;px&quot;;break;default:break;&#125;&#125;,30);&#125;;&#125;;&lt;&#x2F;script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="P-102-JS-延迟调用"><a href="#P-102-JS-延迟调用" class="headerlink" title="P-102.JS_延迟调用"></a>P-102.JS_延迟调用</h4><p>1）setTimeout()、延时调用，延时调用一个函数不马上执行，而是隔一段时间以后在执行，而且只会执行一次，延时调用和定时调用的区别，定时调用会执行多次，而延时调用只会执行一次 </p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token keyword">var</span> num<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>window<span class="token punctuation">.</span><span class="token function-variable function">onload</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//延时调用</span><span class="token comment">//延时调用一个函数不马上执行，而是隔一段时间以后在执行，而且只会执行一次</span><span class="token comment">//延时调用和定时调用的区别，定时调用会执行多次，而延时调用只会执行一次 </span>window<span class="token punctuation">.</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token operator">++</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="P-103-JS-定时器的应用"><a href="#P-103-JS-定时器的应用" class="headerlink" title="P-103.JS_定时器的应用"></a>P-103.JS_定时器的应用</h4><p>1）var boxStyle = parseInt(getStyle(box1,”left”));定时器每次执行都需要去获取，box1.left原来的值</p><pre class="line-numbers language-HTML" data-language="HTML"><code class="language-HTML">&lt;html&gt;&lt;head&gt;&lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;&lt;title&gt;&lt;&#x2F;title&gt;&lt;style&gt;#box1&#123;height: 100px;width: 100px;background-color: red;left: 0px;position: absolute;&#125;&lt;&#x2F;style&gt;&lt;script&gt;window.onload&#x3D;function()&#123;var getStyle&#x3D;function(obj,name)&#123; &#x2F;&#x2F;判断该浏览器是否含有getComputedStyle方法，加window表示属性，不加表示变量&#x2F;&#x2F;变量如果没找到会报错，属性没找到会返回undefinedif(window.getComputedStyle)&#123;&#x2F;&#x2F;正常浏览器的方式，具有getComputedStyle()方法 return getComputedStyle(obj,null)[name];&#125;else&#123;&#x2F;&#x2F;IE8的方式，没有getComputedStyle()方法return obj.currentStyle[name];&#125;&#125;&#x2F;&#x2F;定义一个变量存储定时器标识var imtl;&#x2F;&#x2F;获取box1var box1&#x3D;document.getElementById(&quot;box1&quot;);&#x2F;&#x2F;获取btn1  var btn1&#x3D;document.getElementById(&quot;btn1&quot;);&#x2F;&#x2F;获取btn2  var btn2&#x3D;document.getElementById(&quot;btn2&quot;);&#x2F;&#x2F;为btn1添加点击事件btn1.onclick&#x3D;function()&#123;&#x2F;&#x2F;修改当前left的值&#x2F;&#x2F;避免开启多个定时器，需要先关闭前一个定时器clearInterval(imtl);imtl&#x3D;setInterval(function()&#123;&#x2F;&#x2F;定时器每次执行都需要去获取，box1.left原来的值var boxStyle &#x3D; parseInt(getStyle(box1,&quot;left&quot;));&#x2F;&#x2F;存储修改后的left值var newBoxStyle &#x3D; boxStyle+10;box1.style.left&#x3D;newBoxStyle+&quot;px&quot;;if(newBoxStyle&gt;&#x3D;800)&#123;clearInterval(imtl);&#125;&#125;,30);&#125;;btn2.onclick&#x3D;function()&#123;clearInterval(imtl);&#125;;&#125;&lt;&#x2F;script&gt;&lt;&#x2F;head&gt;&lt;body&gt;&lt;button id&#x3D;&quot;btn1&quot; type&#x3D;&quot;button&quot;&gt;开始&lt;&#x2F;button&gt;&lt;button id&#x3D;&quot;btn2&quot; type&#x3D;&quot;button&quot;&gt;关闭&lt;&#x2F;button&gt;&lt;br &#x2F;&gt;&lt;br &#x2F;&gt;&lt;div id&#x3D;&quot;box1&quot;&gt;&lt;&#x2F;div&gt;&lt;&#x2F;body&gt;&lt;&#x2F;html&gt; <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
