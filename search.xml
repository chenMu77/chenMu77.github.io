<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>死磕JS_数据类型</title>
      <link href="/2021/01/16/hexo-bolg8/"/>
      <url>/2021/01/16/hexo-bolg8/</url>
      
        <content type="html"><![CDATA[<h4 id="JS数据类型"><a href="#JS数据类型" class="headerlink" title="JS数据类型"></a>JS数据类型</h4><p>1）数据类型一共可分为8种：String、Number、Boolean、Null、undefined、Object、Symbol、BigInt</p><p>2）在ES5的时候，基本数据类型是6种，分别是：String、Number、Boolean、Null、undefined、Object</p><img src="/2021/01/16/hexo-bolg8/js_01.png" class=""><p>3）基本（值）类型:String、Number、Boolean、Null、undefined</p><p>4）对象（引用）类型：Object，其中还包含了Date、function、Array（常见）</p><img src="/2021/01/16/hexo-bolg8/js_02.png" class=""> <p>5）ES6引入了一种新的原始数据类型Symbol，表示独一无二的值。它是JavaScript语言的第七种数据类型，是一种类似字符串的数据类型 。</p><p>Symbol特点：</p><ol><li>Symbol的值是唯一的，用来解决命名冲突的问题</li><li>Symbol值不能与其他数据进行运算</li><li>Symbol定义的的对象属性不能使用for…in循环遍历，但是可以使用Reflect.ownKeys来获取对象的所有建名</li></ol><p>6）BigInt 是一种特殊的数字类型，它支持任意长度的整数</p><h4 id="2-数据类型判断"><a href="#2-数据类型判断" class="headerlink" title="2.数据类型判断"></a>2.数据类型判断</h4><p>typeof：</p><p>​        返回数据类型的字符串表达式</p><p>​        可以判断：undefined、数值、字符串、布尔值</p><p>​        不可以判断：null、object</p><p>instanceof：</p><p>​        可以判断对象的具体类型</p><p>===：</p><p>​        可以判断：undefined，unll</p><h4 id="3-相关问题"><a href="#3-相关问题" class="headerlink" title="3.相关问题"></a>3.相关问题</h4><p>1）undefined与null的区别</p><p>​        undefined代表未定义未赋值</p><p>​        null定义并赋值了，只是值为null</p><img src="/2021/01/16/hexo-bolg8/js_03.png" class=""><p>2）什么时候给变量赋值为null</p><p>​    初始值，表明将要赋值为对象</p><p>​    结束前，让对象成为垃圾对象（被垃圾回收器回收）</p><img src="/2021/01/16/hexo-bolg8/js_04.png" class=""><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token parameter">a</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>​      <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token operator">&lt;</span><span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>​        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"未成年，在等等！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>​      <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token operator">></span><span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>​        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'算了吧！'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>​      <span class="token punctuation">&#125;</span>​      <span class="token keyword">else</span><span class="token punctuation">&#123;</span>​        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'刚刚好'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>​      <span class="token punctuation">&#125;</span>​    <span class="token punctuation">&#125;</span>​    <span class="token function">fun</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><table><thead><tr><th>11111111111</th><th>222222222222222333333333333333</th><th>3333333333333333111</th></tr></thead><tbody><tr><td>11</td><td></td><td></td></tr><tr><td>2222</td><td>333</td><td>444</td></tr><tr><td></td><td></td><td></td></tr></tbody></table>]]></content>
      
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>绘制三角形</title>
      <link href="/2020/06/11/hexo-blog2/"/>
      <url>/2020/06/11/hexo-blog2/</url>
      
        <content type="html"><![CDATA[<h4 id="绘制三角形练习"><a href="#绘制三角形练习" class="headerlink" title="绘制三角形练习"></a>绘制三角形练习</h4><p>1.) 使用CSS中的盒模型（border）绘制三角形，实现效果：</p><img src="/2020/06/11/hexo-blog2/css_01.png" class=""><p>2.) 知识误区，（border）元素是由三角形组成，而并非矩形，为证明，将我们平时所使用的语法列出，在学习（border）时，通常为设置1px，且颜色单一，很难从视觉效果上了解（border）的形成方式，从而产生了误解。因此将（border）设置为30px，效果图为：box2。</p><img src="/2020/06/11/hexo-blog2/css_02.png" class=""><p>3.) 进一步实现三角形绘制，需要知道box是块元素，其默认宽度是100%，所以将把box的宽高强制为0，效果图为box2。</p><img src="/2020/06/11/hexo-blog2/css_03.png" class=""><p>4.) 据效果图box2所示：（border）是由top，right，bottom，left，4个三角形组成，当我们对其另外3个三角形进行隐藏时，最终保留下来的就是所需要的三角形。</p><img src="/2020/06/11/hexo-blog2/css_04.png" class="">]]></content>
      
      
      
        <tags>
            
            <tag> HTML </tag>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS基础篇二</title>
      <link href="/2020/05/20/hexo-bolg3/"/>
      <url>/2020/05/20/hexo-bolg3/</url>
      
        <content type="html"><![CDATA[<h4 id="P-46-JS-使用工厂方法创建对象"><a href="#P-46-JS-使用工厂方法创建对象" class="headerlink" title="P-46.JS_使用工厂方法创建对象"></a>P-46.JS_使用工厂方法创建对象</h4><img src="/2020/05/20/hexo-bolg3/js_56.jpg" class=""><h4 id="P-47-JS-构造函数"><a href="#P-47-JS-构造函数" class="headerlink" title="P-47.JS_构造函数"></a>P-47.JS_构造函数</h4><p>1）使用工厂方法创建的对象，使用的构造函数都是Object，所以创建的对象都是Object这个类型，就导致我们无法区分多种不同的类型的对象</p><p>2）构造函数和普通函数的区别就是调用方式的不同，普通函数是直接调用，而构造函数需要使用new关键字来调用</p><img src="/2020/05/20/hexo-bolg3/js_57.jpg" class=""><p>3）构造函数的执行流程</p><p>​        1.立刻创建一个新的对象</p><p>​        2.将新建的对象设置为函数中的this</p><p>​        3.逐行执行函数中的代码</p><p>​        4.将新的对象作为返回值返回</p><p>​    使用同一个构造函数创建的对象，我们称为一类对象，也将一个构造函数称为一个类。我们将通过一个构造函数创建的对象,称为是该类的实例</p><p>4）this的情况：</p><p>​    1.当以函数的形式调用时，this是window</p><p>​    2.当以方法的形式调用时，谁调用this就是谁</p><p>​    3.当以构造函数的形式调用时，this就是新创建的那个对象</p><p>5）使用instanceof可以检查一个对象是否是一个类的实例</p><p>语法：</p><p>​            对象 instanceof 构造函数</p><p>如果是，则返回true，否则返回false</p><img src="/2020/05/20/hexo-bolg3/js_58.jpg" class=""><p>所有的对象都是Object的后代，所以任何对象和Object做instanceof检查时都会返回true</p><img src="/2020/05/20/hexo-bolg3/js_59.jpg" class=""><h4 id="P-48-JS-原型对象"><a href="#P-48-JS-原型对象" class="headerlink" title="P-48.JS_原型对象"></a>P-48.JS_原型对象</h4><p>1）原型：prototype，我们所创建的每一个函数，解析器都会向函数中添加一个属性”prototype“，这个属性对应着一个对象，这个对象就是我们所谓的原型对象</p><p>​    我们所创建的每一个函数，解析器都会向函数中添加一个属性prototype，这个属性对应着一个对象这个对象就是我们所谓的原型对象，如果函数作为普通函数调用，prototype没有任何作用</p><p>​    当函数以构造函数的形式调用时，它所创建的对象中都会有一个隐含的属性，指向该构造函数的原型对象，我们可以通过 _ _proto __来访问该属性</p><p>​    原型对象就相当于一个公共的区域，所有同一个类的实例都可以访问到这个原型对象</p><p>​    当我们访问对象的一个属性或方法时，它会先在对象自身中寻找，如果有则直接使用，如果没有则会去原型对象中寻找，如果找到则直接使用</p><p>如果没有则取原型的原型中寻找，直到找到Object对象的原型，（Object对象的原型没有原型），如果在Object中依然没有找到，则返回undefined</p><img src="/2020/05/20/hexo-bolg3/js_60.jpg" class=""><img src="/2020/05/20/hexo-bolg3/js_61.jpg" class=""><p>2）使用in检查对象中是否含有某个属性时，如果对象中没有但是原型中有，也会返回true</p><p>​        另外可以使用对象的hasOwnProperty（）来检查对象自身中是否含有该属性，使用该方法只有当对象自身中含有属性时，才会返回true</p><p>例：</p><img src="/2020/05/20/hexo-bolg3/js_62.jpg" class=""><p>3）原型对象也是对象，所以它也有原型，当我们使用一个对象的属性或方法时，会先在自身中寻找，自身中如果没有，则直接使用，如果没有则去原型对象中寻找，如果原型对象中有则使用，如果没有则去原型的原型中寻找，直到找到Object对象的原型，Object对象的原型没有原型，如果在Object中依然没有找到，则返回undefined</p><h4 id="P-49-JS-toString"><a href="#P-49-JS-toString" class="headerlink" title="P-49.JS_toString"></a>P-49.JS_toString</h4><p>1)当我们直接在页面中打印一个对象时，实际上输出的对象是toString（）方法的返回值</p><p>如果我们希望在输出对象时不输出[Object Object]，而已为对象添加一个toString（）方法</p><img src="/2020/05/20/hexo-bolg3/js_63.jpg" class=""><h4 id="P-50-JS-垃圾回收"><a href="#P-50-JS-垃圾回收" class="headerlink" title="P-50.JS_垃圾回收"></a>P-50.JS_垃圾回收</h4><p>1）垃圾回收（GC）程序中含有的一个垃圾回收机制，来处理程序运行过程中产生的垃圾，当一个对象没有任何的变量或属性对它进行引用，此时我们将永远无法操作该对象，此时这种对象就是一个垃圾，这种对象过多会占用大量的内存空间，导致程序运行变慢，所以这种垃圾必须清理。</p><p>​        “在JS中拥有自动的回收机制，会自动将这些垃圾对象从内存中销毁，我们不需要也不能进行垃圾回收操作”</p><p>我们需要做的事情就是（将不在使用的对象设置为null即可）</p><h4 id="P-51-JS-数组简介"><a href="#P-51-JS-数组简介" class="headerlink" title="P-51.JS_数组简介"></a>P-51.JS_数组简介</h4><p>1）内建对象</p><p>2）宿主对象</p><p>3）自定义对象</p><p>数组（Array）数组也是一个对象，它和我们普通对象功能类似，也是用来存储一些值的，不同的是普通对象是使用字符串作为属性名的，而数组是使用数字来作为索引操作元素</p><p>索引：从0开始的整数就是索引</p><p>数组的存储性能比普通对象要好，在开发中我们经常使用数组来存储一些数据</p><p>​        创建数组</p><p>​                    语法：</p><img src="/2020/05/20/hexo-bolg3/js_64.jpg" class=""><p>读取数组中的元素</p><p>​        语法：数组[索引]</p><p>如果读取不存在的索引，他不会报错而是返回undefined</p><p>获取数组的长度：可以使用length属性来获取数组的长度（元素的个数）</p><p>​        语法：数组length</p><p>​    对于使用连续的数组，使用length可以获取到数组的长度（元素的个数），对于非连续的数组，使用length会获取到数组的最大索引+1。尽量不要使用创建非连续的数组</p><p>​    修改length，如果修改的length大于元长度，则多出部分会空出来，如果修改的length小于原长度，则多出来的元素会呗删除</p><p>向数组的最后一个位置添加元素</p><p>语法：数组[数组.length] = 值；</p><img src="/2020/05/20/hexo-bolg3/js_65.jpg" class=""><h4 id="P-52-JS-数组字面量"><a href="#P-52-JS-数组字面量" class="headerlink" title="P-52.JS_数组字面量"></a>P-52.JS_数组字面量</h4><p>1）使用字面量来创建数组</p><p>语法：var arr = [ ]；</p><p>使用字面量创建数组时，可以在创建时就指定数组中的元素</p><img src="/2020/05/20/hexo-bolg3/js_66.jpg" class=""><p>使用构造函数创建数组时，也可以同时添加元素，将要添加的元素作为构造函数参数传递，元素之间使用 ，逗号隔开</p><img src="/2020/05/20/hexo-bolg3/js_67.jpg" class=""><h4 id="P-53-JS-数组的四个方法"><a href="#P-53-JS-数组的四个方法" class="headerlink" title="P-53.JS_数组的四个方法"></a>P-53.JS_数组的四个方法</h4><p>1）push（）该方法可以向 数组的末尾添加一个或多个元素，并返回数组的新的长度，可以将要添加的元素作为方法的参数传递，这样这些元素将会自动添加到数组的末尾，该方法会将数组新的长度作为返回值返回</p><img src="/2020/05/20/hexo-bolg3/js_68.jpg" class=""><p>2）pop（）该方法可以删除数组的最后一个元素，并将被删除的元素作为返回值返回</p><img src="/2020/05/20/hexo-bolg3/js_69.jpg" class=""><p>3）unshift（）该方法向数组开头添加一个或多个元素，并返回新得到数组长度，向前边插入元素以后，其他的元素索引会依此调整</p><img src="/2020/05/20/hexo-bolg3/js_70.jpg" class=""><p>4）shift（）该方法可以删除数组的第一个元素，并将被删除的元素作为返回值返回</p><img src="/2020/05/20/hexo-bolg3/js_71.jpg" class=""><h4 id="P-54-JS-数组的遍历"><a href="#P-54-JS-数组的遍历" class="headerlink" title="P-54.JS_数组的遍历"></a>P-54.JS_数组的遍历</h4><p>1）所谓的遍历，就是将数组中的所有元素都取出来</p><img src="/2020/05/20/hexo-bolg3/js_72.jpg" class=""><h4 id="P-55-JS-数组的练习"><a href="#P-55-JS-数组的练习" class="headerlink" title="P-55.JS_数组的练习"></a>P-55.JS_数组的练习</h4><img src="/2020/05/20/hexo-bolg3/js_73.jpg" class=""><h4 id="P-56-JS-数组的foEach"><a href="#P-56-JS-数组的foEach" class="headerlink" title="P-56.JS_数组的foEach"></a>P-56.JS_数组的foEach</h4><p>1）一般我们都是使用for循环去遍历数组，JS中还为我们提供了一个方法，用来遍历数组forEach（），这个方法只支持IE8以上版本；IE8及以下版本均不支持该方法，所以需要兼容IE8，则不要使用foEach（）方法，还是使用for循环来遍历</p><p>2）fonEach（）方法需要一个函数作为参数，像这种函数，由我们创建但是不由我们调用的，我们称为回调函数，数组中有几个元素，函数就会执行几次，每次执行时，浏览器会将遍历到的元素以实参的形式进行传递进来，我们定义形参，来读取这些内容，浏览器会在回调函数中传递三个参数</p><img src="/2020/05/20/hexo-bolg3/js_74.jpg" class=""><h4 id="P-57-JS-slice和splice"><a href="#P-57-JS-slice和splice" class="headerlink" title="P-57.JS_slice和splice"></a>P-57.JS_slice和splice</h4><p>1）slice（）可以从数组提取指定元素，该方法不会改变元素数组，而是将截取到的元素封装到一个新数组中返回</p><p>​    参数：</p><p>​                第1个参数，截取开始的位置的索引，包含开始索引</p><p>​                第2个参数，截取结束的位置的索引，不包含结束索引</p><p>​    1、第二个参数可以省略不写，此时截取从开始索引往后的所有元素</p><img src="/2020/05/20/hexo-bolg3/js_75.jpg" class=""><p>​    2、索引可以传递一个负值，如果传递一个负值，则从后往前计算</p><img src="/2020/05/20/hexo-bolg3/js_76.jpg" class=""><p>2）splice（）可以用于删除数组中的指定元素，使用splice（）会影响到原数组，会将指定元素从原数组中删除 ，并将删除的元素作为返回值返回</p><p>参数：</p><p>​                第1个参数，表示开始位置的索引</p><p>​                第2个参数，表示删除的数量</p><p>​                第3个及以后……可以传递一些新的元素，这些元素将会自动插入到开始位置索引前边 </p><h4 id="P-58-JS-数组去重练习"><a href="#P-58-JS-数组去重练习" class="headerlink" title="P-58.JS_数组去重练习"></a>P-58.JS_数组去重练习</h4><img src="/2020/05/20/hexo-bolg3/js_77.jpg" class="">]]></content>
      
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS基础篇</title>
      <link href="/2020/05/09/hexo-bolg1/"/>
      <url>/2020/05/09/hexo-bolg1/</url>
      
        <content type="html"><![CDATA[<h4 id="P-1-JS的三个输出"><a href="#P-1-JS的三个输出" class="headerlink" title="P-1.JS的三个输出"></a>P-1.JS的三个输出</h4><p>​    1.弹窗显示：alert（）；</p><p>​    2.在页面中显示：document.write（）；</p><p>​    3.在控制台显示：console.log</p><img src="/2020/05/09/hexo-bolg1/js_01.jpg" class=""><h4 id="P-2-JS编写位置"><a href="#P-2-JS编写位置" class="headerlink" title="P-2.JS编写位置"></a>P-2.JS编写位置</h4><p>内部编写script代码：</p><img src="/2020/05/09/hexo-bolg1/js_02.jpg" class=""><p>外部编写script代码：通过script标签引入</p><img src="/2020/05/09/hexo-bolg1/js_03.jpg" class=""><p>​    script标签一旦用于引入外部文件了，就不能在（该标签）内部编写代码了，即使编写了浏览器也会忽略如果需要则可以在创建一个新的script标签用于编写内部代码   </p><h4 id="P-3-JS基本语法"><a href="#P-3-JS基本语法" class="headerlink" title="P-3.JS基本语法"></a>P-3.JS基本语法</h4><p>​    1）JS严格区分大小写</p><p>​    2）JS中每一条语句以分号（;）结尾</p><p>​    3）JS中会忽略多个空格和换行，所以我们可以利用空格和换行对代码进行格式化</p><p>​    4）单行注释：//</p><p>​    5）多行注释：/* */</p><h4 id="P-4-JS字面量和变量"><a href="#P-4-JS字面量和变量" class="headerlink" title="P-4.JS字面量和变量"></a>P-4.JS字面量和变量</h4><p>​    1）字面量（常量）：都是一些不可改变的值，字面量我们可以直接使用，但是我们一般不会直接使用字面量</p><p>​    2）变量：变量可以用来保存字面量，而且变量的值是可以任意改变的，变量更加方便我们使用，所以在开发过程中一般会使用变量去保存一个字面量，而很少使用字面量</p><p>​    3）变量声明：在JS中使用var关键字来声明一个变量，如：  var a ;</p><p>​    4）var只在声明变量时写</p><h4 id="P-5-JS标识符"><a href="#P-5-JS标识符" class="headerlink" title="P-5.JS标识符"></a>P-5.JS标识符</h4><p>1）标识符：在JS中所有可以由我们自主命名的都可以称为标识符，例如：变量名、函数名、属性名、都属于标识符。</p><p>2）标识符命名时都需要遵守如下的规则：</p><p>​        1.标识符中可以含有字母、数字 、_ 、$</p><p>​        2.标识符不能以数字开头</p><p>​        3.标识符不能是ES中的关键字或保留字</p><p>​        4.标识符一般都采用驼峰命名法：首字母小写，每个单词的开头字母大写，其余字母小写，如：helloWorld</p><p>​        5.JS底层保存标识符时实际上是采用的Unicode编码，所以理论上讲，所有的utf-8中含有的内容都可以作为标识符</p><h4 id="P-6-JS数据类型"><a href="#P-6-JS数据类型" class="headerlink" title="P-6.JS数据类型"></a>P-6.JS数据类型</h4><p>​    1）数据类型指的就是字面量的类型，在JS中一共有六种数据类型：</p><p>​    <img src="/2020/05/09/hexo-bolg1/js_04.jpg" class=""></p><p>String、Number、Boolean、Null、Undefibed属于基本数据类型，Object属于引用数据类型</p><p>1.String字符串：在JS中字符串需要用引号引起来，使用双引号或单引号都可以，但是不要混着用，引号不能嵌套，双引号里面不能放双引号，单引号里面不能放单引号</p><p>2.在字符串中我们可以使用\作为转义字符，当表示一些特殊符号时可以使用\进行转义</p><h4 id="P-7-JS-Number"><a href="#P-7-JS-Number" class="headerlink" title="P-7.JS_Number"></a>P-7.JS_Number</h4><p>1）在JS中所有的数值都是Number类型，包括整数和浮点数（小数）</p><p>2）可以使用一个运算符typeof来检测一个变量的类型，语法：typeof变量名，检查数值时会返回一个Number，检测字符串时会返回String</p><p>3)在JS中可以表示的数字的最大值Number.MAX_VALUE：1.7976931348623157e+308，如果使用Number表示的数字超过了最大值，则会返回一个Infinity，Infinity表示正无穷，-Infinity表示负无穷；</p><p>最小值：Number.MIN_VALUE：5e-324大于0的最小值（最小的正数）</p><p>4）NaN 是一个特殊的数字，表示Not A Number，使用typeof检查一个NaN也会返回number</p><p>5）如果采用JS进行浮点数运算，可能得到一个不精确的结果，所以千万不要使用JS进行精确度比较高的运算</p><h4 id="P-8-JS-Boolean"><a href="#P-8-JS-Boolean" class="headerlink" title="P-8.JS_Boolean"></a>P-8.JS_Boolean</h4><p>​    1）Boolean 布尔值，主要用来逻辑判断的</p><p>​            true：表示真</p><p>​            false：表示假</p><p>​        使用typeof检查时，会返回boolean</p><h4 id="P-9-JS-Null和Undefibed"><a href="#P-9-JS-Null和Undefibed" class="headerlink" title="P-9.JS_Null和Undefibed"></a>P-9.JS_Null和Undefibed</h4><p>1）Null（空值）的值只有一个，就是null</p><p>​        null这个值专门用来表示一个为空的对象</p><p>使用typeof检查时，会返回object</p><p>2）Undefibed（未定义）类型的值只有一个，就是undefibed</p><p>​        当声明一个变量，但是并不给赋值时，它的值就是undefibed</p><p>使用typeof检查时，会返回undefibed</p><h4 id="P-10-JS-强制类型转换-String"><a href="#P-10-JS-强制类型转换-String" class="headerlink" title="P-10.JS_强制类型转换-String"></a>P-10.JS_强制类型转换-String</h4><p>1）将其他的数据类型转换为String</p><p>​        方式一：调用被转换数据类型toString（）方法，</p><p>​                        该方法不会影响原变量，它会将结果返回。</p><p>​                        但是注意：null和undefibed这两个值没有toString（）方法，如果调用他们的方法会报错。</p><img src="/2020/05/09/hexo-bolg1/js_05.jpg" class=""><h4 id="P-11-JS-强制类型转换-Number"><a href="#P-11-JS-强制类型转换-Number" class="headerlink" title="P-11.JS_强制类型转换-Number"></a>P-11.JS_强制类型转换-Number</h4><p>1）将其他的数据类型转换为Number</p><p>​    方式一：调用Number（）函数</p><p>​                字符串 - -&gt;数字</p><p>​                            1.如果是纯数字的字符串，则直接将其转换为数字</p><p>​                            2.如果字符串中有非数字的内容，则转换为NaN</p><p>​                            3.如果字符串是一个空串或者是一个全是空格的字符串，则转换为0</p><p>​                布尔 - -&gt;数字</p><p>​                            true 转成 1</p><p>​                            false转成 0</p><p>​                            Null - -&gt;数字     0</p><p>​                            nudefined - -&gt;数字     NaN</p><p>​    方式二：这种方式专门用来对付字符串</p><p>​            parseInt（）函数：可以将一个字符串中的有效的整数内容取出来</p><p>​            parseFloat（）函数：作用和parseInt类似，不同的是它可以获得有效小数</p><p>​            如果对非String使用parseInt（）或parseFloat（），他会先将其转换为String类型，然后在操作</p><img src="/2020/05/09/hexo-bolg1/js_06.jpg" class=""><h4 id="P-12-JS-其他进制的数字"><a href="#P-12-JS-其他进制的数字" class="headerlink" title="P-12.JS_其他进制的数字"></a>P-12.JS_其他进制的数字</h4><p>1）在JS中，如果需要表示16进制的数字，则需要以0x开头</p><p>​                    如果需要表示8进制的数字，则需要以0开头</p><p>​                    如果需要表示2进制的数字，则需要以0b开头，但不是所有的浏览器都支持</p><p>​    像“070”这种 字符串，有些浏览器会当成8进制解析，有些会当成10进制解析，可以在parseInt（）中传递，第二个参数，来指定数字的进制</p><img src="/2020/05/09/hexo-bolg1/js_07.jpg" class=""><h4 id="P-13-JS-转换为Boolean"><a href="#P-13-JS-转换为Boolean" class="headerlink" title="P-13.JS_转换为Boolean"></a>P-13.JS_转换为Boolean</h4><p>1）调用Boolean（）函数来将a转换为布尔值</p><p>​            使用Boolean（）函数</p><p>​            数字 - - -&gt;布尔</p><p>​            除了0和null，其他的都是true</p><p>​            字符串 - - -&gt;布尔</p><p>​            除了空字符串，其他的都是true</p><p>​            Null和Undefibed都会转换为false</p><p>​            对象也会转换为true</p><h4 id="P-14-JS-算数运算符"><a href="#P-14-JS-算数运算符" class="headerlink" title="P-14.JS_算数运算符"></a>P-14.JS_算数运算符</h4><p>​        1）运算符也叫操作符，通过运算符可以对一个或多个值进行运算，并获取运算结果，比如：typeof就是运算符，可以来获取一个值的类型，他会将该值的类型以字符串的形式返回</p><p>​        2）算数运算符：+、-、*、/（除法运算）、%（取余数）</p><p>​        当对非Number类型的值进行运算时，会将这些值先转换成Number类型，然后在进行运算</p><p>​        任何值和NaN做运算都得NaN</p><p>​        如果对两个字符串进行加法运算，则会做拼串操作，会将两个字符串拼接成一个字符串并返回</p><p>​        任何值和字符串相加都会转换为字符串，并做拼串操作，+“ ”；即可将其转换为String类型（隐式类型转换）</p><p>​        任何值做 -  、* 、/运算时都会自动转换为Number   ，可以通过为一个值-0 *1 /1来将其转换为Number类型，原理和Number（)函数一样，使用起来更加简单</p><img src="/2020/05/09/hexo-bolg1/js_08.jpg" class=""><h4 id="P-15-JS-一元运算符"><a href="#P-15-JS-一元运算符" class="headerlink" title="P-15.JS_一元运算符"></a>P-15.JS_一元运算符</h4><p>1）一元运算符，只需要一个操作数</p><p>​        正号：不会对数字产生任何影响</p><p>​        负号：负号可对数字进行负号取反</p><p>2）对于非Number类型的值，它会将值先转换为Number，然后在运算，可以对一个其他的数据类型使用+，来将其转换为number他的原理和Number（）函数一样</p><h4 id="P-16-JS-自增和自减"><a href="#P-16-JS-自增和自减" class="headerlink" title="P-16.JS_自增和自减"></a>P-16.JS_自增和自减</h4><p>1）自增：通过自增可以使变量在自身的基础上增加1</p><p>​        对于一个变量自增以后,（原变量）的值会立即自增1</p><p>​        自增分成两种：后++（a++）和前++（++a）</p><p>​        无论是a++ 还是++a，都会立即使原变量的值自增1</p><p>​        ++在前先++在赋值，++在后先赋值在++；</p><p>a++的值等于原变量的值（自增前的值）</p><p>++a的值等于新值（自增后的值）</p><p>2）自减：通过自减可以使变量在自身的基础上减1</p><p>​        对于一个变量自减以后,（原变量）的值会立即自减1</p><p>····        自增分成两种：后–（a–）和前–（–a）</p><p>​        无论是a– 还是–a，都会立即使原变量的值自减1</p><p>​        –在前先–在赋值，–在后先赋值在–；</p><p>a–的值等于原变量的值（自减前的值）</p><p>–a的值等于新值（自减后的值）</p><p><strong>练习题</strong>：</p><img src="/2020/05/09/hexo-bolg1/js_09.jpg" class=""><h4 id="P-17-JS-逻辑运算符"><a href="#P-17-JS-逻辑运算符" class="headerlink" title="P-17.JS_逻辑运算符"></a>P-17.JS_逻辑运算符</h4><p>1）JS中为我们提供了三种逻辑运算符：！非、&amp;&amp;与、||或</p><pre><code> ！：所谓非运算就是值对一个布尔值进行取反操作，true变false，false变true</code></pre><p>​     如果对非布尔值进行元素，则会将其转换为布尔值，然后再取反，所以我们可以利用该特点，来将一个其他的数据类型转换为布尔值。可以为一个任意数据类型取两次反，来将其转换为布尔值，原理和Boolean（）函数一样。</p><p>&amp;&amp;：&amp;&amp;可以对符号两侧的值进行与运算并返回结果</p><p>​        运算规则：两个值中只要有一个值为false就会返回false，只有两个值都为true时，才会返回true。JS中的“与”属于短路的与，如果第一个值为false，则不会看第二个值。</p><p>||：||可以对符号两侧的值进行或运算并返回结果</p><p>​        运算规则：两个值中只要有一个true，就会返回true，如果两个值都为false，才会返回false。JS中的“或”属于短路的或，如果第一个值为true，则不会看第二个值。</p><h4 id="P-18-JS-非布尔值的与或运算"><a href="#P-18-JS-非布尔值的与或运算" class="headerlink" title="P-18.JS_非布尔值的与或运算"></a>P-18.JS_非布尔值的与或运算</h4><p>1）&amp;&amp; ||非布尔值的情况</p><p>​    对于非布尔值进行与或运算时，会向将其转换为布尔值，然后再运算，并且返回（原值）。</p><p>&amp;&amp;与运算：如果第一个值为true，则必然返回第二个值，如果第一个值为false，则直接返回第一个值</p><p>||或运算：如果第一个值为true，则直接返回第一个值，如果第一个值为false，则返回第二个值</p><h4 id="P-19-JS-赋值运算符"><a href="#P-19-JS-赋值运算符" class="headerlink" title="P-19.JS_赋值运算符"></a>P-19.JS_赋值运算符</h4><p>1）= 赋值：可以将符号右侧的值赋值给符号左边的变量</p><p>​    赋值运算符有：+=、-=、*=、/=、%=</p><p>例：</p><p>​     +=加赋值：a+=5； 等价与a=a+5；</p><p>​     -=减赋值：a-=5； 等价与a=a-5；</p><h4 id="P-20-JS-关系运算符"><a href="#P-20-JS-关系运算符" class="headerlink" title="P-20.JS_关系运算符"></a>P-20.JS_关系运算符</h4><p>1）通过关系运算符可以比较两个值之间的大小关系，如果关系成立它会返回true，如果关系不成立则会返回false。</p><p>​    大于号 &gt;:判断符号左侧的值是否大于右侧，如果关系成立，返回true，如果关系不成立则返回false</p><p>​    大于等于&gt;=:判断符号左侧的值是否大于等于右侧，如果关系成立，返回true，如果关系不成立则返回false</p><p>​    小于号 &lt;:同理</p><p>​    小于等于号 &lt;=:同理</p><p>2）非数值的情况下：对于非数值进行比较时，会将其转换为数字（Number）然后在比较</p><p>​      任何值和NaN做比较都是false</p><p>3）如果符号两侧的值都是字符串时，不会将其转换为数字，进行比较。而会分别比较字符串中字符的Unicode编码。</p><p>​     比较两个字符串时，比较的是两个字符串的字符编码，比较字符编码时是一位一位进行比较，如果两位一样，则比较下一位，所以借用他来对英文进行排序</p><p>​     如果比较的两个字符串型的数字，可能会得到不可预期的结果，注意：在比较两个字符串型的数字时，必须转型。</p><h4 id="P-21-JS-Unicode编码"><a href="#P-21-JS-Unicode编码" class="headerlink" title="P-21.JS_Unicode编码"></a>P-21.JS_Unicode编码</h4><p>1）在字符串中使用转义字符输入Unicode编码：（\u四位编码）</p><p>2）在网页中使用Unicode编码：（&amp;#四位编码）；这里需要编码的是10进制</p><img src="/2020/05/09/hexo-bolg1/js_10.jpg" class=""><h4 id="P-22-JS-相等运算符"><a href="#P-22-JS-相等运算符" class="headerlink" title="P-22.JS_相等运算符"></a>P-22.JS_相等运算符</h4><p>1）==相等运算符：用来比较两个值是否相等 ，如果相等返回true，否则返回false</p><p>​            当使用==来比较两个值时，如果值的类型不同，则会自动进行类型转换，将其转换为相同类型，然后在比较。</p><p>​            nudefined衍生自null，所以这两个值做相等判断时，会返回true</p><p>​            NaN不和任何值相等，包括它本身</p><p>2）判断一个值是否为NaN，可以使用isNaN（）函数，如果改值是NaN则返回true，否则返回false。</p><img src="/2020/05/09/hexo-bolg1/js_11.jpg" class=""><p>3）！=不相等运算符：判断两个值    不相等，如果不相等返回true，否则返回false</p><p>​      不相等也会对变量进行自动的类型转换，如果转换后相等它也会返回false</p><p>4）===全等运算符：用来判断两个值是否全等，它和相等类似，不同的是他不会做自动的类型转换，如果两个值类型不同直接返回false。</p><p>5）！==不全等运算符：用来判断两个值是否全等，和不等类似，不同的是不会做自动的类型转换，如果两个值类型不同直接返回true。</p><h4 id="P-23-JS-条件运算符"><a href="#P-23-JS-条件运算符" class="headerlink" title="P-23.JS_条件运算符"></a>P-23.JS_条件运算符</h4><p>1）条件运算符也叫三元运算符</p><p>​      语法：条件表达式？语句1：语句2；</p><p>​    执行流程：</p><p>​     条件运算符执行时，首先对条件表达式进行求值，如果该值为true则执行语句1，并返回结果。如果该值为false则执行语句2，并返回结果。</p><img src="/2020/05/09/hexo-bolg1/js_12.jpg" class=""><h4 id="P-24-JS-运算符优先级"><a href="#P-24-JS-运算符优先级" class="headerlink" title="P-24.JS_运算符优先级"></a>P-24.JS_运算符优先级</h4><p>1），逗号运算符：可以分割多个语句，一般可以在声明多个变量时使用，可以声明多个变量并赋值：</p><img src="/2020/05/09/hexo-bolg1/js_13.jpg" class=""><p>2）和数学一样，在JS中运算符也有优先级</p><p>​        例：先乘除后加减</p><p>在JS中有一个运算符优先级表，在表中越靠上优先级越高，优先级越高越优先计算。如果优先级一样，则从左往右 计算，但是这个表我们并不需要记忆，如果遇到优先级不清楚，可以使用（）来改变优先级</p><h4 id="P-25-JS-代码块"><a href="#P-25-JS-代码块" class="headerlink" title="P-25.JS_代码块"></a>P-25.JS_代码块</h4><p>1）我们的程序是由一条语句构成的，语句是按照自上向下的顺序一条一条执行的。</p><p>​      在JS中可以使用{ }来为语句进行分组，同一个{ } 中的语句称为一组语句，他们要么都执行，要么都不执行，一个{ }中的语句我们也称为叫一个代码块。在代码块的后面就不用在写(分号;)了。</p><p>​        JS中的代码块，只具有分组的作用，没有其他用途，代码块的内容，在外部是完全可见的。</p><img src="/2020/05/09/hexo-bolg1/js_14.jpg" class=""><h4 id="P-26-JS-if语句"><a href="#P-26-JS-if语句" class="headerlink" title="P-26.JS_if语句"></a>P-26.JS_if语句</h4><p>1）流程控制语句</p><p>​    在JS中的程序是从上到下一行一行执行的，通过流程控制语句可以控制程序执行流程，使程序可以根据一定的条件来选择执行</p><p>语句的分类：</p><p>​        1.条件控制语句：使用条件判断语句可以执行某个语句之前进行判断，如果条件成立才会执行语句，如果条件不成立则不执行。</p><p>​        语法一：</p><p>if（条件表达式）{</p><p>​                        语句….；</p><p>}</p><p>​        if语句在执行时，会先对条件表达式进行求值判断，如果条件表达式的值为true，则执行if后的语句，<br>如果条件表达式的值为false，则不会执行if后的语句。</p><p>​        if语句只能控制紧随其后的那个语句。可以将这些语句统一放到代码块中。</p><p>​        if语句后的代码块不是必须的，但是在开发中尽量写上代码块,即使if后只有一条语句。</p><img src="/2020/05/09/hexo-bolg1/js_15.jpg" class=""><p>​    语法二：</p><p>if（条件表达式）{</p><p>​        语句….；</p><p>}else{</p><p>​        语句….；</p><p>}</p><p>​        if…else…语句：当语句执行时，会对if后的条件表达式进行求值判断，如果该值为true，则执行if后的语句，如果该值为false，则执行else后的语句</p><p>​        语法三：</p><p>if（条件表达式）{</p><p>​        语句….；</p><p>}else if（条件表达式）{</p><p>​        语句….；</p><p>}else{</p><p>​        语句….；</p><p>}</p><p>​    if…else if…else语句：当语句执行时，会从上到下依次执行对条件表达式进行求值判断，如果值为true，则当前语句，则执行当前语句。如果值为false，则继续向下执行判断，如果所有条件都不满足，则执行最后一个else后的语句。该语句中，只会有一个代码块被执行，一旦代码块执行了，则直接结束语句。</p><p><strong>练习题：</strong></p><p>​    prompt()可以弹出一个提示框,该提示框中会带有一个文本框，用户可以在文本框中输入一段内容，该函数需要一个字符串作为参数，该字符串将会作为提示框的提示文字</p><img src="/2020/05/09/hexo-bolg1/js_16.jpg" class=""><h4 id="P-27-JS-条件分支语句"><a href="#P-27-JS-条件分支语句" class="headerlink" title="P-27.JS_条件分支语句"></a>P-27.JS_条件分支语句</h4><p>1）条件分支语句也叫switcn语句</p><p>​    语法：</p><p>​        switch（条件表达式）{</p><p>​            case 表达式：</p><p>​                语句….</p><p>​                break；</p><p>​        default：</p><p>​                语句…</p><p>​                break；</p><p>}</p><p>执行流程：</p><p>​    switch…case..语句</p><p>​            在执行时会依次将case后的表达式的值和switch后的条件表达式的值进行全等比较</p><p>​            如果比较结果为true，则从当前case处开始执行代码；当前case后的所有代码都会执行。我们可以在case后面跟着一个break关键字，这样可以确保只会执行当前case后的语句，而不会执行其他case。</p><p>​            如果比较结果为false，则继续向下比较</p><p>​            如果所有的比较结果都为false，则只执行default后的语句</p><p>​            switch语句和if语句的功能实际上有重复的，使用switch可以实现if的功能，使用if也可以实现switch的功能，所以我们使用时，可以根据自己的习惯选择</p><h4 id="P-28-JS-while循环"><a href="#P-28-JS-while循环" class="headerlink" title="P-28.JS_while循环"></a>P-28.JS_while循环</h4><p>循环语句：可以反复的执行一段代码多次</p><p>​    while循环：</p><p>​            语法：</p><p>​                while（条件表达式）{</p><p>​                    语句 . . .</p><p>}</p><p>while语句在执行时，</p><p>​            先对条件表达式进行求值判断，如果值为true，则执行循环体，循环体执行完毕以后，继续对表达式进行判断，如true则继续执行循环体，依次类推；如果值为false，则终止循环。</p><p>​            如果表达式的值始终为true，则是死循环，我们可以通过brake来终止循环。</p><p>​    do . . . while循环：</p><p>​            语法：</p><p>​                        do{</p><p>​                                语句 . . .</p><p>​                        }while（条件表达式）</p><p>​    do. . . while语句在执行时，会先执行循环体，循环体执行完毕以后，在对while后的条件进行判断，如果结果为true，则继续执行循环体，执行完毕继续判断，依次类推。如果值为false，则终止循环。</p><p>​    do. . . while语句在执行时，至少会执行一次。</p><h4 id="P-29-JS-for循环"><a href="#P-29-JS-for循环" class="headerlink" title="P-29.JS_for循环"></a>P-29.JS_for循环</h4><p>​    for语句，也是一个循环语句，也称为for循环</p><p>​    在for循环中，为我们提供了专门的位置用来放三个表达式:</p><p>​                1.初始化表达式</p><p>​                2.条件表达式</p><p>​                3.更新表达式</p><p>for循环的语法：</p><p>​        for（初始化表达式；条件表达式；更新表达式）{</p><p>​                    语句. . . </p><p>}</p><p>for循环执行流程：</p><p>​                    1.执行初始化表达式，初始化变量</p><p>​                    2.执行条件表达式，判断是否执行循环，如果为true，则执行循环，</p><p>​                    3.如果为false则终止循环</p><p>​                    4.执行更新表达式，更新表达式执行完毕，继续执行条件表达式。（重复）</p><p><strong>练习题：</strong></p><img src="/2020/05/09/hexo-bolg1/js_17.jpg" class=""><img src="/2020/05/09/hexo-bolg1/js_18.jpg" class=""><h4 id="P-30-JS-对象的简介"><a href="#P-30-JS-对象的简介" class="headerlink" title="P-30.JS_对象的简介"></a>P-30.JS_对象的简介</h4><p>​    JS中的数据类型，String-字符串、Number-数值、Boolean-布尔值、Null-空值、Undefined-未定义；以上五种类型输入基本数据类型，以后我们看到的值只要不是上边的5种，全都是对象。Object-对象，引用数据类型。</p><p>如果使用基本数据类型的数据，我们所创建的变量都是独立，不能成为一个整体。对象属于一种复合的数据类型，在对象中可以保存多个不同数据类型的属性。</p><p>对象的分类：</p><p>1）.内建对象</p><p>​            由ES标准中定义的对象，在任何的ES的实现中都可以使用</p><p>​            比如：Math String Number Boolean Function Object. . . . . .</p><p>2）宿主对象</p><p>​            由JS的运行环境提供的对象，目前来讲主要是指由浏览器的对象</p><p>​            比如BOM  DOM</p><p>3）自定义对象</p><p>​            由开发人员自己创建的对象</p><h4 id="P-31-JS-对象的基本操作"><a href="#P-31-JS-对象的基本操作" class="headerlink" title="P-31.JS_对象的基本操作"></a>P-31.JS_对象的基本操作</h4><p>1）创建对象：使用new关键字调用的函数，是构造函数constructor，构造函数是专门用来创建对象的函数</p><img src="/2020/05/09/hexo-bolg1/js_19.jpg" class=""><p>使用typeof检查一个对象时，会返回object</p><p>在对象中保存的值称为属性,向对象添加属性：</p><img src="/2020/05/09/hexo-bolg1/js_20.jpg" class=""><p>2）读取对象中的属性：</p><img src="/2020/05/09/hexo-bolg1/js_21.jpg" class=""><p>如果读取对象中没有的属性,不会报错而是会返回undefined</p><p>3）修改对象的属性值</p><img src="/2020/05/09/hexo-bolg1/js_22.jpg" class=""><p>4）删除对象的值</p><img src="/2020/05/09/hexo-bolg1/js_23.jpg" class=""><h4 id="P-32-JS-属性名和属性值"><a href="#P-32-JS-属性名和属性值" class="headerlink" title="P-32.JS_属性名和属性值"></a>P-32.JS_属性名和属性值</h4><p>1）使用特殊的属性名，不能采用 . 的方式来操作</p><p>​        需要使用另一种方式：</p><p>​                        语法：对象[“属性名”] = 属性值</p><p>读取时也需要采用这种方式</p><img src="/2020/05/09/hexo-bolg1/js_24.jpg" class=""><p>使用[ ]这种形式去操作属性，更加的灵活，在[ ]中可以直接传递一个变量，这样变量值是多少就会读取那个属性</p><p>JS对象的属性值，可以是任意的数据类型</p><p>2）in 运算符</p><p>​    通过该运算符可以检查一个对象中是否含有指定的属性，如果由则返回true、没有则返回false</p><img src="/2020/05/09/hexo-bolg1/js_25.jpg" class=""><h4 id="P-33-JS-基本和引用数据类型"><a href="#P-33-JS-基本和引用数据类型" class="headerlink" title="P-33.JS_基本和引用数据类型"></a>P-33.JS_基本和引用数据类型</h4><p>1）基本数据类型：JS中的变量都是保存到栈内存中的，基本数据类型的值直接在栈内存中存储，值与值之间是独立存在，修改一个变量不会影响其他的变量。</p><p>2）引用数据类型：对象是保存在堆内存中的，每创建一个新的对象，就会在堆内存中开辟出一个新的空间，而变量保存的是对象的内存地址（对象的引用），如果两个变量保存的是同一个对象的引用，当同一个变量修改属性时，另一个也会受到影响</p><img src="/2020/05/09/hexo-bolg1/js_26.jpg" class=""><p>​    3）比较两个基本数据类型的值时，就是比较值。而比较两个引用数据类型时，它比较的是对象的内存地址，如果两个对象是一模一样的，但是地址不同，它也会返回false。</p><h4 id="P-34-JS-对象字面量"><a href="#P-34-JS-对象字面量" class="headerlink" title="P-34.JS_对象字面量"></a>P-34.JS_对象字面量</h4><p>1）创建一个对象</p><img src="/2020/05/09/hexo-bolg1/js_27.jpg" class=""><p>使用对象字面量来创建对象</p><img src="/2020/05/09/hexo-bolg1/js_28.jpg" class=""><p>以上两种本质是一样的。</p><p>2）使用对象字面量，可以在创建对象时，直接指定对象中的属性</p><img src="/2020/05/09/hexo-bolg1/js_29.jpg" class=""><p>对象字面量的属性名可以加引号也可以不加，建议不加，如果要使用一些特殊的名字，则必须加</p><p>例：</p><img src="/2020/05/09/hexo-bolg1/js_30.jpg" class=""><p>属性名和属性值是一组一组的名值对结构，名和值之间使用：连接；多值对之间使用    <strong>，</strong>（逗号）隔开。</p><p>最后一个值（末尾）无需加（逗号）。</p><h4 id="P-35-JS-函数的简介"><a href="#P-35-JS-函数的简介" class="headerlink" title="P-35.JS_函数的简介"></a>P-35.JS_函数的简介</h4><p>1）函数：也是一个对象，函数中可以封装一些功能（代码），在需要时可以执行这些功能（代码），函数中可以保存一些代码在需要的时候调用。使用typeof检查一个函数对象时，会返回一个function</p><img src="/2020/05/09/hexo-bolg1/js_31.jpg" class=""><p>2）创建一个函数对象，可以将要封装的代码以字符串的形式传递给构造函数，封装到函数中的代码不会立即执行，函数中的代码会在函数调用的时候执行，当调用函数时，函数封装的代码会按照顺序执行</p><p>例：</p><img src="/2020/05/09/hexo-bolg1/js_32.jpg" class=""><p>3）使用函数声明来创建一个函数</p><p>语法：</p><img src="/2020/05/09/hexo-bolg1/js_33.jpg" class=""><p> 4）使用表达式来创建一个函数</p><img src="/2020/05/09/hexo-bolg1/js_34.jpg" class=""><h4 id="P-36-JS-函数的参数"><a href="#P-36-JS-函数的参数" class="headerlink" title="P-36.JS_函数的参数"></a>P-36.JS_函数的参数</h4><p>1）可以在函数中（）中来指定一个或多个形参（形式参数），多个形参之间使用  ,（逗号）隔开，声明形参就相当于在函数内部声明了对应的变量，但是并不赋值</p><p>​    <strong>函数的实参可以是任意的数据类型</strong></p><p>在调用函数时，可以在（）中指定实参（实际参数） </p><p>例：</p><img src="/2020/05/09/hexo-bolg1/js_35.jpg" class=""><p>​    2）调用函数时不会检查实参的类型，所以要注意，是否有可能会接收到非法的参数，如果有可能则需要对参数进行类型的检查。</p><p>​    3）调用函数时，解析器也不会检查实参的数量，多余实参不会被赋值。如果实参数量少于形参数量，则没有对应实参的形参将是undefined</p><h4 id="P-37-JS-函数的返回值"><a href="#P-37-JS-函数的返回值" class="headerlink" title="P-37.JS_函数的返回值"></a>P-37.JS_函数的返回值</h4><p>1）在JS中可以使用return来设置函数的返回值</p><p>​    语法：</p><p>​            return 值；</p><p>​    return后的值将会作为函数的执行结果返回，可以定义一个变量来接收该结果。</p><p>​    调用函数，函数返回什么 s 的值就是什么。变量 S 的值就是函数的返回结果</p><p>例：</p><img src="/2020/05/09/hexo-bolg1/js_36.jpg" class=""><p>注意：在return后的语句都不会执行，如果return语句后不跟任何值，就相当于返回一个undefined。如果不写return也会返回一个undefined。</p><p>注意：return后可以跟任意类型的值。</p><h4 id="P-38-JS-实参可以是任何值"><a href="#P-38-JS-实参可以是任何值" class="headerlink" title="P-38.JS_实参可以是任何值"></a>P-38.JS_实参可以是任何值</h4><p>1）定义一个函数，判断一个数字是否是偶数，如果是返回true，否则返回false</p><p>例：</p><img src="/2020/05/09/hexo-bolg1/js_37.jpg" class=""><p>2）定义一个函数，可以根据半径算一个圆的面积，并返回计算结果</p><img src="/2020/05/09/hexo-bolg1/js_38.jpg" class=""><p>3）创建一个函数，可以在控制台输出一个人的信息</p><img src="/2020/05/09/hexo-bolg1/js_39.jpg" class=""><p>4）实参可以是一个对象，也可以是一个函数</p><img src="/2020/05/09/hexo-bolg1/js_40.jpg" class=""><p>5）将一个匿名函数做实参传递给函数</p><img src="/2020/05/09/hexo-bolg1/js_41.jpg" class=""><p>6）fun（）与fun的区别：</p><img src="/2020/05/09/hexo-bolg1/js_42.jpg" class=""><h4 id="P-39-JS-返回值的类型"><a href="#P-39-JS-返回值的类型" class="headerlink" title="P-39.JS_返回值的类型"></a>P-39.JS_返回值的类型</h4><p>1）break：可以退出当前循环</p><p>2）continue：用于跳过当次循环</p><p>3）return：可以结束整个函数</p><p>返回可以是任意的数据类型，“也可以是一个对象，也可以是一个函数”</p><h4 id="P-40-JS-立即执行函数"><a href="#P-40-JS-立即执行函数" class="headerlink" title="P-40.JS_立即执行函数"></a>P-40.JS_立即执行函数</h4><p>1）立即执行函数：函数定义完，立即被调用。</p><p>2）立即执行函数往往只会执行一次。</p><p>例：</p><img src="/2020/05/09/hexo-bolg1/js_43.jpg" class=""><h4 id="P-41-JS-方法"><a href="#P-41-JS-方法" class="headerlink" title="P-41.JS_方法"></a>P-41.JS_方法</h4><p>1）对象的属性值可以是任意的数据类型，”也可以是函数”</p><p>例：</p><img src="/2020/05/09/hexo-bolg1/js_44.jpg" class=""><p>2）函数也可以称为对象的属性，如果一个函数作为一个对象的属性保存，那么我们称这个函数是这个对象的方法，调用函数就说调用对象的方法   （只是名称区别）</p><img src="/2020/05/09/hexo-bolg1/js_45.jpg" class=""><p>3）字面量书写方式</p><img src="/2020/05/09/hexo-bolg1/js_46.jpg" class=""><p>4）枚举对象中的属性</p><p>使用for. . .in语句</p><p>语法：</p><p>for（var 变量 i 对象）{</p><p>}</p><p>for. . .in语句对象中有几个属性，循环体就会执行几次，每次执行时，会将对象中的一个属性的名字赋值给变量</p><img src="/2020/05/09/hexo-bolg1/js_47.jpg" class=""><h4 id="P-42-JS-全局作用域"><a href="#P-42-JS-全局作用域" class="headerlink" title="P-42.JS_全局作用域"></a>P-42.JS_全局作用域</h4><p>1）作用域指一个变量的作用的范围</p><p>​        在JS中一个分为两种作用域：</p><p>​        1.全局作用域：</p><p>​        直接编写在script标签中的JS代码，都在全局作用域，全局作用域在页面中打开时创建，在页面关闭时销毁。在全局作用域中有一个全局对象window，它代表的是一个浏览器的窗口，它由浏览器创建我们可以直接使用。</p><p>​        在全局作用域中：创建的变量都会作为window对象的属性保存</p><p>​        全局作用域中的变量都是全局变量，在页面的任意的部分都可以访问的到</p><img src="/2020/05/09/hexo-bolg1/js_48.jpg" class=""><p>​        变量的声明提前：使用var关键字声明的变量，会在所有的代码执行之前被声明（但是不会被赋值），但是如果声明变量时不使用var关键字，则变量不会被声明提前。</p><p>例：</p><img src="/2020/05/09/hexo-bolg1/js_49.jpg" class=""><p>​    函数声明提前：使用函数声明形式创建函数function 函数（）{ }，他会在所有代码执行之前就被创建。</p><p>例：</p><img src="/2020/05/09/hexo-bolg1/js_50.jpg" class=""><p>​    使用函数表达式创建的函数，不会被声明提前，所以不能在声明前调用。</p><h4 id="P-43-JS-函数作用域"><a href="#P-43-JS-函数作用域" class="headerlink" title="P-43.JS_函数作用域"></a>P-43.JS_函数作用域</h4><p>​    1） 函数作用域：调用函数时创建函数作用域，函数执行函数完毕以后销毁，没调用一次函数，就会创建一个新的函数作用域 ，他们之间是相互独立的</p><p>​    2）在函数作用域中可以访问到全局作用域的变量，在全局作用域中无法访问到函数作用域的变量</p><p>​    3）当在函数作用域操作一个变量时,它会先在自身作用域中寻找，如果有就直接使用，如果没有则向上一级作用域寻找</p><p>​    4）在函数作用域中，也有声明变量提前的特性，使用var关键字声明变量，会在函数中所有的代码执行前被声明</p><p>例：</p><img src="/2020/05/09/hexo-bolg1/js_51.jpg" class=""><p>​    5）函数声明也会在函数中所有的代码执行之前执行</p><p>​    6）注意:在函数中，不使用var声明的变量都会成为全局变量</p><img src="/2020/05/09/hexo-bolg1/js_52.jpg" class=""><p>7）定义形参就相当于在函数中声明了变量</p><img src="/2020/05/09/hexo-bolg1/js_53.jpg" class=""><h4 id="P-44-JS-debug"><a href="#P-44-JS-debug" class="headerlink" title="P-44.JS_debug"></a>P-44.JS_debug</h4><p>1）断点调试</p><img src="/2020/05/09/hexo-bolg1/js_54.jpg" class=""><h4 id="P-45-JS-this"><a href="#P-45-JS-this" class="headerlink" title="P-45.JS_this"></a>P-45.JS_this</h4><p>​    解析器在调用函数每次都会向函数内部传递进一个隐含的参数，这个隐含的参数就是this，this指向的是一个对象，这个对象我们称为函数执行的上下文对象。</p><p>​    根据函数的调用方式的不用，this会指向不同的对象</p><p>​        1.以函数的形式调用时，this永远都是window</p><p>​        2.以方法的形式调用时，this就是调用的那个对象</p><p>例：</p><img src="/2020/05/09/hexo-bolg1/js_55.jpg" class="">]]></content>
      
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
